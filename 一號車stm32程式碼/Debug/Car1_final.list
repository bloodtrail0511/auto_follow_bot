
Car1_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007178  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08007288  08007288  00008288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007500  08007500  00009070  2**0
                  CONTENTS
  4 .ARM          00000000  08007500  08007500  00009070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007500  08007500  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007500  08007500  00008500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007504  08007504  00008504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007508  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  20000070  08007578  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  08007578  000094f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c014  00000000  00000000  00009099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c69  00000000  00000000  000150ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  00016d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ca  00000000  00000000  00017980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a08  00000000  00000000  0001834a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ddda  00000000  00000000  0002fd52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b0aa  00000000  00000000  0003db2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8bd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db0  00000000  00000000  000c8c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000cc9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08007270 	.word	0x08007270

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08007270 	.word	0x08007270

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dc6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	@ 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	@ 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	@ 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_f2uiz>:
 8001100:	0042      	lsls	r2, r0, #1
 8001102:	d20e      	bcs.n	8001122 <__aeabi_f2uiz+0x22>
 8001104:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001108:	d30b      	bcc.n	8001122 <__aeabi_f2uiz+0x22>
 800110a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800110e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001112:	d409      	bmi.n	8001128 <__aeabi_f2uiz+0x28>
 8001114:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001118:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	4770      	bx	lr
 8001122:	f04f 0000 	mov.w	r0, #0
 8001126:	4770      	bx	lr
 8001128:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800112c:	d101      	bne.n	8001132 <__aeabi_f2uiz+0x32>
 800112e:	0242      	lsls	r2, r0, #9
 8001130:	d102      	bne.n	8001138 <__aeabi_f2uiz+0x38>
 8001132:	f04f 30ff 	mov.w	r0, #4294967295
 8001136:	4770      	bx	lr
 8001138:	f04f 0000 	mov.w	r0, #0
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop

08001140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001146:	f001 fd55 	bl	8002bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114a:	f000 f8e9 	bl	8001320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114e:	f000 fa7b 	bl	8001648 <MX_GPIO_Init>
  MX_DMA_Init();
 8001152:	f000 fa5b 	bl	800160c <MX_DMA_Init>
  MX_TIM1_Init();
 8001156:	f000 f929 	bl	80013ac <MX_TIM1_Init>
  MX_TIM3_Init();
 800115a:	f000 f9d3 	bl	8001504 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800115e:	f000 fa2b 	bl	80015b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001162:	2100      	movs	r1, #0
 8001164:	4851      	ldr	r0, [pc, #324]	@ (80012ac <main+0x16c>)
 8001166:	f002 ff0f 	bl	8003f88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800116a:	2100      	movs	r1, #0
 800116c:	4850      	ldr	r0, [pc, #320]	@ (80012b0 <main+0x170>)
 800116e:	f002 ff0b 	bl	8003f88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001172:	2104      	movs	r1, #4
 8001174:	484e      	ldr	r0, [pc, #312]	@ (80012b0 <main+0x170>)
 8001176:	f002 ff07 	bl	8003f88 <HAL_TIM_PWM_Start>
  // uart
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx_buffer, RX_BUFFER_SIZE);
 800117a:	2217      	movs	r2, #23
 800117c:	494d      	ldr	r1, [pc, #308]	@ (80012b4 <main+0x174>)
 800117e:	484e      	ldr	r0, [pc, #312]	@ (80012b8 <main+0x178>)
 8001180:	f003 fcdd 	bl	8004b3e <HAL_UARTEx_ReceiveToIdle_DMA>
	// PID
	PID_str_init(&image2steerPercent_PID_str, Kp_image2turnPercent, Ki_image2turnPercent, Kd_image2turnPercent, 0, dt_image2turnPercent, 100, -100);
 8001184:	4b4d      	ldr	r3, [pc, #308]	@ (80012bc <main+0x17c>)
 8001186:	9303      	str	r3, [sp, #12]
 8001188:	4b4d      	ldr	r3, [pc, #308]	@ (80012c0 <main+0x180>)
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	4b4d      	ldr	r3, [pc, #308]	@ (80012c4 <main+0x184>)
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	4b4c      	ldr	r3, [pc, #304]	@ (80012c8 <main+0x188>)
 8001198:	4a4c      	ldr	r2, [pc, #304]	@ (80012cc <main+0x18c>)
 800119a:	494d      	ldr	r1, [pc, #308]	@ (80012d0 <main+0x190>)
 800119c:	484d      	ldr	r0, [pc, #308]	@ (80012d4 <main+0x194>)
 800119e:	f000 fb3f 	bl	8001820 <PID_str_init>
	PID_str_init(&front_wheel_PID_str, Kp_speed, Ki_speed, Kd_speed, 0, dt_speed, PID_speed_max, PID_speed_min);
 80011a2:	4b4d      	ldr	r3, [pc, #308]	@ (80012d8 <main+0x198>)
 80011a4:	9303      	str	r3, [sp, #12]
 80011a6:	4b4d      	ldr	r3, [pc, #308]	@ (80012dc <main+0x19c>)
 80011a8:	9302      	str	r3, [sp, #8]
 80011aa:	4b4d      	ldr	r3, [pc, #308]	@ (80012e0 <main+0x1a0>)
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	f04f 0300 	mov.w	r3, #0
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011b8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80011bc:	4949      	ldr	r1, [pc, #292]	@ (80012e4 <main+0x1a4>)
 80011be:	484a      	ldr	r0, [pc, #296]	@ (80012e8 <main+0x1a8>)
 80011c0:	f000 fb2e 	bl	8001820 <PID_str_init>
	PID_str_init(&rear_wheel_PID_str, Kp_speed, Ki_speed, Kd_speed, 0, dt_speed, PID_speed_max, PID_speed_min);
 80011c4:	4b44      	ldr	r3, [pc, #272]	@ (80012d8 <main+0x198>)
 80011c6:	9303      	str	r3, [sp, #12]
 80011c8:	4b44      	ldr	r3, [pc, #272]	@ (80012dc <main+0x19c>)
 80011ca:	9302      	str	r3, [sp, #8]
 80011cc:	4b44      	ldr	r3, [pc, #272]	@ (80012e0 <main+0x1a0>)
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	f04f 0300 	mov.w	r3, #0
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011da:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80011de:	4941      	ldr	r1, [pc, #260]	@ (80012e4 <main+0x1a4>)
 80011e0:	4842      	ldr	r0, [pc, #264]	@ (80012ec <main+0x1ac>)
 80011e2:	f000 fb1d 	bl	8001820 <PID_str_init>
	PID_str_init(&dis2spd_PID_str, Kp_dis_ctrl, Ki_dis_ctrl, Kd_dis_ctrl, FOLLOWING_DIST, dt_dis_ctrl, MaxOutput_dis_ctrl, MinOutput_dis_ctrl);
 80011e6:	4b42      	ldr	r3, [pc, #264]	@ (80012f0 <main+0x1b0>)
 80011e8:	9303      	str	r3, [sp, #12]
 80011ea:	4b42      	ldr	r3, [pc, #264]	@ (80012f4 <main+0x1b4>)
 80011ec:	9302      	str	r3, [sp, #8]
 80011ee:	4b35      	ldr	r3, [pc, #212]	@ (80012c4 <main+0x184>)
 80011f0:	9301      	str	r3, [sp, #4]
 80011f2:	4b33      	ldr	r3, [pc, #204]	@ (80012c0 <main+0x180>)
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	4b40      	ldr	r3, [pc, #256]	@ (80012f8 <main+0x1b8>)
 80011f8:	4a40      	ldr	r2, [pc, #256]	@ (80012fc <main+0x1bc>)
 80011fa:	4941      	ldr	r1, [pc, #260]	@ (8001300 <main+0x1c0>)
 80011fc:	4841      	ldr	r0, [pc, #260]	@ (8001304 <main+0x1c4>)
 80011fe:	f000 fb0f 	bl	8001820 <PID_str_init>
	PID_str_init(&dis2spd_PID_str_back, Kp_dis_ctrl_back, Ki_dis_ctrl_back, Kd_dis_ctrl_back, FOLLOWING_DIST, dt_dis_ctrl, MaxOutput_dis_ctrl, MinOutput_dis_ctrl);
 8001202:	4b3b      	ldr	r3, [pc, #236]	@ (80012f0 <main+0x1b0>)
 8001204:	9303      	str	r3, [sp, #12]
 8001206:	4b3b      	ldr	r3, [pc, #236]	@ (80012f4 <main+0x1b4>)
 8001208:	9302      	str	r3, [sp, #8]
 800120a:	4b2e      	ldr	r3, [pc, #184]	@ (80012c4 <main+0x184>)
 800120c:	9301      	str	r3, [sp, #4]
 800120e:	4b2c      	ldr	r3, [pc, #176]	@ (80012c0 <main+0x180>)
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	4b39      	ldr	r3, [pc, #228]	@ (80012f8 <main+0x1b8>)
 8001214:	4a3c      	ldr	r2, [pc, #240]	@ (8001308 <main+0x1c8>)
 8001216:	493d      	ldr	r1, [pc, #244]	@ (800130c <main+0x1cc>)
 8001218:	483d      	ldr	r0, [pc, #244]	@ (8001310 <main+0x1d0>)
 800121a:	f000 fb01 	bl	8001820 <PID_str_init>

	init_timer_flags(timer_flags);
 800121e:	4b3d      	ldr	r3, [pc, #244]	@ (8001314 <main+0x1d4>)
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
 8001224:	4b3b      	ldr	r3, [pc, #236]	@ (8001314 <main+0x1d4>)
 8001226:	2200      	movs	r2, #0
 8001228:	705a      	strb	r2, [r3, #1]
 800122a:	4b3a      	ldr	r3, [pc, #232]	@ (8001314 <main+0x1d4>)
 800122c:	2200      	movs	r2, #0
 800122e:	709a      	strb	r2, [r3, #2]
 8001230:	4b38      	ldr	r3, [pc, #224]	@ (8001314 <main+0x1d4>)
 8001232:	2200      	movs	r2, #0
 8001234:	70da      	strb	r2, [r3, #3]
 8001236:	4b37      	ldr	r3, [pc, #220]	@ (8001314 <main+0x1d4>)
 8001238:	2201      	movs	r2, #1
 800123a:	711a      	strb	r2, [r3, #4]
 800123c:	4b35      	ldr	r3, [pc, #212]	@ (8001314 <main+0x1d4>)
 800123e:	2200      	movs	r2, #0
 8001240:	715a      	strb	r2, [r3, #5]

	//GY85_Init(&IMU_car);
	AMB82_INIT();
 8001242:	4b35      	ldr	r3, [pc, #212]	@ (8001318 <main+0x1d8>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
 8001248:	4b33      	ldr	r3, [pc, #204]	@ (8001318 <main+0x1d8>)
 800124a:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	4b31      	ldr	r3, [pc, #196]	@ (8001318 <main+0x1d8>)
 8001252:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	4b2f      	ldr	r3, [pc, #188]	@ (8001318 <main+0x1d8>)
 800125a:	2264      	movs	r2, #100	@ 0x64
 800125c:	61da      	str	r2, [r3, #28]
	MAP_INIT(map);
 800125e:	4b2f      	ldr	r3, [pc, #188]	@ (800131c <main+0x1dc>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	e018      	b.n	800129c <main+0x15c>
 800126a:	4a2c      	ldr	r2, [pc, #176]	@ (800131c <main+0x1dc>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	4413      	add	r3, r2
 8001272:	4a13      	ldr	r2, [pc, #76]	@ (80012c0 <main+0x180>)
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	4a29      	ldr	r2, [pc, #164]	@ (800131c <main+0x1dc>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	4413      	add	r3, r2
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	4a25      	ldr	r2, [pc, #148]	@ (800131c <main+0x1dc>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	3314      	adds	r3, #20
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
 8001290:	4b22      	ldr	r3, [pc, #136]	@ (800131c <main+0x1dc>)
 8001292:	2200      	movs	r2, #0
 8001294:	619a      	str	r2, [r3, #24]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3301      	adds	r3, #1
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	dde3      	ble.n	800126a <main+0x12a>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	following_loop_new();
 80012a2:	f001 f8e5 	bl	8002470 <following_loop_new>

  while (1)
 80012a6:	bf00      	nop
 80012a8:	e7fd      	b.n	80012a6 <main+0x166>
 80012aa:	bf00      	nop
 80012ac:	200000d4 	.word	0x200000d4
 80012b0:	2000008c 	.word	0x2000008c
 80012b4:	20000358 	.word	0x20000358
 80012b8:	2000011c 	.word	0x2000011c
 80012bc:	c2c80000 	.word	0xc2c80000
 80012c0:	42c80000 	.word	0x42c80000
 80012c4:	3e4ccccd 	.word	0x3e4ccccd
 80012c8:	3d4ccccd 	.word	0x3d4ccccd
 80012cc:	38d1b717 	.word	0x38d1b717
 80012d0:	3df5c28f 	.word	0x3df5c28f
 80012d4:	200001dc 	.word	0x200001dc
 80012d8:	c6322000 	.word	0xc6322000
 80012dc:	46322000 	.word	0x46322000
 80012e0:	3dcccccd 	.word	0x3dcccccd
 80012e4:	42a00000 	.word	0x42a00000
 80012e8:	20000228 	.word	0x20000228
 80012ec:	20000274 	.word	0x20000274
 80012f0:	c3fa0000 	.word	0xc3fa0000
 80012f4:	43fa0000 	.word	0x43fa0000
 80012f8:	ba83126f 	.word	0xba83126f
 80012fc:	b8d1b717 	.word	0xb8d1b717
 8001300:	c0200000 	.word	0xc0200000
 8001304:	200002c0 	.word	0x200002c0
 8001308:	b8d52f13 	.word	0xb8d52f13
 800130c:	c0800000 	.word	0xc0800000
 8001310:	2000030c 	.word	0x2000030c
 8001314:	200001a8 	.word	0x200001a8
 8001318:	20000388 	.word	0x20000388
 800131c:	200001c0 	.word	0x200001c0

08001320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b090      	sub	sp, #64	@ 0x40
 8001324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001326:	f107 0318 	add.w	r3, r7, #24
 800132a:	2228      	movs	r2, #40	@ 0x28
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f003 ff2a 	bl	8005188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001342:	2301      	movs	r3, #1
 8001344:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001346:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800134a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001350:	2301      	movs	r3, #1
 8001352:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001354:	2302      	movs	r3, #2
 8001356:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001358:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800135c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800135e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001362:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001364:	f107 0318 	add.w	r3, r7, #24
 8001368:	4618      	mov	r0, r3
 800136a:	f002 f95f 	bl	800362c <HAL_RCC_OscConfig>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001374:	f001 fa14 	bl	80027a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001378:	230f      	movs	r3, #15
 800137a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137c:	2302      	movs	r3, #2
 800137e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001384:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001388:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	2102      	movs	r1, #2
 8001392:	4618      	mov	r0, r3
 8001394:	f002 fbcc 	bl	8003b30 <HAL_RCC_ClockConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800139e:	f001 f9ff 	bl	80027a0 <Error_Handler>
  }
}
 80013a2:	bf00      	nop
 80013a4:	3740      	adds	r7, #64	@ 0x40
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b096      	sub	sp, #88	@ 0x58
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]
 80013da:	615a      	str	r2, [r3, #20]
 80013dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	2220      	movs	r2, #32
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f003 fecf 	bl	8005188 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013ea:	4b44      	ldr	r3, [pc, #272]	@ (80014fc <MX_TIM1_Init+0x150>)
 80013ec:	4a44      	ldr	r2, [pc, #272]	@ (8001500 <MX_TIM1_Init+0x154>)
 80013ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6-1;
 80013f0:	4b42      	ldr	r3, [pc, #264]	@ (80014fc <MX_TIM1_Init+0x150>)
 80013f2:	2205      	movs	r2, #5
 80013f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f6:	4b41      	ldr	r3, [pc, #260]	@ (80014fc <MX_TIM1_Init+0x150>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 12000-1;
 80013fc:	4b3f      	ldr	r3, [pc, #252]	@ (80014fc <MX_TIM1_Init+0x150>)
 80013fe:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001402:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001404:	4b3d      	ldr	r3, [pc, #244]	@ (80014fc <MX_TIM1_Init+0x150>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800140a:	4b3c      	ldr	r3, [pc, #240]	@ (80014fc <MX_TIM1_Init+0x150>)
 800140c:	2200      	movs	r2, #0
 800140e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001410:	4b3a      	ldr	r3, [pc, #232]	@ (80014fc <MX_TIM1_Init+0x150>)
 8001412:	2200      	movs	r2, #0
 8001414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001416:	4839      	ldr	r0, [pc, #228]	@ (80014fc <MX_TIM1_Init+0x150>)
 8001418:	f002 fd18 	bl	8003e4c <HAL_TIM_Base_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001422:	f001 f9bd 	bl	80027a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001426:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800142a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800142c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001430:	4619      	mov	r1, r3
 8001432:	4832      	ldr	r0, [pc, #200]	@ (80014fc <MX_TIM1_Init+0x150>)
 8001434:	f002 ff0c 	bl	8004250 <HAL_TIM_ConfigClockSource>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800143e:	f001 f9af 	bl	80027a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001442:	482e      	ldr	r0, [pc, #184]	@ (80014fc <MX_TIM1_Init+0x150>)
 8001444:	f002 fd51 	bl	8003eea <HAL_TIM_PWM_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800144e:	f001 f9a7 	bl	80027a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800145a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800145e:	4619      	mov	r1, r3
 8001460:	4826      	ldr	r0, [pc, #152]	@ (80014fc <MX_TIM1_Init+0x150>)
 8001462:	f003 fa6d 	bl	8004940 <HAL_TIMEx_MasterConfigSynchronization>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800146c:	f001 f998 	bl	80027a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001470:	2360      	movs	r3, #96	@ 0x60
 8001472:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001478:	2300      	movs	r3, #0
 800147a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800147c:	2300      	movs	r3, #0
 800147e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001484:	2300      	movs	r3, #0
 8001486:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800148c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001490:	2200      	movs	r2, #0
 8001492:	4619      	mov	r1, r3
 8001494:	4819      	ldr	r0, [pc, #100]	@ (80014fc <MX_TIM1_Init+0x150>)
 8001496:	f002 fe19 	bl	80040cc <HAL_TIM_PWM_ConfigChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80014a0:	f001 f97e 	bl	80027a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a8:	2204      	movs	r2, #4
 80014aa:	4619      	mov	r1, r3
 80014ac:	4813      	ldr	r0, [pc, #76]	@ (80014fc <MX_TIM1_Init+0x150>)
 80014ae:	f002 fe0d 	bl	80040cc <HAL_TIM_PWM_ConfigChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80014b8:	f001 f972 	bl	80027a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	4807      	ldr	r0, [pc, #28]	@ (80014fc <MX_TIM1_Init+0x150>)
 80014e0:	f003 fa8c 	bl	80049fc <HAL_TIMEx_ConfigBreakDeadTime>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80014ea:	f001 f959 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014ee:	4803      	ldr	r0, [pc, #12]	@ (80014fc <MX_TIM1_Init+0x150>)
 80014f0:	f001 f9ca 	bl	8002888 <HAL_TIM_MspPostInit>

}
 80014f4:	bf00      	nop
 80014f6:	3758      	adds	r7, #88	@ 0x58
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	2000008c 	.word	0x2000008c
 8001500:	40012c00 	.word	0x40012c00

08001504 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	@ 0x28
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150a:	f107 0320 	add.w	r3, r7, #32
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]
 8001522:	615a      	str	r2, [r3, #20]
 8001524:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001526:	4b22      	ldr	r3, [pc, #136]	@ (80015b0 <MX_TIM3_Init+0xac>)
 8001528:	4a22      	ldr	r2, [pc, #136]	@ (80015b4 <MX_TIM3_Init+0xb0>)
 800152a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 30-1;
 800152c:	4b20      	ldr	r3, [pc, #128]	@ (80015b0 <MX_TIM3_Init+0xac>)
 800152e:	221d      	movs	r2, #29
 8001530:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001532:	4b1f      	ldr	r3, [pc, #124]	@ (80015b0 <MX_TIM3_Init+0xac>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 48000-1;
 8001538:	4b1d      	ldr	r3, [pc, #116]	@ (80015b0 <MX_TIM3_Init+0xac>)
 800153a:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 800153e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001540:	4b1b      	ldr	r3, [pc, #108]	@ (80015b0 <MX_TIM3_Init+0xac>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001546:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <MX_TIM3_Init+0xac>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800154c:	4818      	ldr	r0, [pc, #96]	@ (80015b0 <MX_TIM3_Init+0xac>)
 800154e:	f002 fccc 	bl	8003eea <HAL_TIM_PWM_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001558:	f001 f922 	bl	80027a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001564:	f107 0320 	add.w	r3, r7, #32
 8001568:	4619      	mov	r1, r3
 800156a:	4811      	ldr	r0, [pc, #68]	@ (80015b0 <MX_TIM3_Init+0xac>)
 800156c:	f003 f9e8 	bl	8004940 <HAL_TIMEx_MasterConfigSynchronization>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001576:	f001 f913 	bl	80027a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800157a:	2360      	movs	r3, #96	@ 0x60
 800157c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3600;
 800157e:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8001582:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2200      	movs	r2, #0
 8001590:	4619      	mov	r1, r3
 8001592:	4807      	ldr	r0, [pc, #28]	@ (80015b0 <MX_TIM3_Init+0xac>)
 8001594:	f002 fd9a 	bl	80040cc <HAL_TIM_PWM_ConfigChannel>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800159e:	f001 f8ff 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015a2:	4803      	ldr	r0, [pc, #12]	@ (80015b0 <MX_TIM3_Init+0xac>)
 80015a4:	f001 f970 	bl	8002888 <HAL_TIM_MspPostInit>

}
 80015a8:	bf00      	nop
 80015aa:	3728      	adds	r7, #40	@ 0x28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200000d4 	.word	0x200000d4
 80015b4:	40000400 	.word	0x40000400

080015b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015bc:	4b11      	ldr	r3, [pc, #68]	@ (8001604 <MX_USART2_UART_Init+0x4c>)
 80015be:	4a12      	ldr	r2, [pc, #72]	@ (8001608 <MX_USART2_UART_Init+0x50>)
 80015c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015c2:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <MX_USART2_UART_Init+0x4c>)
 80015c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <MX_USART2_UART_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <MX_USART2_UART_Init+0x4c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <MX_USART2_UART_Init+0x4c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015dc:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <MX_USART2_UART_Init+0x4c>)
 80015de:	220c      	movs	r2, #12
 80015e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e2:	4b08      	ldr	r3, [pc, #32]	@ (8001604 <MX_USART2_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <MX_USART2_UART_Init+0x4c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ee:	4805      	ldr	r0, [pc, #20]	@ (8001604 <MX_USART2_UART_Init+0x4c>)
 80015f0:	f003 fa55 	bl	8004a9e <HAL_UART_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015fa:	f001 f8d1 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000011c 	.word	0x2000011c
 8001608:	40004400 	.word	0x40004400

0800160c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001612:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <MX_DMA_Init+0x38>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	4a0b      	ldr	r2, [pc, #44]	@ (8001644 <MX_DMA_Init+0x38>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6153      	str	r3, [r2, #20]
 800161e:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <MX_DMA_Init+0x38>)
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	2010      	movs	r0, #16
 8001630:	f001 fc19 	bl	8002e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001634:	2010      	movs	r0, #16
 8001636:	f001 fc32 	bl	8002e9e <HAL_NVIC_EnableIRQ>

}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000

08001648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164e:	f107 0310 	add.w	r3, r7, #16
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800165c:	4b36      	ldr	r3, [pc, #216]	@ (8001738 <MX_GPIO_Init+0xf0>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a35      	ldr	r2, [pc, #212]	@ (8001738 <MX_GPIO_Init+0xf0>)
 8001662:	f043 0320 	orr.w	r3, r3, #32
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b33      	ldr	r3, [pc, #204]	@ (8001738 <MX_GPIO_Init+0xf0>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001674:	4b30      	ldr	r3, [pc, #192]	@ (8001738 <MX_GPIO_Init+0xf0>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	4a2f      	ldr	r2, [pc, #188]	@ (8001738 <MX_GPIO_Init+0xf0>)
 800167a:	f043 0304 	orr.w	r3, r3, #4
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b2d      	ldr	r3, [pc, #180]	@ (8001738 <MX_GPIO_Init+0xf0>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168c:	4b2a      	ldr	r3, [pc, #168]	@ (8001738 <MX_GPIO_Init+0xf0>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a29      	ldr	r2, [pc, #164]	@ (8001738 <MX_GPIO_Init+0xf0>)
 8001692:	f043 0308 	orr.w	r3, r3, #8
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b27      	ldr	r3, [pc, #156]	@ (8001738 <MX_GPIO_Init+0xf0>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016aa:	4824      	ldr	r0, [pc, #144]	@ (800173c <MX_GPIO_Init+0xf4>)
 80016ac:	f001 ff84 	bl	80035b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 80016b6:	4822      	ldr	r0, [pc, #136]	@ (8001740 <MX_GPIO_Init+0xf8>)
 80016b8:	f001 ff7e 	bl	80035b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016bc:	2303      	movs	r3, #3
 80016be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016c0:	4b20      	ldr	r3, [pc, #128]	@ (8001744 <MX_GPIO_Init+0xfc>)
 80016c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	f107 0310 	add.w	r3, r7, #16
 80016cc:	4619      	mov	r1, r3
 80016ce:	481b      	ldr	r0, [pc, #108]	@ (800173c <MX_GPIO_Init+0xf4>)
 80016d0:	f001 fdee 	bl	80032b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80016d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016da:	2301      	movs	r3, #1
 80016dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2302      	movs	r3, #2
 80016e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e6:	f107 0310 	add.w	r3, r7, #16
 80016ea:	4619      	mov	r1, r3
 80016ec:	4813      	ldr	r0, [pc, #76]	@ (800173c <MX_GPIO_Init+0xf4>)
 80016ee:	f001 fddf 	bl	80032b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016f2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80016f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2302      	movs	r3, #2
 8001702:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	4619      	mov	r1, r3
 800170a:	480d      	ldr	r0, [pc, #52]	@ (8001740 <MX_GPIO_Init+0xf8>)
 800170c:	f001 fdd0 	bl	80032b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2100      	movs	r1, #0
 8001714:	2006      	movs	r0, #6
 8001716:	f001 fba6 	bl	8002e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800171a:	2006      	movs	r0, #6
 800171c:	f001 fbbf 	bl	8002e9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	2007      	movs	r0, #7
 8001726:	f001 fb9e 	bl	8002e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800172a:	2007      	movs	r0, #7
 800172c:	f001 fbb7 	bl	8002e9e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001730:	bf00      	nop
 8001732:	3720      	adds	r7, #32
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40021000 	.word	0x40021000
 800173c:	40010c00 	.word	0x40010c00
 8001740:	40010800 	.word	0x40010800
 8001744:	10110000 	.word	0x10110000

08001748 <check_and_set_servo_pwmval>:

/* USER CODE BEGIN 4 */
void check_and_set_servo_pwmval(uint16_t* pwmval){
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	//check
	if(*pwmval > TIM3_PWMVal_MAX) *pwmval = TIM3_PWMVal_MAX;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	f5b3 5faf 	cmp.w	r3, #5600	@ 0x15e0
 8001758:	d903      	bls.n	8001762 <check_and_set_servo_pwmval+0x1a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f44f 52af 	mov.w	r2, #5600	@ 0x15e0
 8001760:	801a      	strh	r2, [r3, #0]
	if(*pwmval < TIM3_PWMVal_MIN) *pwmval = TIM3_PWMVal_MIN;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800176a:	d203      	bcs.n	8001774 <check_and_set_servo_pwmval+0x2c>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8001772:	801a      	strh	r2, [r3, #0]
	//set
	__HAL_TIM_SetCompare(servo_PWM_TIM, servo_PWM_CHANNEL, *pwmval);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	881a      	ldrh	r2, [r3, #0]
 8001778:	4b03      	ldr	r3, [pc, #12]	@ (8001788 <check_and_set_servo_pwmval+0x40>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	200000d4 	.word	0x200000d4

0800178c <check_and_set_DCmotor_pwm>:

void check_and_set_DCmotor_pwm(){
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	//check
	if (front_wheel_pwmval > TIM1_PWMVal_MAX) front_wheel_pwmval = TIM1_PWMVal_MAX;
 8001790:	4b1e      	ldr	r3, [pc, #120]	@ (800180c <check_and_set_DCmotor_pwm+0x80>)
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	f642 4288 	movw	r2, #11400	@ 0x2c88
 8001798:	4293      	cmp	r3, r2
 800179a:	d903      	bls.n	80017a4 <check_and_set_DCmotor_pwm+0x18>
 800179c:	4b1b      	ldr	r3, [pc, #108]	@ (800180c <check_and_set_DCmotor_pwm+0x80>)
 800179e:	f642 4288 	movw	r2, #11400	@ 0x2c88
 80017a2:	801a      	strh	r2, [r3, #0]
	if (rear_wheel_pwmval > TIM1_PWMVal_MAX) rear_wheel_pwmval = TIM1_PWMVal_MAX;
 80017a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001810 <check_and_set_DCmotor_pwm+0x84>)
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	f642 4288 	movw	r2, #11400	@ 0x2c88
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d903      	bls.n	80017b8 <check_and_set_DCmotor_pwm+0x2c>
 80017b0:	4b17      	ldr	r3, [pc, #92]	@ (8001810 <check_and_set_DCmotor_pwm+0x84>)
 80017b2:	f642 4288 	movw	r2, #11400	@ 0x2c88
 80017b6:	801a      	strh	r2, [r3, #0]
	if (front_wheel_pwmval < TIM1_PWMVal_MIN) front_wheel_pwmval = TIM1_PWMVal_MIN;
	if (rear_wheel_pwmval < TIM1_PWMVal_MIN) rear_wheel_pwmval = TIM1_PWMVal_MIN;
	//set
	SET_FRONT_MOTOR_PWM(front_wheel_pwmval);
 80017b8:	4b14      	ldr	r3, [pc, #80]	@ (800180c <check_and_set_DCmotor_pwm+0x80>)
 80017ba:	881a      	ldrh	r2, [r3, #0]
 80017bc:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <check_and_set_DCmotor_pwm+0x88>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	635a      	str	r2, [r3, #52]	@ 0x34
	SET_REAR_MOTOR_PWM(rear_wheel_pwmval);
 80017c2:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <check_and_set_DCmotor_pwm+0x84>)
 80017c4:	881a      	ldrh	r2, [r3, #0]
 80017c6:	4b13      	ldr	r3, [pc, #76]	@ (8001814 <check_and_set_DCmotor_pwm+0x88>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	639a      	str	r2, [r3, #56]	@ 0x38
	if(is_go_backward){
 80017cc:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <check_and_set_DCmotor_pwm+0x8c>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00c      	beq.n	80017ee <check_and_set_DCmotor_pwm+0x62>
		HAL_GPIO_WritePin(MOTOR_DIR_CTRL_GPIO, FRONT_MOTOR_DIR_CTRL_PIN, FRONT_MOTOR_DIR_CTRL_BACKWARD);
 80017d4:	2201      	movs	r2, #1
 80017d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017da:	4810      	ldr	r0, [pc, #64]	@ (800181c <check_and_set_DCmotor_pwm+0x90>)
 80017dc:	f001 feec 	bl	80035b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_DIR_CTRL_GPIO, REAR_MOTOR_DIR_CTRL_PIN, REAR_MOTOR_DIR_CTRL_BACKWARD);
 80017e0:	2201      	movs	r2, #1
 80017e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017e6:	480d      	ldr	r0, [pc, #52]	@ (800181c <check_and_set_DCmotor_pwm+0x90>)
 80017e8:	f001 fee6 	bl	80035b8 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(MOTOR_DIR_CTRL_GPIO, FRONT_MOTOR_DIR_CTRL_PIN, FRONT_MOTOR_DIR_CTRL_FORWARD);
		HAL_GPIO_WritePin(MOTOR_DIR_CTRL_GPIO, REAR_MOTOR_DIR_CTRL_PIN, REAR_MOTOR_DIR_CTRL_FORWARD);
	}
}
 80017ec:	e00b      	b.n	8001806 <check_and_set_DCmotor_pwm+0x7a>
		HAL_GPIO_WritePin(MOTOR_DIR_CTRL_GPIO, FRONT_MOTOR_DIR_CTRL_PIN, FRONT_MOTOR_DIR_CTRL_FORWARD);
 80017ee:	2200      	movs	r2, #0
 80017f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017f4:	4809      	ldr	r0, [pc, #36]	@ (800181c <check_and_set_DCmotor_pwm+0x90>)
 80017f6:	f001 fedf 	bl	80035b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_DIR_CTRL_GPIO, REAR_MOTOR_DIR_CTRL_PIN, REAR_MOTOR_DIR_CTRL_FORWARD);
 80017fa:	2200      	movs	r2, #0
 80017fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001800:	4806      	ldr	r0, [pc, #24]	@ (800181c <check_and_set_DCmotor_pwm+0x90>)
 8001802:	f001 fed9 	bl	80035b8 <HAL_GPIO_WritePin>
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200001b8 	.word	0x200001b8
 8001810:	200001ba 	.word	0x200001ba
 8001814:	2000008c 	.word	0x2000008c
 8001818:	200001bc 	.word	0x200001bc
 800181c:	40010800 	.word	0x40010800

08001820 <PID_str_init>:

void PID_str_init(PID_t *PID, float Kp, float Ki, float Kd, float targe_val, float dt, float max, float min){
 8001820:	b480      	push	{r7}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	603b      	str	r3, [r7, #0]
	PID->Kp = Kp;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	601a      	str	r2, [r3, #0]
	PID->Ki = Ki;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	605a      	str	r2, [r3, #4]
	PID->Kd = Kd;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	609a      	str	r2, [r3, #8]
	PID->target_val = targe_val;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6a3a      	ldr	r2, [r7, #32]
 8001844:	60da      	str	r2, [r3, #12]
	PID->dt = dt;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800184a:	63da      	str	r2, [r3, #60]	@ 0x3c
	for (int i = 0; i < PID_BUFFERSIZE; i++){
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	e009      	b.n	8001866 <PID_str_init+0x46>
		PID->err_buffer[i] = 0;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	3204      	adds	r2, #4
 8001858:	f04f 0100 	mov.w	r1, #0
 800185c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < PID_BUFFERSIZE; i++){
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	3301      	adds	r3, #1
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	2b09      	cmp	r3, #9
 800186a:	ddf2      	ble.n	8001852 <PID_str_init+0x32>
	}
	PID->cir_queue_index = 0;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2200      	movs	r2, #0
 8001870:	639a      	str	r2, [r3, #56]	@ 0x38
	PID->max_ctrl_val = max;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001876:	641a      	str	r2, [r3, #64]	@ 0x40
	PID->min_ctrl_val = min;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800187c:	645a      	str	r2, [r3, #68]	@ 0x44
	PID->ctrl_val = 0;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8001886:	bf00      	nop
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <PID_control>:

void PID_control(PID_t *PID, float new_val){
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b089      	sub	sp, #36	@ 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
	float P, I, D, d_err;
	float err_sum = 0;
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
	PID->err_buffer[PID->cir_queue_index] = PID->target_val - new_val;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80018a8:	6839      	ldr	r1, [r7, #0]
 80018aa:	4610      	mov	r0, r2
 80018ac:	f7ff f958 	bl	8000b60 <__aeabi_fsub>
 80018b0:	4603      	mov	r3, r0
 80018b2:	4619      	mov	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	1d22      	adds	r2, r4, #4
 80018b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < PID_BUFFERSIZE; i++){
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	e00d      	b.n	80018de <PID_control+0x4e>
		err_sum += PID->err_buffer[i];
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	3204      	adds	r2, #4
 80018c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018cc:	4619      	mov	r1, r3
 80018ce:	69b8      	ldr	r0, [r7, #24]
 80018d0:	f7ff f948 	bl	8000b64 <__addsf3>
 80018d4:	4603      	mov	r3, r0
 80018d6:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < PID_BUFFERSIZE; i++){
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	3301      	adds	r3, #1
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	2b09      	cmp	r3, #9
 80018e2:	ddee      	ble.n	80018c2 <PID_control+0x32>
	}
	if (PID->cir_queue_index == 0){
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10e      	bne.n	800190a <PID_control+0x7a>
		d_err = PID->err_buffer[PID->cir_queue_index] - PID->err_buffer[PID_BUFFERSIZE - 1];
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3204      	adds	r2, #4
 80018f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018fc:	4619      	mov	r1, r3
 80018fe:	4610      	mov	r0, r2
 8001900:	f7ff f92e 	bl	8000b60 <__aeabi_fsub>
 8001904:	4603      	mov	r3, r0
 8001906:	61fb      	str	r3, [r7, #28]
 8001908:	e011      	b.n	800192e <PID_control+0x9e>
	}
	else{
		d_err = PID->err_buffer[PID->cir_queue_index] - PID->err_buffer[PID->cir_queue_index - 1];
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3204      	adds	r2, #4
 8001912:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800191a:	1e5a      	subs	r2, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3204      	adds	r2, #4
 8001920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001924:	4619      	mov	r1, r3
 8001926:	f7ff f91b 	bl	8000b60 <__aeabi_fsub>
 800192a:	4603      	mov	r3, r0
 800192c:	61fb      	str	r3, [r7, #28]
	}
	P = PID->err_buffer[PID->cir_queue_index] * PID->Kp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3204      	adds	r2, #4
 8001936:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4619      	mov	r1, r3
 8001940:	4610      	mov	r0, r2
 8001942:	f7ff fa17 	bl	8000d74 <__aeabi_fmul>
 8001946:	4603      	mov	r3, r0
 8001948:	613b      	str	r3, [r7, #16]
	I = err_sum * PID->Ki;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4619      	mov	r1, r3
 8001950:	69b8      	ldr	r0, [r7, #24]
 8001952:	f7ff fa0f 	bl	8000d74 <__aeabi_fmul>
 8001956:	4603      	mov	r3, r0
 8001958:	60fb      	str	r3, [r7, #12]
	D = PID->Kd * d_err / PID->dt;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	69f9      	ldr	r1, [r7, #28]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fa07 	bl	8000d74 <__aeabi_fmul>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800196e:	4619      	mov	r1, r3
 8001970:	4610      	mov	r0, r2
 8001972:	f7ff fab3 	bl	8000edc <__aeabi_fdiv>
 8001976:	4603      	mov	r3, r0
 8001978:	60bb      	str	r3, [r7, #8]
	PID->ctrl_val = P + I + D;
 800197a:	68f9      	ldr	r1, [r7, #12]
 800197c:	6938      	ldr	r0, [r7, #16]
 800197e:	f7ff f8f1 	bl	8000b64 <__addsf3>
 8001982:	4603      	mov	r3, r0
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff f8ec 	bl	8000b64 <__addsf3>
 800198c:	4603      	mov	r3, r0
 800198e:	461a      	mov	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	649a      	str	r2, [r3, #72]	@ 0x48
	if (PID->ctrl_val > PID->max_ctrl_val){
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199c:	4619      	mov	r1, r3
 800199e:	4610      	mov	r0, r2
 80019a0:	f7ff fba4 	bl	80010ec <__aeabi_fcmpgt>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d004      	beq.n	80019b4 <PID_control+0x124>
		PID->ctrl_val = PID->max_ctrl_val;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	649a      	str	r2, [r3, #72]	@ 0x48
 80019b2:	e00e      	b.n	80019d2 <PID_control+0x142>
	}
	else if (PID->ctrl_val < PID->min_ctrl_val){
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019bc:	4619      	mov	r1, r3
 80019be:	4610      	mov	r0, r2
 80019c0:	f7ff fb76 	bl	80010b0 <__aeabi_fcmplt>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <PID_control+0x142>
		PID->ctrl_val = PID->min_ctrl_val;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	PID->cir_queue_index ++;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	639a      	str	r2, [r3, #56]	@ 0x38
	if (PID->cir_queue_index == PID_BUFFERSIZE){
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019e0:	2b0a      	cmp	r3, #10
 80019e2:	d102      	bne.n	80019ea <PID_control+0x15a>
		PID->cir_queue_index = 0;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	639a      	str	r2, [r3, #56]	@ 0x38
	}
}
 80019ea:	bf00      	nop
 80019ec:	3724      	adds	r7, #36	@ 0x24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd90      	pop	{r4, r7, pc}
	...

080019f4 <wheel_speed_control>:

void wheel_speed_control(map_t * map){
 80019f4:	b590      	push	{r4, r7, lr}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	PID_control(&front_wheel_PID_str, (float)front_wheel_interrupt_count);
 80019fc:	4b40      	ldr	r3, [pc, #256]	@ (8001b00 <wheel_speed_control+0x10c>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff f95f 	bl	8000cc4 <__aeabi_ui2f>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4619      	mov	r1, r3
 8001a0a:	483e      	ldr	r0, [pc, #248]	@ (8001b04 <wheel_speed_control+0x110>)
 8001a0c:	f7ff ff40 	bl	8001890 <PID_control>
	PID_control(&rear_wheel_PID_str, (float)rear_wheel_interrupt_count);
 8001a10:	4b3d      	ldr	r3, [pc, #244]	@ (8001b08 <wheel_speed_control+0x114>)
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff f955 	bl	8000cc4 <__aeabi_ui2f>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	483b      	ldr	r0, [pc, #236]	@ (8001b0c <wheel_speed_control+0x118>)
 8001a20:	f7ff ff36 	bl	8001890 <PID_control>
	if (is_go_backward){
 8001a24:	4b3a      	ldr	r3, [pc, #232]	@ (8001b10 <wheel_speed_control+0x11c>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d01a      	beq.n	8001a62 <wheel_speed_control+0x6e>
		map->motor_int_count -= (int)(0.5*(front_wheel_interrupt_count + rear_wheel_interrupt_count));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699c      	ldr	r4, [r3, #24]
 8001a30:	4b33      	ldr	r3, [pc, #204]	@ (8001b00 <wheel_speed_control+0x10c>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b34      	ldr	r3, [pc, #208]	@ (8001b08 <wheel_speed_control+0x114>)
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fcd9 	bl	80003f4 <__aeabi_i2d>
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	4b33      	ldr	r3, [pc, #204]	@ (8001b14 <wheel_speed_control+0x120>)
 8001a48:	f7fe fd3e 	bl	80004c8 <__aeabi_dmul>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	f7fe ffe8 	bl	8000a28 <__aeabi_d2iz>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	1ae2      	subs	r2, r4, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	619a      	str	r2, [r3, #24]
 8001a60:	e019      	b.n	8001a96 <wheel_speed_control+0xa2>
	}
	else {
		map->motor_int_count += (int)(0.5*(front_wheel_interrupt_count + rear_wheel_interrupt_count));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	699c      	ldr	r4, [r3, #24]
 8001a66:	4b26      	ldr	r3, [pc, #152]	@ (8001b00 <wheel_speed_control+0x10c>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4b26      	ldr	r3, [pc, #152]	@ (8001b08 <wheel_speed_control+0x114>)
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	4413      	add	r3, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fcbe 	bl	80003f4 <__aeabi_i2d>
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	4b25      	ldr	r3, [pc, #148]	@ (8001b14 <wheel_speed_control+0x120>)
 8001a7e:	f7fe fd23 	bl	80004c8 <__aeabi_dmul>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f7fe ffcd 	bl	8000a28 <__aeabi_d2iz>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	18e2      	adds	r2, r4, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	619a      	str	r2, [r3, #24]
	}
	front_wheel_interrupt_count = 0;
 8001a96:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <wheel_speed_control+0x10c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	801a      	strh	r2, [r3, #0]
	rear_wheel_interrupt_count = 0;
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b08 <wheel_speed_control+0x114>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	801a      	strh	r2, [r3, #0]

	front_wheel_pwmval += front_wheel_PID_str.ctrl_val;
 8001aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b18 <wheel_speed_control+0x124>)
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff f910 	bl	8000ccc <__aeabi_i2f>
 8001aac:	4602      	mov	r2, r0
 8001aae:	4b15      	ldr	r3, [pc, #84]	@ (8001b04 <wheel_speed_control+0x110>)
 8001ab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	f7ff f855 	bl	8000b64 <__addsf3>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fb1f 	bl	8001100 <__aeabi_f2uiz>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	4b14      	ldr	r3, [pc, #80]	@ (8001b18 <wheel_speed_control+0x124>)
 8001ac8:	801a      	strh	r2, [r3, #0]
	rear_wheel_pwmval += rear_wheel_PID_str.ctrl_val;
 8001aca:	4b14      	ldr	r3, [pc, #80]	@ (8001b1c <wheel_speed_control+0x128>)
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff f8fc 	bl	8000ccc <__aeabi_i2f>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b0c <wheel_speed_control+0x118>)
 8001ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ada:	4619      	mov	r1, r3
 8001adc:	4610      	mov	r0, r2
 8001ade:	f7ff f841 	bl	8000b64 <__addsf3>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fb0b 	bl	8001100 <__aeabi_f2uiz>
 8001aea:	4603      	mov	r3, r0
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <wheel_speed_control+0x128>)
 8001af0:	801a      	strh	r2, [r3, #0]

	check_and_set_DCmotor_pwm();
 8001af2:	f7ff fe4b 	bl	800178c <check_and_set_DCmotor_pwm>
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd90      	pop	{r4, r7, pc}
 8001afe:	bf00      	nop
 8001b00:	200001b4 	.word	0x200001b4
 8001b04:	20000228 	.word	0x20000228
 8001b08:	200001b6 	.word	0x200001b6
 8001b0c:	20000274 	.word	0x20000274
 8001b10:	200001bc 	.word	0x200001bc
 8001b14:	3fe00000 	.word	0x3fe00000
 8001b18:	200001b8 	.word	0x200001b8
 8001b1c:	200001ba 	.word	0x200001ba

08001b20 <steer_by_percentage>:
}

//input: percentage > 0:
// 100 -> 12.5
// 0 -> 2.5
void steer_by_percentage(float percentage){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	uint16_t pwmval = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	81fb      	strh	r3, [r7, #14]
	pwmval = (uint16_t)(TIM3_PWMVal_MIN + TIM3_PWMVal_RANGE*(0.5 + percentage/200.0));
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7fe fc73 	bl	8000418 <__aeabi_f2d>
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	4b18      	ldr	r3, [pc, #96]	@ (8001b98 <steer_by_percentage+0x78>)
 8001b38:	f7fe fdf0 	bl	800071c <__aeabi_ddiv>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	4b14      	ldr	r3, [pc, #80]	@ (8001b9c <steer_by_percentage+0x7c>)
 8001b4a:	f7fe fb07 	bl	800015c <__adddf3>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4610      	mov	r0, r2
 8001b54:	4619      	mov	r1, r3
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ba0 <steer_by_percentage+0x80>)
 8001b5c:	f7fe fcb4 	bl	80004c8 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba4 <steer_by_percentage+0x84>)
 8001b6e:	f7fe faf5 	bl	800015c <__adddf3>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f7fe ff7d 	bl	8000a78 <__aeabi_d2uiz>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	81fb      	strh	r3, [r7, #14]
	check_and_set_servo_pwmval(&pwmval);
 8001b84:	f107 030e 	add.w	r3, r7, #14
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fddd 	bl	8001748 <check_and_set_servo_pwmval>
}
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40690000 	.word	0x40690000
 8001b9c:	3fe00000 	.word	0x3fe00000
 8001ba0:	40af4000 	.word	0x40af4000
 8001ba4:	40990000 	.word	0x40990000

08001ba8 <update_camera>:

void update_camera(camera_t *camera, uint8_t rx_data[23]){
 8001ba8:	b5b0      	push	{r4, r5, r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
	camera->updated = 1;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]

	camera->low_left[coord_x] = 0;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
	camera->low_left[coord_y] = 0;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
	camera->up_right[coord_x] = 0;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	615a      	str	r2, [r3, #20]
	camera->up_right[coord_y] = 0;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
	camera->confidence = 0;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	61da      	str	r2, [r3, #28]

	camera->low_left[coord_x] += (rx_data[x_min_byte	] - 48) * 1000;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	3b30      	subs	r3, #48	@ 0x30
 8001be0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001be4:	fb01 f303 	mul.w	r3, r1, r3
 8001be8:	441a      	add	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	60da      	str	r2, [r3, #12]
	camera->low_left[coord_x] += (rx_data[x_min_byte + 1] - 48) * 100;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	3b30      	subs	r3, #48	@ 0x30
 8001bfa:	2164      	movs	r1, #100	@ 0x64
 8001bfc:	fb01 f303 	mul.w	r3, r1, r3
 8001c00:	441a      	add	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	60da      	str	r2, [r3, #12]
	camera->low_left[coord_x] += (rx_data[x_min_byte + 2] - 48) * 10;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68d9      	ldr	r1, [r3, #12]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	18ca      	adds	r2, r1, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	60da      	str	r2, [r3, #12]
	camera->low_left[coord_x] += (rx_data[x_min_byte + 3] - 48);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	3303      	adds	r3, #3
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	3b30      	subs	r3, #48	@ 0x30
 8001c2e:	441a      	add	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	60da      	str	r2, [r3, #12]

	camera->low_left[coord_y] += (rx_data[y_min_byte	] - 48) * 1000;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691a      	ldr	r2, [r3, #16]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	3305      	adds	r3, #5
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	3b30      	subs	r3, #48	@ 0x30
 8001c40:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c44:	fb01 f303 	mul.w	r3, r1, r3
 8001c48:	441a      	add	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	611a      	str	r2, [r3, #16]
	camera->low_left[coord_y] += (rx_data[y_min_byte + 1] - 48) * 100;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691a      	ldr	r2, [r3, #16]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	3306      	adds	r3, #6
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	3b30      	subs	r3, #48	@ 0x30
 8001c5a:	2164      	movs	r1, #100	@ 0x64
 8001c5c:	fb01 f303 	mul.w	r3, r1, r3
 8001c60:	441a      	add	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	611a      	str	r2, [r3, #16]
	camera->low_left[coord_y] += (rx_data[y_min_byte + 2] - 48) * 10;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6919      	ldr	r1, [r3, #16]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	3307      	adds	r3, #7
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	18ca      	adds	r2, r1, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	611a      	str	r2, [r3, #16]
	camera->low_left[coord_y] += (rx_data[y_min_byte + 3] - 48);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691a      	ldr	r2, [r3, #16]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	3308      	adds	r3, #8
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	3b30      	subs	r3, #48	@ 0x30
 8001c8e:	441a      	add	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	611a      	str	r2, [r3, #16]

	camera->up_right[coord_x] += (rx_data[x_max_byte	] - 48) * 1000;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	695a      	ldr	r2, [r3, #20]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	330a      	adds	r3, #10
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	3b30      	subs	r3, #48	@ 0x30
 8001ca0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ca4:	fb01 f303 	mul.w	r3, r1, r3
 8001ca8:	441a      	add	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	615a      	str	r2, [r3, #20]
	camera->up_right[coord_x] += (rx_data[x_max_byte + 1] - 48) * 100;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695a      	ldr	r2, [r3, #20]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	330b      	adds	r3, #11
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	3b30      	subs	r3, #48	@ 0x30
 8001cba:	2164      	movs	r1, #100	@ 0x64
 8001cbc:	fb01 f303 	mul.w	r3, r1, r3
 8001cc0:	441a      	add	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	615a      	str	r2, [r3, #20]
	camera->up_right[coord_x] += (rx_data[x_max_byte + 2] - 48) * 10;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6959      	ldr	r1, [r3, #20]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	330c      	adds	r3, #12
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	18ca      	adds	r2, r1, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	615a      	str	r2, [r3, #20]
	camera->up_right[coord_x] += (rx_data[x_max_byte + 3] - 48);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695a      	ldr	r2, [r3, #20]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	330d      	adds	r3, #13
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	3b30      	subs	r3, #48	@ 0x30
 8001cee:	441a      	add	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	615a      	str	r2, [r3, #20]

	camera->up_right[coord_y] += (rx_data[y_max_byte	] - 48) * 1000;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	699a      	ldr	r2, [r3, #24]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	330f      	adds	r3, #15
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	3b30      	subs	r3, #48	@ 0x30
 8001d00:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d04:	fb01 f303 	mul.w	r3, r1, r3
 8001d08:	441a      	add	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	619a      	str	r2, [r3, #24]
	camera->up_right[coord_y] += (rx_data[y_max_byte + 1] - 48) * 100;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699a      	ldr	r2, [r3, #24]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	3310      	adds	r3, #16
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	3b30      	subs	r3, #48	@ 0x30
 8001d1a:	2164      	movs	r1, #100	@ 0x64
 8001d1c:	fb01 f303 	mul.w	r3, r1, r3
 8001d20:	441a      	add	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	619a      	str	r2, [r3, #24]
	camera->up_right[coord_y] += (rx_data[y_max_byte + 2] - 48) * 10;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6999      	ldr	r1, [r3, #24]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	3311      	adds	r3, #17
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	18ca      	adds	r2, r1, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	619a      	str	r2, [r3, #24]
	camera->up_right[coord_y] += (rx_data[y_max_byte + 3] - 48);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699a      	ldr	r2, [r3, #24]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	3312      	adds	r3, #18
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	3b30      	subs	r3, #48	@ 0x30
 8001d4e:	441a      	add	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	619a      	str	r2, [r3, #24]

	camera->center[coord_x] = (camera->low_left[coord_x] + camera->up_right[coord_x]) / 2;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	0fda      	lsrs	r2, r3, #31
 8001d60:	4413      	add	r3, r2
 8001d62:	105b      	asrs	r3, r3, #1
 8001d64:	461a      	mov	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	605a      	str	r2, [r3, #4]
	camera->center[coord_y] = (camera->low_left[coord_y] + camera->up_right[coord_y]) / 2;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691a      	ldr	r2, [r3, #16]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	4413      	add	r3, r2
 8001d74:	0fda      	lsrs	r2, r3, #31
 8001d76:	4413      	add	r3, r2
 8001d78:	105b      	asrs	r3, r3, #1
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	609a      	str	r2, [r3, #8]

	camera->confidence += (rx_data[confidence_byte] - 48) * 10;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69d9      	ldr	r1, [r3, #28]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	3314      	adds	r3, #20
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	18ca      	adds	r2, r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	61da      	str	r2, [r3, #28]
	camera->confidence += (rx_data[confidence_byte + 1] - 48);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69da      	ldr	r2, [r3, #28]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	3315      	adds	r3, #21
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	3b30      	subs	r3, #48	@ 0x30
 8001da8:	441a      	add	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	61da      	str	r2, [r3, #28]


	camera->diag_length = pow(camera->low_left[coord_x] - camera->up_right[coord_x], 2) + \
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fb1b 	bl	80003f4 <__aeabi_i2d>
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dc6:	f003 fa11 	bl	80051ec <pow>
 8001dca:	4604      	mov	r4, r0
 8001dcc:	460d      	mov	r5, r1
						  pow(camera->low_left[coord_y] - camera->up_right[coord_y], 2);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691a      	ldr	r2, [r3, #16]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fb0b 	bl	80003f4 <__aeabi_i2d>
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001de6:	f003 fa01 	bl	80051ec <pow>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
	camera->diag_length = pow(camera->low_left[coord_x] - camera->up_right[coord_x], 2) + \
 8001dee:	4620      	mov	r0, r4
 8001df0:	4629      	mov	r1, r5
 8001df2:	f7fe f9b3 	bl	800015c <__adddf3>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f7fe fe13 	bl	8000a28 <__aeabi_d2iz>
 8001e02:	4602      	mov	r2, r0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	621a      	str	r2, [r3, #32]

}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bdb0      	pop	{r4, r5, r7, pc}

08001e10 <AMB82_CalcObjPos>:

void AMB82_CalcObjPos(camera_t *camera, map_t *map) {
 8001e10:	b5b0      	push	{r4, r5, r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
	// +x: forward
//	float angle = (camera->center[0] - 960) / AMB82_FOV;
	float angle = 0;
 8001e1a:	f04f 0300 	mov.w	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
	float distance = 23367.28/(camera->up_right[1]-camera->low_left[1]);//未修正
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	699a      	ldr	r2, [r3, #24]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe fae2 	bl	80003f4 <__aeabi_i2d>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	a14e      	add	r1, pc, #312	@ (adr r1, 8001f70 <AMB82_CalcObjPos+0x160>)
 8001e36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e3a:	f7fe fc6f 	bl	800071c <__aeabi_ddiv>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	f7fe fe37 	bl	8000ab8 <__aeabi_d2f>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	60bb      	str	r3, [r7, #8]
// distance = -14.04+1.18*distance;//�???�修�?
	distance = 0.1054+0.9397579*distance+8.86754e-4*pow(distance, 2);//二�?�修�?
 8001e4e:	68b8      	ldr	r0, [r7, #8]
 8001e50:	f7fe fae2 	bl	8000418 <__aeabi_f2d>
 8001e54:	a348      	add	r3, pc, #288	@ (adr r3, 8001f78 <AMB82_CalcObjPos+0x168>)
 8001e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5a:	f7fe fb35 	bl	80004c8 <__aeabi_dmul>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
 8001e66:	a346      	add	r3, pc, #280	@ (adr r3, 8001f80 <AMB82_CalcObjPos+0x170>)
 8001e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6c:	f7fe f976 	bl	800015c <__adddf3>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4614      	mov	r4, r2
 8001e76:	461d      	mov	r5, r3
 8001e78:	68b8      	ldr	r0, [r7, #8]
 8001e7a:	f7fe facd 	bl	8000418 <__aeabi_f2d>
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e86:	f003 f9b1 	bl	80051ec <pow>
 8001e8a:	a33f      	add	r3, pc, #252	@ (adr r3, 8001f88 <AMB82_CalcObjPos+0x178>)
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e90:	f7fe fb1a 	bl	80004c8 <__aeabi_dmul>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4620      	mov	r0, r4
 8001e9a:	4629      	mov	r1, r5
 8001e9c:	f7fe f95e 	bl	800015c <__adddf3>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f7fe fe06 	bl	8000ab8 <__aeabi_d2f>
 8001eac:	4603      	mov	r3, r0
 8001eae:	60bb      	str	r3, [r7, #8]
// distance = -15.5162+1.367*distance-2.5996e-3*pow(distance, 2)+8.6963e-6*pow(distance, 3);//三�?�修�?
// distance = 3.89298+0.64038*distance+6.6809e-3*pow(distance, 2)-3.994e-5*pow(distance, 3)+8.97e-8*pow(distance, 4);//??��?�修�?
// distance = 467.69487-21.4*distance+0.39583*pow(distance, 2)-3.25866e-3*pow(distance, 3)+1.26646e-5*pow(distance, 4)-1.871e-8*pow(distance, 5);//五�?�修�?
	// save point
	map->queue_index++;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	701a      	strb	r2, [r3, #0]
	if (map->queue_index == MAP_POINT_NUM) {
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d102      	bne.n	8001eca <AMB82_CalcObjPos+0xba>
		map->queue_index = 0;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
	}
	map->points[map->queue_index][0] = distance * cos(RAD2DEG * angle);
 8001eca:	68b8      	ldr	r0, [r7, #8]
 8001ecc:	f7fe faa4 	bl	8000418 <__aeabi_f2d>
 8001ed0:	4604      	mov	r4, r0
 8001ed2:	460d      	mov	r5, r1
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f7fe fa9f 	bl	8000418 <__aeabi_f2d>
 8001eda:	a32d      	add	r3, pc, #180	@ (adr r3, 8001f90 <AMB82_CalcObjPos+0x180>)
 8001edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee0:	f7fe faf2 	bl	80004c8 <__aeabi_dmul>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	f003 fb78 	bl	80055e0 <cos>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	f7fe fae6 	bl	80004c8 <__aeabi_dmul>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	461c      	mov	r4, r3
 8001f0a:	f7fe fdd5 	bl	8000ab8 <__aeabi_d2f>
 8001f0e:	4601      	mov	r1, r0
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	00e3      	lsls	r3, r4, #3
 8001f14:	4413      	add	r3, r2
 8001f16:	6059      	str	r1, [r3, #4]
	map->points[map->queue_index][1] = distance * sin(RAD2DEG * angle);
 8001f18:	68b8      	ldr	r0, [r7, #8]
 8001f1a:	f7fe fa7d 	bl	8000418 <__aeabi_f2d>
 8001f1e:	4604      	mov	r4, r0
 8001f20:	460d      	mov	r5, r1
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f7fe fa78 	bl	8000418 <__aeabi_f2d>
 8001f28:	a319      	add	r3, pc, #100	@ (adr r3, 8001f90 <AMB82_CalcObjPos+0x180>)
 8001f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2e:	f7fe facb 	bl	80004c8 <__aeabi_dmul>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f003 fb9b 	bl	8005674 <sin>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4620      	mov	r0, r4
 8001f44:	4629      	mov	r1, r5
 8001f46:	f7fe fabf 	bl	80004c8 <__aeabi_dmul>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	461c      	mov	r4, r3
 8001f58:	f7fe fdae 	bl	8000ab8 <__aeabi_d2f>
 8001f5c:	4601      	mov	r1, r0
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	00e3      	lsls	r3, r4, #3
 8001f62:	4413      	add	r3, r2
 8001f64:	6099      	str	r1, [r3, #8]
//	camera->dist_cir_que_index++;
//	if(camera->dist_cir_que_index == CAM_DIST_CIR_QUE_LENGTH) {
//		camera->dist_cir_que_index = 0;
//	}
//	Map_SavePosition(map, x, y, (uint8_t)camera->confidence);
}
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	eb851eb8 	.word	0xeb851eb8
 8001f74:	40d6d1d1 	.word	0x40d6d1d1
 8001f78:	28d50b60 	.word	0x28d50b60
 8001f7c:	3fee127f 	.word	0x3fee127f
 8001f80:	90ff9724 	.word	0x90ff9724
 8001f84:	3fbafb7e 	.word	0x3fbafb7e
 8001f88:	b6fd0a60 	.word	0xb6fd0a60
 8001f8c:	3f4d0ea1 	.word	0x3f4d0ea1
 8001f90:	1615ebfb 	.word	0x1615ebfb
 8001f94:	404ca5dc 	.word	0x404ca5dc

08001f98 <map_linear_predeict>:

void map_linear_predeict(float *predicted_angle, float *predicted_distance, map_t *map, float moved_angle_rad, float moved_dis_cm) {
 8001f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f9c:	b08a      	sub	sp, #40	@ 0x28
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	603b      	str	r3, [r7, #0]
	float x_predict, y_predict;
	float q[2];
	if (moved_angle_rad >= 0.035 || moved_angle_rad <= -0.035) {
 8001fa8:	6838      	ldr	r0, [r7, #0]
 8001faa:	f7fe fa35 	bl	8000418 <__aeabi_f2d>
 8001fae:	a3c0      	add	r3, pc, #768	@ (adr r3, 80022b0 <map_linear_predeict+0x318>)
 8001fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb4:	f7fe fd0e 	bl	80009d4 <__aeabi_dcmpge>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10b      	bne.n	8001fd6 <map_linear_predeict+0x3e>
 8001fbe:	6838      	ldr	r0, [r7, #0]
 8001fc0:	f7fe fa2a 	bl	8000418 <__aeabi_f2d>
 8001fc4:	a3bc      	add	r3, pc, #752	@ (adr r3, 80022b8 <map_linear_predeict+0x320>)
 8001fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fca:	f7fe fcf9 	bl	80009c0 <__aeabi_dcmple>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 80d3 	beq.w	800217c <map_linear_predeict+0x1e4>
		q[0] = (moved_dis_cm/moved_angle_rad)*(sin(moved_angle_rad)*cos(moved_angle_rad) + (sin(moved_angle_rad)*cos(moved_angle_rad) - sin(moved_angle_rad)));
 8001fd6:	6839      	ldr	r1, [r7, #0]
 8001fd8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001fda:	f7fe ff7f 	bl	8000edc <__aeabi_fdiv>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fa19 	bl	8000418 <__aeabi_f2d>
 8001fe6:	4604      	mov	r4, r0
 8001fe8:	460d      	mov	r5, r1
 8001fea:	6838      	ldr	r0, [r7, #0]
 8001fec:	f7fe fa14 	bl	8000418 <__aeabi_f2d>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f003 fb3c 	bl	8005674 <sin>
 8001ffc:	4680      	mov	r8, r0
 8001ffe:	4689      	mov	r9, r1
 8002000:	6838      	ldr	r0, [r7, #0]
 8002002:	f7fe fa09 	bl	8000418 <__aeabi_f2d>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4610      	mov	r0, r2
 800200c:	4619      	mov	r1, r3
 800200e:	f003 fae7 	bl	80055e0 <cos>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4640      	mov	r0, r8
 8002018:	4649      	mov	r1, r9
 800201a:	f7fe fa55 	bl	80004c8 <__aeabi_dmul>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4692      	mov	sl, r2
 8002024:	469b      	mov	fp, r3
 8002026:	6838      	ldr	r0, [r7, #0]
 8002028:	f7fe f9f6 	bl	8000418 <__aeabi_f2d>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	f003 fb1e 	bl	8005674 <sin>
 8002038:	4680      	mov	r8, r0
 800203a:	4689      	mov	r9, r1
 800203c:	6838      	ldr	r0, [r7, #0]
 800203e:	f7fe f9eb 	bl	8000418 <__aeabi_f2d>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	f003 fac9 	bl	80055e0 <cos>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4640      	mov	r0, r8
 8002054:	4649      	mov	r1, r9
 8002056:	f7fe fa37 	bl	80004c8 <__aeabi_dmul>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	4690      	mov	r8, r2
 8002060:	4699      	mov	r9, r3
 8002062:	6838      	ldr	r0, [r7, #0]
 8002064:	f7fe f9d8 	bl	8000418 <__aeabi_f2d>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4610      	mov	r0, r2
 800206e:	4619      	mov	r1, r3
 8002070:	f003 fb00 	bl	8005674 <sin>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4640      	mov	r0, r8
 800207a:	4649      	mov	r1, r9
 800207c:	f7fe f86c 	bl	8000158 <__aeabi_dsub>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4650      	mov	r0, sl
 8002086:	4659      	mov	r1, fp
 8002088:	f7fe f868 	bl	800015c <__adddf3>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4620      	mov	r0, r4
 8002092:	4629      	mov	r1, r5
 8002094:	f7fe fa18 	bl	80004c8 <__aeabi_dmul>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	f7fe fd0a 	bl	8000ab8 <__aeabi_d2f>
 80020a4:	4603      	mov	r3, r0
 80020a6:	617b      	str	r3, [r7, #20]
		q[1] = (moved_dis_cm/moved_angle_rad)*(sin(moved_angle_rad)*sin(moved_angle_rad) + (cos(moved_angle_rad)*cos(moved_angle_rad) - cos(moved_angle_rad)));
 80020a8:	6839      	ldr	r1, [r7, #0]
 80020aa:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80020ac:	f7fe ff16 	bl	8000edc <__aeabi_fdiv>
 80020b0:	4603      	mov	r3, r0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe f9b0 	bl	8000418 <__aeabi_f2d>
 80020b8:	4604      	mov	r4, r0
 80020ba:	460d      	mov	r5, r1
 80020bc:	6838      	ldr	r0, [r7, #0]
 80020be:	f7fe f9ab 	bl	8000418 <__aeabi_f2d>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4610      	mov	r0, r2
 80020c8:	4619      	mov	r1, r3
 80020ca:	f003 fad3 	bl	8005674 <sin>
 80020ce:	4680      	mov	r8, r0
 80020d0:	4689      	mov	r9, r1
 80020d2:	6838      	ldr	r0, [r7, #0]
 80020d4:	f7fe f9a0 	bl	8000418 <__aeabi_f2d>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	f003 fac8 	bl	8005674 <sin>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4640      	mov	r0, r8
 80020ea:	4649      	mov	r1, r9
 80020ec:	f7fe f9ec 	bl	80004c8 <__aeabi_dmul>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4692      	mov	sl, r2
 80020f6:	469b      	mov	fp, r3
 80020f8:	6838      	ldr	r0, [r7, #0]
 80020fa:	f7fe f98d 	bl	8000418 <__aeabi_f2d>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	f003 fa6b 	bl	80055e0 <cos>
 800210a:	4680      	mov	r8, r0
 800210c:	4689      	mov	r9, r1
 800210e:	6838      	ldr	r0, [r7, #0]
 8002110:	f7fe f982 	bl	8000418 <__aeabi_f2d>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4610      	mov	r0, r2
 800211a:	4619      	mov	r1, r3
 800211c:	f003 fa60 	bl	80055e0 <cos>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4640      	mov	r0, r8
 8002126:	4649      	mov	r1, r9
 8002128:	f7fe f9ce 	bl	80004c8 <__aeabi_dmul>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4690      	mov	r8, r2
 8002132:	4699      	mov	r9, r3
 8002134:	6838      	ldr	r0, [r7, #0]
 8002136:	f7fe f96f 	bl	8000418 <__aeabi_f2d>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f003 fa4d 	bl	80055e0 <cos>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4640      	mov	r0, r8
 800214c:	4649      	mov	r1, r9
 800214e:	f7fe f803 	bl	8000158 <__aeabi_dsub>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4650      	mov	r0, sl
 8002158:	4659      	mov	r1, fp
 800215a:	f7fd ffff 	bl	800015c <__adddf3>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4620      	mov	r0, r4
 8002164:	4629      	mov	r1, r5
 8002166:	f7fe f9af 	bl	80004c8 <__aeabi_dmul>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4610      	mov	r0, r2
 8002170:	4619      	mov	r1, r3
 8002172:	f7fe fca1 	bl	8000ab8 <__aeabi_d2f>
 8002176:	4603      	mov	r3, r0
 8002178:	61bb      	str	r3, [r7, #24]
 800217a:	e004      	b.n	8002186 <map_linear_predeict+0x1ee>
	}
	else {
		q[0] = moved_dis_cm;
 800217c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800217e:	617b      	str	r3, [r7, #20]
		q[1] = 0;
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	61bb      	str	r3, [r7, #24]
	}
	for (int i = 0; i < MAP_POINT_NUM; i++){
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
 800218a:	e02a      	b.n	80021e2 <map_linear_predeict+0x24a>
		if (i != map->queue_index){
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	4293      	cmp	r3, r2
 8002196:	d021      	beq.n	80021dc <map_linear_predeict+0x244>
			map->points[i][0] -= q[0];
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4413      	add	r3, r2
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4611      	mov	r1, r2
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe fcda 	bl	8000b60 <__aeabi_fsub>
 80021ac:	4603      	mov	r3, r0
 80021ae:	4619      	mov	r1, r3
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4413      	add	r3, r2
 80021b8:	6059      	str	r1, [r3, #4]
			map->points[i][1] -= q[1];
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4413      	add	r3, r2
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fe fcc9 	bl	8000b60 <__aeabi_fsub>
 80021ce:	4603      	mov	r3, r0
 80021d0:	4619      	mov	r1, r3
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4413      	add	r3, r2
 80021da:	6099      	str	r1, [r3, #8]
	for (int i = 0; i < MAP_POINT_NUM; i++){
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	3301      	adds	r3, #1
 80021e0:	61fb      	str	r3, [r7, #28]
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	ddd1      	ble.n	800218c <map_linear_predeict+0x1f4>
		}
	}

	if (map->queue_index == 0){
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d16b      	bne.n	80022c8 <map_linear_predeict+0x330>
//		x_predict = 2 * map->points[map->queue_index][0] - map->points[MAP_POINT_NUM - 1][0];
//		y_predict = 2 * map->points[map->queue_index][1] - map->points[MAP_POINT_NUM - 1][1];
		x_predict = map->points[map->queue_index][0] + 0.8*(map->points[map->queue_index][0] - map->points[MAP_POINT_NUM - 1][0]);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4413      	add	r3, r2
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe f90b 	bl	8000418 <__aeabi_f2d>
 8002202:	4604      	mov	r4, r0
 8002204:	460d      	mov	r5, r1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4413      	add	r3, r2
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	4619      	mov	r1, r3
 8002218:	4610      	mov	r0, r2
 800221a:	f7fe fca1 	bl	8000b60 <__aeabi_fsub>
 800221e:	4603      	mov	r3, r0
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe f8f9 	bl	8000418 <__aeabi_f2d>
 8002226:	a326      	add	r3, pc, #152	@ (adr r3, 80022c0 <map_linear_predeict+0x328>)
 8002228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222c:	f7fe f94c 	bl	80004c8 <__aeabi_dmul>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4620      	mov	r0, r4
 8002236:	4629      	mov	r1, r5
 8002238:	f7fd ff90 	bl	800015c <__adddf3>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4610      	mov	r0, r2
 8002242:	4619      	mov	r1, r3
 8002244:	f7fe fc38 	bl	8000ab8 <__aeabi_d2f>
 8002248:	4603      	mov	r3, r0
 800224a:	627b      	str	r3, [r7, #36]	@ 0x24
		y_predict = map->points[map->queue_index][1] + 0.8*(map->points[map->queue_index][1] - map->points[MAP_POINT_NUM - 1][1]);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4413      	add	r3, r2
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe f8dd 	bl	8000418 <__aeabi_f2d>
 800225e:	4604      	mov	r4, r0
 8002260:	460d      	mov	r5, r1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4413      	add	r3, r2
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	4619      	mov	r1, r3
 8002274:	4610      	mov	r0, r2
 8002276:	f7fe fc73 	bl	8000b60 <__aeabi_fsub>
 800227a:	4603      	mov	r3, r0
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe f8cb 	bl	8000418 <__aeabi_f2d>
 8002282:	a30f      	add	r3, pc, #60	@ (adr r3, 80022c0 <map_linear_predeict+0x328>)
 8002284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002288:	f7fe f91e 	bl	80004c8 <__aeabi_dmul>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4620      	mov	r0, r4
 8002292:	4629      	mov	r1, r5
 8002294:	f7fd ff62 	bl	800015c <__adddf3>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4610      	mov	r0, r2
 800229e:	4619      	mov	r1, r3
 80022a0:	f7fe fc0a 	bl	8000ab8 <__aeabi_d2f>
 80022a4:	4603      	mov	r3, r0
 80022a6:	623b      	str	r3, [r7, #32]
 80022a8:	e072      	b.n	8002390 <map_linear_predeict+0x3f8>
 80022aa:	bf00      	nop
 80022ac:	f3af 8000 	nop.w
 80022b0:	1eb851ec 	.word	0x1eb851ec
 80022b4:	3fa1eb85 	.word	0x3fa1eb85
 80022b8:	1eb851ec 	.word	0x1eb851ec
 80022bc:	bfa1eb85 	.word	0xbfa1eb85
 80022c0:	9999999a 	.word	0x9999999a
 80022c4:	3fe99999 	.word	0x3fe99999

	}
	else {
//		x_predict = 2 * map->points[map->queue_index][0] - map->points[map->queue_index - 1][0];
//		y_predict = 2 * map->points[map->queue_index][1] - map->points[map->queue_index - 1][1];
		x_predict = map->points[map->queue_index][0] + 0.8*(map->points[map->queue_index][0] - map->points[map->queue_index - 1][0]);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4413      	add	r3, r2
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe f89f 	bl	8000418 <__aeabi_f2d>
 80022da:	4604      	mov	r4, r0
 80022dc:	460d      	mov	r5, r1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4413      	add	r3, r2
 80022e8:	6858      	ldr	r0, [r3, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4413      	add	r3, r2
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	4619      	mov	r1, r3
 80022fa:	f7fe fc31 	bl	8000b60 <__aeabi_fsub>
 80022fe:	4603      	mov	r3, r0
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe f889 	bl	8000418 <__aeabi_f2d>
 8002306:	a334      	add	r3, pc, #208	@ (adr r3, 80023d8 <map_linear_predeict+0x440>)
 8002308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230c:	f7fe f8dc 	bl	80004c8 <__aeabi_dmul>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4620      	mov	r0, r4
 8002316:	4629      	mov	r1, r5
 8002318:	f7fd ff20 	bl	800015c <__adddf3>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4610      	mov	r0, r2
 8002322:	4619      	mov	r1, r3
 8002324:	f7fe fbc8 	bl	8000ab8 <__aeabi_d2f>
 8002328:	4603      	mov	r3, r0
 800232a:	627b      	str	r3, [r7, #36]	@ 0x24
		y_predict = map->points[map->queue_index][1] + 0.8*(map->points[map->queue_index][1] - map->points[map->queue_index - 1][1]);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4413      	add	r3, r2
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe f86d 	bl	8000418 <__aeabi_f2d>
 800233e:	4604      	mov	r4, r0
 8002340:	460d      	mov	r5, r1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	6898      	ldr	r0, [r3, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	3b01      	subs	r3, #1
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4619      	mov	r1, r3
 800235e:	f7fe fbff 	bl	8000b60 <__aeabi_fsub>
 8002362:	4603      	mov	r3, r0
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe f857 	bl	8000418 <__aeabi_f2d>
 800236a:	a31b      	add	r3, pc, #108	@ (adr r3, 80023d8 <map_linear_predeict+0x440>)
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	f7fe f8aa 	bl	80004c8 <__aeabi_dmul>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4620      	mov	r0, r4
 800237a:	4629      	mov	r1, r5
 800237c:	f7fd feee 	bl	800015c <__adddf3>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4610      	mov	r0, r2
 8002386:	4619      	mov	r1, r3
 8002388:	f7fe fb96 	bl	8000ab8 <__aeabi_d2f>
 800238c:	4603      	mov	r3, r0
 800238e:	623b      	str	r3, [r7, #32]
	}

	*predicted_angle = RAD2DEG * atan(y_predict/x_predict);
 8002390:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002392:	6a38      	ldr	r0, [r7, #32]
 8002394:	f7fe fda2 	bl	8000edc <__aeabi_fdiv>
 8002398:	4603      	mov	r3, r0
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe f83c 	bl	8000418 <__aeabi_f2d>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4610      	mov	r0, r2
 80023a6:	4619      	mov	r1, r3
 80023a8:	f002 ff8a 	bl	80052c0 <atan>
 80023ac:	a30c      	add	r3, pc, #48	@ (adr r3, 80023e0 <map_linear_predeict+0x448>)
 80023ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b2:	f7fe f889 	bl	80004c8 <__aeabi_dmul>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4610      	mov	r0, r2
 80023bc:	4619      	mov	r1, r3
 80023be:	f7fe fb7b 	bl	8000ab8 <__aeabi_d2f>
 80023c2:	4602      	mov	r2, r0
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	601a      	str	r2, [r3, #0]
	//*predicted_distance = sqrt(x_predict*x_predict + y_predict*y_predict);
	*predicted_distance = x_predict;
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023cc:	601a      	str	r2, [r3, #0]
}
 80023ce:	bf00      	nop
 80023d0:	3728      	adds	r7, #40	@ 0x28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023d8:	9999999a 	.word	0x9999999a
 80023dc:	3fe99999 	.word	0x3fe99999
 80023e0:	1615ebfb 	.word	0x1615ebfb
 80023e4:	404ca5dc 	.word	0x404ca5dc

080023e8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80023e8:	b5b0      	push	{r4, r5, r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2){
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a16      	ldr	r2, [pc, #88]	@ (8002454 <HAL_UARTEx_RxEventCallback+0x6c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d126      	bne.n	800244c <HAL_UARTEx_RxEventCallback+0x64>
		memcpy(rx_main_buffer, rx_buffer, RX_BUFFER_SIZE);
 80023fe:	4a16      	ldr	r2, [pc, #88]	@ (8002458 <HAL_UARTEx_RxEventCallback+0x70>)
 8002400:	4b16      	ldr	r3, [pc, #88]	@ (800245c <HAL_UARTEx_RxEventCallback+0x74>)
 8002402:	4614      	mov	r4, r2
 8002404:	461d      	mov	r5, r3
 8002406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800240a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800240e:	6020      	str	r0, [r4, #0]
 8002410:	3404      	adds	r4, #4
 8002412:	8021      	strh	r1, [r4, #0]
 8002414:	3402      	adds	r4, #2
 8002416:	0c0b      	lsrs	r3, r1, #16
 8002418:	7023      	strb	r3, [r4, #0]
		update_camera(&AMB82, rx_main_buffer);
 800241a:	490f      	ldr	r1, [pc, #60]	@ (8002458 <HAL_UARTEx_RxEventCallback+0x70>)
 800241c:	4810      	ldr	r0, [pc, #64]	@ (8002460 <HAL_UARTEx_RxEventCallback+0x78>)
 800241e:	f7ff fbc3 	bl	8001ba8 <update_camera>
		if(AMB82.confidence > 70) {
 8002422:	4b0f      	ldr	r3, [pc, #60]	@ (8002460 <HAL_UARTEx_RxEventCallback+0x78>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	2b46      	cmp	r3, #70	@ 0x46
 8002428:	dd03      	ble.n	8002432 <HAL_UARTEx_RxEventCallback+0x4a>
			AMB82_CalcObjPos(&AMB82, &map);
 800242a:	490e      	ldr	r1, [pc, #56]	@ (8002464 <HAL_UARTEx_RxEventCallback+0x7c>)
 800242c:	480c      	ldr	r0, [pc, #48]	@ (8002460 <HAL_UARTEx_RxEventCallback+0x78>)
 800242e:	f7ff fcef 	bl	8001e10 <AMB82_CalcObjPos>
		}
//		imageDiag2speedTarget(AMB82.diag_length);
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx_buffer, RX_BUFFER_SIZE);
 8002432:	2217      	movs	r2, #23
 8002434:	4909      	ldr	r1, [pc, #36]	@ (800245c <HAL_UARTEx_RxEventCallback+0x74>)
 8002436:	480c      	ldr	r0, [pc, #48]	@ (8002468 <HAL_UARTEx_RxEventCallback+0x80>)
 8002438:	f002 fb81 	bl	8004b3e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800243c:	4b0b      	ldr	r3, [pc, #44]	@ (800246c <HAL_UARTEx_RxEventCallback+0x84>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	4b0a      	ldr	r3, [pc, #40]	@ (800246c <HAL_UARTEx_RxEventCallback+0x84>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0204 	bic.w	r2, r2, #4
 800244a:	601a      	str	r2, [r3, #0]
	}
}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bdb0      	pop	{r4, r5, r7, pc}
 8002454:	40004400 	.word	0x40004400
 8002458:	20000370 	.word	0x20000370
 800245c:	20000358 	.word	0x20000358
 8002460:	20000388 	.word	0x20000388
 8002464:	200001c0 	.word	0x200001c0
 8002468:	2000011c 	.word	0x2000011c
 800246c:	20000164 	.word	0x20000164

08002470 <following_loop_new>:
  // 去除最大最小極值後求平均
  for(i = 2; i < YAW_RATE_BUF_SIZE - 2; i++) filter_sum += buffer[i];
  return filter_sum / (float)(YAW_RATE_BUF_SIZE - 4);
}

void following_loop_new() {
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af02      	add	r7, sp, #8
	timer_flags.freeze_for_test = 0;
 8002476:	4ba2      	ldr	r3, [pc, #648]	@ (8002700 <following_loop_new+0x290>)
 8002478:	2200      	movs	r2, #0
 800247a:	711a      	strb	r2, [r3, #4]
	while (1)
	{
		// read IMU f = 100hz
		if(timer_flags.do_read_IMU) {
 800247c:	4ba0      	ldr	r3, [pc, #640]	@ (8002700 <following_loop_new+0x290>)
 800247e:	795b      	ldrb	r3, [r3, #5]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <following_loop_new+0x1a>
			timer_flags.do_read_IMU = 0;
 8002484:	4b9e      	ldr	r3, [pc, #632]	@ (8002700 <following_loop_new+0x290>)
 8002486:	2200      	movs	r2, #0
 8002488:	715a      	strb	r2, [r3, #5]
//			yaw_rate_buffer[yaw_rate_index] = IMU_car.GyroZ;
//			yaw_rate_index = (yaw_rate_index + 1) % YAW_RATE_BUF_SIZE;
		}

		// speed control f= 10hz
		if(timer_flags.do_PID_wheel){
 800248a:	4b9d      	ldr	r3, [pc, #628]	@ (8002700 <following_loop_new+0x290>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d007      	beq.n	80024a2 <following_loop_new+0x32>
			timer_flags.do_PID_wheel = 0;
 8002492:	4b9b      	ldr	r3, [pc, #620]	@ (8002700 <following_loop_new+0x290>)
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
			//IMU_car.yaw += 0.1 * (yaw_rate_filter(yaw_rate_buffer) - IMU_car.yaw_rate_bias);
			wheel_speed_control(&map);
 8002498:	489a      	ldr	r0, [pc, #616]	@ (8002704 <following_loop_new+0x294>)
 800249a:	f7ff faab 	bl	80019f4 <wheel_speed_control>
			check_and_set_DCmotor_pwm();
 800249e:	f7ff f975 	bl	800178c <check_and_set_DCmotor_pwm>
		}

		// f = 5hz
		// updatae speed and steer control
		if (timer_flags.cam_data_update) {
 80024a2:	4b97      	ldr	r3, [pc, #604]	@ (8002700 <following_loop_new+0x290>)
 80024a4:	789b      	ldrb	r3, [r3, #2]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0e8      	beq.n	800247c <following_loop_new+0xc>
			timer_flags.cam_data_update = 0;
 80024aa:	4b95      	ldr	r3, [pc, #596]	@ (8002700 <following_loop_new+0x290>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	709a      	strb	r2, [r3, #2]
			if (AMB82.updated == 0){
 80024b0:	4b95      	ldr	r3, [pc, #596]	@ (8002708 <following_loop_new+0x298>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d111      	bne.n	80024dc <following_loop_new+0x6c>
				camera_update_fail_count++;
 80024b8:	4b94      	ldr	r3, [pc, #592]	@ (800270c <following_loop_new+0x29c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	3301      	adds	r3, #1
 80024be:	4a93      	ldr	r2, [pc, #588]	@ (800270c <following_loop_new+0x29c>)
 80024c0:	6013      	str	r3, [r2, #0]
				if (camera_update_fail_count > MAX_CAMERA_FAIL_COUNT){
 80024c2:	4b92      	ldr	r3, [pc, #584]	@ (800270c <following_loop_new+0x29c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b0a      	cmp	r3, #10
 80024c8:	ddd8      	ble.n	800247c <following_loop_new+0xc>
					change_wheel_PID_target_val(0);
 80024ca:	4b91      	ldr	r3, [pc, #580]	@ (8002710 <following_loop_new+0x2a0>)
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	4b90      	ldr	r3, [pc, #576]	@ (8002714 <following_loop_new+0x2a4>)
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	e7cf      	b.n	800247c <following_loop_new+0xc>
				}
			}
			else{
				AMB82.updated = 0;
 80024dc:	4b8a      	ldr	r3, [pc, #552]	@ (8002708 <following_loop_new+0x298>)
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
				camera_update_fail_count = 0;
 80024e2:	4b8a      	ldr	r3, [pc, #552]	@ (800270c <following_loop_new+0x29c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
				float dist ,angle;
	//			map_linear_predeict(&angle, &dist, &map, IMU_car.yaw/RAD2DEG, map.motor_int_count*pulse2dis);
				map_linear_predeict(&angle, &dist, &map, 0, map.motor_int_count*pulse2dis);
 80024e8:	4b86      	ldr	r3, [pc, #536]	@ (8002704 <following_loop_new+0x294>)
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fd ff81 	bl	80003f4 <__aeabi_i2d>
 80024f2:	a37d      	add	r3, pc, #500	@ (adr r3, 80026e8 <following_loop_new+0x278>)
 80024f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f8:	f7fd ffe6 	bl	80004c8 <__aeabi_dmul>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4610      	mov	r0, r2
 8002502:	4619      	mov	r1, r3
 8002504:	f7fe fad8 	bl	8000ab8 <__aeabi_d2f>
 8002508:	4603      	mov	r3, r0
 800250a:	1d39      	adds	r1, r7, #4
 800250c:	4638      	mov	r0, r7
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	4a7b      	ldr	r2, [pc, #492]	@ (8002704 <following_loop_new+0x294>)
 8002516:	f7ff fd3f 	bl	8001f98 <map_linear_predeict>
				//IMU_car.yaw = 0;
				map.motor_int_count = 0;
 800251a:	4b7a      	ldr	r3, [pc, #488]	@ (8002704 <following_loop_new+0x294>)
 800251c:	2200      	movs	r2, #0
 800251e:	619a      	str	r2, [r3, #24]
				// distance control
				DIST_CTRL();
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4619      	mov	r1, r3
 8002524:	487c      	ldr	r0, [pc, #496]	@ (8002718 <following_loop_new+0x2a8>)
 8002526:	f7ff f9b3 	bl	8001890 <PID_control>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4619      	mov	r1, r3
 800252e:	487b      	ldr	r0, [pc, #492]	@ (800271c <following_loop_new+0x2ac>)
 8002530:	f7ff f9ae 	bl	8001890 <PID_control>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	497a      	ldr	r1, [pc, #488]	@ (8002720 <following_loop_new+0x2b0>)
 8002538:	4618      	mov	r0, r3
 800253a:	f7fe fb11 	bl	8000b60 <__aeabi_fsub>
 800253e:	4603      	mov	r3, r0
 8002540:	4978      	ldr	r1, [pc, #480]	@ (8002724 <following_loop_new+0x2b4>)
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fdd2 	bl	80010ec <__aeabi_fcmpgt>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d05d      	beq.n	800260a <following_loop_new+0x19a>
 800254e:	4b72      	ldr	r3, [pc, #456]	@ (8002718 <following_loop_new+0x2a8>)
 8002550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002552:	f04f 0100 	mov.w	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fdaa 	bl	80010b0 <__aeabi_fcmplt>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d029      	beq.n	80025b6 <following_loop_new+0x146>
 8002562:	4b71      	ldr	r3, [pc, #452]	@ (8002728 <following_loop_new+0x2b8>)
 8002564:	2201      	movs	r2, #1
 8002566:	701a      	strb	r2, [r3, #0]
 8002568:	4b6b      	ldr	r3, [pc, #428]	@ (8002718 <following_loop_new+0x2a8>)
 800256a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800256c:	4618      	mov	r0, r3
 800256e:	f7fd ff53 	bl	8000418 <__aeabi_f2d>
 8002572:	a35f      	add	r3, pc, #380	@ (adr r3, 80026f0 <following_loop_new+0x280>)
 8002574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002578:	f7fd ffa6 	bl	80004c8 <__aeabi_dmul>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4610      	mov	r0, r2
 8002582:	4619      	mov	r1, r3
 8002584:	f7fe fa98 	bl	8000ab8 <__aeabi_d2f>
 8002588:	4603      	mov	r3, r0
 800258a:	4a61      	ldr	r2, [pc, #388]	@ (8002710 <following_loop_new+0x2a0>)
 800258c:	60d3      	str	r3, [r2, #12]
 800258e:	4b62      	ldr	r3, [pc, #392]	@ (8002718 <following_loop_new+0x2a8>)
 8002590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002592:	4618      	mov	r0, r3
 8002594:	f7fd ff40 	bl	8000418 <__aeabi_f2d>
 8002598:	a355      	add	r3, pc, #340	@ (adr r3, 80026f0 <following_loop_new+0x280>)
 800259a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259e:	f7fd ff93 	bl	80004c8 <__aeabi_dmul>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	f7fe fa85 	bl	8000ab8 <__aeabi_d2f>
 80025ae:	4603      	mov	r3, r0
 80025b0:	4a58      	ldr	r2, [pc, #352]	@ (8002714 <following_loop_new+0x2a4>)
 80025b2:	60d3      	str	r3, [r2, #12]
 80025b4:	e0c7      	b.n	8002746 <following_loop_new+0x2d6>
 80025b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002728 <following_loop_new+0x2b8>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
 80025bc:	4b56      	ldr	r3, [pc, #344]	@ (8002718 <following_loop_new+0x2a8>)
 80025be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fd ff29 	bl	8000418 <__aeabi_f2d>
 80025c6:	a34c      	add	r3, pc, #304	@ (adr r3, 80026f8 <following_loop_new+0x288>)
 80025c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025cc:	f7fd ff7c 	bl	80004c8 <__aeabi_dmul>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4610      	mov	r0, r2
 80025d6:	4619      	mov	r1, r3
 80025d8:	f7fe fa6e 	bl	8000ab8 <__aeabi_d2f>
 80025dc:	4603      	mov	r3, r0
 80025de:	4a4c      	ldr	r2, [pc, #304]	@ (8002710 <following_loop_new+0x2a0>)
 80025e0:	60d3      	str	r3, [r2, #12]
 80025e2:	4b4d      	ldr	r3, [pc, #308]	@ (8002718 <following_loop_new+0x2a8>)
 80025e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd ff16 	bl	8000418 <__aeabi_f2d>
 80025ec:	a342      	add	r3, pc, #264	@ (adr r3, 80026f8 <following_loop_new+0x288>)
 80025ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f2:	f7fd ff69 	bl	80004c8 <__aeabi_dmul>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
 80025fe:	f7fe fa5b 	bl	8000ab8 <__aeabi_d2f>
 8002602:	4603      	mov	r3, r0
 8002604:	4a43      	ldr	r2, [pc, #268]	@ (8002714 <following_loop_new+0x2a4>)
 8002606:	60d3      	str	r3, [r2, #12]
 8002608:	e09d      	b.n	8002746 <following_loop_new+0x2d6>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4944      	ldr	r1, [pc, #272]	@ (8002720 <following_loop_new+0x2b0>)
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe faa6 	bl	8000b60 <__aeabi_fsub>
 8002614:	4603      	mov	r3, r0
 8002616:	4945      	ldr	r1, [pc, #276]	@ (800272c <following_loop_new+0x2bc>)
 8002618:	4618      	mov	r0, r3
 800261a:	f7fe fd49 	bl	80010b0 <__aeabi_fcmplt>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 8085 	beq.w	8002730 <following_loop_new+0x2c0>
 8002626:	4b3d      	ldr	r3, [pc, #244]	@ (800271c <following_loop_new+0x2ac>)
 8002628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800262a:	f04f 0100 	mov.w	r1, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fd3e 	bl	80010b0 <__aeabi_fcmplt>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d029      	beq.n	800268e <following_loop_new+0x21e>
 800263a:	4b3b      	ldr	r3, [pc, #236]	@ (8002728 <following_loop_new+0x2b8>)
 800263c:	2201      	movs	r2, #1
 800263e:	701a      	strb	r2, [r3, #0]
 8002640:	4b36      	ldr	r3, [pc, #216]	@ (800271c <following_loop_new+0x2ac>)
 8002642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002644:	4618      	mov	r0, r3
 8002646:	f7fd fee7 	bl	8000418 <__aeabi_f2d>
 800264a:	a329      	add	r3, pc, #164	@ (adr r3, 80026f0 <following_loop_new+0x280>)
 800264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002650:	f7fd ff3a 	bl	80004c8 <__aeabi_dmul>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	f7fe fa2c 	bl	8000ab8 <__aeabi_d2f>
 8002660:	4603      	mov	r3, r0
 8002662:	4a2b      	ldr	r2, [pc, #172]	@ (8002710 <following_loop_new+0x2a0>)
 8002664:	60d3      	str	r3, [r2, #12]
 8002666:	4b2d      	ldr	r3, [pc, #180]	@ (800271c <following_loop_new+0x2ac>)
 8002668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800266a:	4618      	mov	r0, r3
 800266c:	f7fd fed4 	bl	8000418 <__aeabi_f2d>
 8002670:	a31f      	add	r3, pc, #124	@ (adr r3, 80026f0 <following_loop_new+0x280>)
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	f7fd ff27 	bl	80004c8 <__aeabi_dmul>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4610      	mov	r0, r2
 8002680:	4619      	mov	r1, r3
 8002682:	f7fe fa19 	bl	8000ab8 <__aeabi_d2f>
 8002686:	4603      	mov	r3, r0
 8002688:	4a22      	ldr	r2, [pc, #136]	@ (8002714 <following_loop_new+0x2a4>)
 800268a:	60d3      	str	r3, [r2, #12]
 800268c:	e05b      	b.n	8002746 <following_loop_new+0x2d6>
 800268e:	4b26      	ldr	r3, [pc, #152]	@ (8002728 <following_loop_new+0x2b8>)
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
 8002694:	4b21      	ldr	r3, [pc, #132]	@ (800271c <following_loop_new+0x2ac>)
 8002696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd febd 	bl	8000418 <__aeabi_f2d>
 800269e:	a316      	add	r3, pc, #88	@ (adr r3, 80026f8 <following_loop_new+0x288>)
 80026a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a4:	f7fd ff10 	bl	80004c8 <__aeabi_dmul>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4610      	mov	r0, r2
 80026ae:	4619      	mov	r1, r3
 80026b0:	f7fe fa02 	bl	8000ab8 <__aeabi_d2f>
 80026b4:	4603      	mov	r3, r0
 80026b6:	4a16      	ldr	r2, [pc, #88]	@ (8002710 <following_loop_new+0x2a0>)
 80026b8:	60d3      	str	r3, [r2, #12]
 80026ba:	4b18      	ldr	r3, [pc, #96]	@ (800271c <following_loop_new+0x2ac>)
 80026bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fd feaa 	bl	8000418 <__aeabi_f2d>
 80026c4:	a30c      	add	r3, pc, #48	@ (adr r3, 80026f8 <following_loop_new+0x288>)
 80026c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ca:	f7fd fefd 	bl	80004c8 <__aeabi_dmul>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	f7fe f9ef 	bl	8000ab8 <__aeabi_d2f>
 80026da:	4603      	mov	r3, r0
 80026dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002714 <following_loop_new+0x2a4>)
 80026de:	60d3      	str	r3, [r2, #12]
 80026e0:	e031      	b.n	8002746 <following_loop_new+0x2d6>
 80026e2:	bf00      	nop
 80026e4:	f3af 8000 	nop.w
 80026e8:	c366f27d 	.word	0xc366f27d
 80026ec:	3fd5bd50 	.word	0x3fd5bd50
 80026f0:	83c297c0 	.word	0x83c297c0
 80026f4:	bfd2d766 	.word	0xbfd2d766
 80026f8:	83c297c0 	.word	0x83c297c0
 80026fc:	3fd2d766 	.word	0x3fd2d766
 8002700:	200001a8 	.word	0x200001a8
 8002704:	200001c0 	.word	0x200001c0
 8002708:	20000388 	.word	0x20000388
 800270c:	200003ac 	.word	0x200003ac
 8002710:	20000228 	.word	0x20000228
 8002714:	20000274 	.word	0x20000274
 8002718:	200002c0 	.word	0x200002c0
 800271c:	2000030c 	.word	0x2000030c
 8002720:	42c80000 	.word	0x42c80000
 8002724:	41200000 	.word	0x41200000
 8002728:	200001bc 	.word	0x200001bc
 800272c:	c1200000 	.word	0xc1200000
 8002730:	4b15      	ldr	r3, [pc, #84]	@ (8002788 <following_loop_new+0x318>)
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]
 8002736:	4b15      	ldr	r3, [pc, #84]	@ (800278c <following_loop_new+0x31c>)
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	4b14      	ldr	r3, [pc, #80]	@ (8002790 <following_loop_new+0x320>)
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	60da      	str	r2, [r3, #12]
				// steering control
				STEER_CTRL_IMG();
 8002746:	4b13      	ldr	r3, [pc, #76]	@ (8002794 <following_loop_new+0x324>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4618      	mov	r0, r3
 800274c:	f7fe fabe 	bl	8000ccc <__aeabi_i2f>
 8002750:	4603      	mov	r3, r0
 8002752:	4911      	ldr	r1, [pc, #68]	@ (8002798 <following_loop_new+0x328>)
 8002754:	4618      	mov	r0, r3
 8002756:	f7fe fa03 	bl	8000b60 <__aeabi_fsub>
 800275a:	4603      	mov	r3, r0
 800275c:	4619      	mov	r1, r3
 800275e:	480f      	ldr	r0, [pc, #60]	@ (800279c <following_loop_new+0x32c>)
 8002760:	f7ff f896 	bl	8001890 <PID_control>
 8002764:	4b08      	ldr	r3, [pc, #32]	@ (8002788 <following_loop_new+0x318>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d007      	beq.n	800277c <following_loop_new+0x30c>
 800276c:	4b0b      	ldr	r3, [pc, #44]	@ (800279c <following_loop_new+0x32c>)
 800276e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002770:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff f9d3 	bl	8001b20 <steer_by_percentage>
 800277a:	e67f      	b.n	800247c <following_loop_new+0xc>
 800277c:	4b07      	ldr	r3, [pc, #28]	@ (800279c <following_loop_new+0x32c>)
 800277e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff f9cd 	bl	8001b20 <steer_by_percentage>
		if(timer_flags.do_read_IMU) {
 8002786:	e679      	b.n	800247c <following_loop_new+0xc>
 8002788:	200001bc 	.word	0x200001bc
 800278c:	20000228 	.word	0x20000228
 8002790:	20000274 	.word	0x20000274
 8002794:	20000388 	.word	0x20000388
 8002798:	44700000 	.word	0x44700000
 800279c:	200001dc 	.word	0x200001dc

080027a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027a4:	b672      	cpsid	i
}
 80027a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027a8:	bf00      	nop
 80027aa:	e7fd      	b.n	80027a8 <Error_Handler+0x8>

080027ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027b2:	4b15      	ldr	r3, [pc, #84]	@ (8002808 <HAL_MspInit+0x5c>)
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	4a14      	ldr	r2, [pc, #80]	@ (8002808 <HAL_MspInit+0x5c>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6193      	str	r3, [r2, #24]
 80027be:	4b12      	ldr	r3, [pc, #72]	@ (8002808 <HAL_MspInit+0x5c>)
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002808 <HAL_MspInit+0x5c>)
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002808 <HAL_MspInit+0x5c>)
 80027d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d4:	61d3      	str	r3, [r2, #28]
 80027d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002808 <HAL_MspInit+0x5c>)
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027de:	607b      	str	r3, [r7, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027e2:	4b0a      	ldr	r3, [pc, #40]	@ (800280c <HAL_MspInit+0x60>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	4a04      	ldr	r2, [pc, #16]	@ (800280c <HAL_MspInit+0x60>)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr
 8002808:	40021000 	.word	0x40021000
 800280c:	40010000 	.word	0x40010000

08002810 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a09      	ldr	r2, [pc, #36]	@ (8002844 <HAL_TIM_Base_MspInit+0x34>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d10b      	bne.n	800283a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002822:	4b09      	ldr	r3, [pc, #36]	@ (8002848 <HAL_TIM_Base_MspInit+0x38>)
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	4a08      	ldr	r2, [pc, #32]	@ (8002848 <HAL_TIM_Base_MspInit+0x38>)
 8002828:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800282c:	6193      	str	r3, [r2, #24]
 800282e:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <HAL_TIM_Base_MspInit+0x38>)
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	40012c00 	.word	0x40012c00
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a09      	ldr	r2, [pc, #36]	@ (8002880 <HAL_TIM_PWM_MspInit+0x34>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d10b      	bne.n	8002876 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800285e:	4b09      	ldr	r3, [pc, #36]	@ (8002884 <HAL_TIM_PWM_MspInit+0x38>)
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	4a08      	ldr	r2, [pc, #32]	@ (8002884 <HAL_TIM_PWM_MspInit+0x38>)
 8002864:	f043 0302 	orr.w	r3, r3, #2
 8002868:	61d3      	str	r3, [r2, #28]
 800286a:	4b06      	ldr	r3, [pc, #24]	@ (8002884 <HAL_TIM_PWM_MspInit+0x38>)
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr
 8002880:	40000400 	.word	0x40000400
 8002884:	40021000 	.word	0x40021000

08002888 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08a      	sub	sp, #40	@ 0x28
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002890:	f107 0314 	add.w	r3, r7, #20
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a28      	ldr	r2, [pc, #160]	@ (8002944 <HAL_TIM_MspPostInit+0xbc>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d119      	bne.n	80028dc <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a8:	4b27      	ldr	r3, [pc, #156]	@ (8002948 <HAL_TIM_MspPostInit+0xc0>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	4a26      	ldr	r2, [pc, #152]	@ (8002948 <HAL_TIM_MspPostInit+0xc0>)
 80028ae:	f043 0304 	orr.w	r3, r3, #4
 80028b2:	6193      	str	r3, [r2, #24]
 80028b4:	4b24      	ldr	r3, [pc, #144]	@ (8002948 <HAL_TIM_MspPostInit+0xc0>)
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c6:	2302      	movs	r3, #2
 80028c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ca:	2302      	movs	r3, #2
 80028cc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ce:	f107 0314 	add.w	r3, r7, #20
 80028d2:	4619      	mov	r1, r3
 80028d4:	481d      	ldr	r0, [pc, #116]	@ (800294c <HAL_TIM_MspPostInit+0xc4>)
 80028d6:	f000 fceb 	bl	80032b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028da:	e02e      	b.n	800293a <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM3)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002950 <HAL_TIM_MspPostInit+0xc8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d129      	bne.n	800293a <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e6:	4b18      	ldr	r3, [pc, #96]	@ (8002948 <HAL_TIM_MspPostInit+0xc0>)
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	4a17      	ldr	r2, [pc, #92]	@ (8002948 <HAL_TIM_MspPostInit+0xc0>)
 80028ec:	f043 0308 	orr.w	r3, r3, #8
 80028f0:	6193      	str	r3, [r2, #24]
 80028f2:	4b15      	ldr	r3, [pc, #84]	@ (8002948 <HAL_TIM_MspPostInit+0xc0>)
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80028fe:	2310      	movs	r3, #16
 8002900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002906:	2302      	movs	r3, #2
 8002908:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800290a:	f107 0314 	add.w	r3, r7, #20
 800290e:	4619      	mov	r1, r3
 8002910:	4810      	ldr	r0, [pc, #64]	@ (8002954 <HAL_TIM_MspPostInit+0xcc>)
 8002912:	f000 fccd 	bl	80032b0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002916:	4b10      	ldr	r3, [pc, #64]	@ (8002958 <HAL_TIM_MspPostInit+0xd0>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	627b      	str	r3, [r7, #36]	@ 0x24
 800291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002922:	627b      	str	r3, [r7, #36]	@ 0x24
 8002924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002926:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800292a:	627b      	str	r3, [r7, #36]	@ 0x24
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002932:	627b      	str	r3, [r7, #36]	@ 0x24
 8002934:	4a08      	ldr	r2, [pc, #32]	@ (8002958 <HAL_TIM_MspPostInit+0xd0>)
 8002936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002938:	6053      	str	r3, [r2, #4]
}
 800293a:	bf00      	nop
 800293c:	3728      	adds	r7, #40	@ 0x28
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40012c00 	.word	0x40012c00
 8002948:	40021000 	.word	0x40021000
 800294c:	40010800 	.word	0x40010800
 8002950:	40000400 	.word	0x40000400
 8002954:	40010c00 	.word	0x40010c00
 8002958:	40010000 	.word	0x40010000

0800295c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002964:	f107 0310 	add.w	r3, r7, #16
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a2e      	ldr	r2, [pc, #184]	@ (8002a30 <HAL_UART_MspInit+0xd4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d155      	bne.n	8002a28 <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800297c:	4b2d      	ldr	r3, [pc, #180]	@ (8002a34 <HAL_UART_MspInit+0xd8>)
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	4a2c      	ldr	r2, [pc, #176]	@ (8002a34 <HAL_UART_MspInit+0xd8>)
 8002982:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002986:	61d3      	str	r3, [r2, #28]
 8002988:	4b2a      	ldr	r3, [pc, #168]	@ (8002a34 <HAL_UART_MspInit+0xd8>)
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002994:	4b27      	ldr	r3, [pc, #156]	@ (8002a34 <HAL_UART_MspInit+0xd8>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	4a26      	ldr	r2, [pc, #152]	@ (8002a34 <HAL_UART_MspInit+0xd8>)
 800299a:	f043 0304 	orr.w	r3, r3, #4
 800299e:	6193      	str	r3, [r2, #24]
 80029a0:	4b24      	ldr	r3, [pc, #144]	@ (8002a34 <HAL_UART_MspInit+0xd8>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029ac:	2304      	movs	r3, #4
 80029ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b0:	2302      	movs	r3, #2
 80029b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029b4:	2303      	movs	r3, #3
 80029b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b8:	f107 0310 	add.w	r3, r7, #16
 80029bc:	4619      	mov	r1, r3
 80029be:	481e      	ldr	r0, [pc, #120]	@ (8002a38 <HAL_UART_MspInit+0xdc>)
 80029c0:	f000 fc76 	bl	80032b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029c4:	2308      	movs	r3, #8
 80029c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d0:	f107 0310 	add.w	r3, r7, #16
 80029d4:	4619      	mov	r1, r3
 80029d6:	4818      	ldr	r0, [pc, #96]	@ (8002a38 <HAL_UART_MspInit+0xdc>)
 80029d8:	f000 fc6a 	bl	80032b0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80029dc:	4b17      	ldr	r3, [pc, #92]	@ (8002a3c <HAL_UART_MspInit+0xe0>)
 80029de:	4a18      	ldr	r2, [pc, #96]	@ (8002a40 <HAL_UART_MspInit+0xe4>)
 80029e0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029e2:	4b16      	ldr	r3, [pc, #88]	@ (8002a3c <HAL_UART_MspInit+0xe0>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029e8:	4b14      	ldr	r3, [pc, #80]	@ (8002a3c <HAL_UART_MspInit+0xe0>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029ee:	4b13      	ldr	r3, [pc, #76]	@ (8002a3c <HAL_UART_MspInit+0xe0>)
 80029f0:	2280      	movs	r2, #128	@ 0x80
 80029f2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029f4:	4b11      	ldr	r3, [pc, #68]	@ (8002a3c <HAL_UART_MspInit+0xe0>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029fa:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <HAL_UART_MspInit+0xe0>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002a00:	4b0e      	ldr	r3, [pc, #56]	@ (8002a3c <HAL_UART_MspInit+0xe0>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a06:	4b0d      	ldr	r3, [pc, #52]	@ (8002a3c <HAL_UART_MspInit+0xe0>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a0c:	480b      	ldr	r0, [pc, #44]	@ (8002a3c <HAL_UART_MspInit+0xe0>)
 8002a0e:	f000 fa61 	bl	8002ed4 <HAL_DMA_Init>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002a18:	f7ff fec2 	bl	80027a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a07      	ldr	r2, [pc, #28]	@ (8002a3c <HAL_UART_MspInit+0xe0>)
 8002a20:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a22:	4a06      	ldr	r2, [pc, #24]	@ (8002a3c <HAL_UART_MspInit+0xe0>)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002a28:	bf00      	nop
 8002a2a:	3720      	adds	r7, #32
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40004400 	.word	0x40004400
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40010800 	.word	0x40010800
 8002a3c:	20000164 	.word	0x20000164
 8002a40:	4002006c 	.word	0x4002006c

08002a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a48:	bf00      	nop
 8002a4a:	e7fd      	b.n	8002a48 <NMI_Handler+0x4>

08002a4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a50:	bf00      	nop
 8002a52:	e7fd      	b.n	8002a50 <HardFault_Handler+0x4>

08002a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a58:	bf00      	nop
 8002a5a:	e7fd      	b.n	8002a58 <MemManage_Handler+0x4>

08002a5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a60:	bf00      	nop
 8002a62:	e7fd      	b.n	8002a60 <BusFault_Handler+0x4>

08002a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a68:	bf00      	nop
 8002a6a:	e7fd      	b.n	8002a68 <UsageFault_Handler+0x4>

08002a6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	// tiemr freq = 1000hz
	if (!timer_flags.freeze_for_test){
 8002a94:	4b28      	ldr	r3, [pc, #160]	@ (8002b38 <SysTick_Handler+0xa8>)
 8002a96:	791b      	ldrb	r3, [r3, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d148      	bne.n	8002b2e <SysTick_Handler+0x9e>
		time_ms++;
 8002a9c:	4b27      	ldr	r3, [pc, #156]	@ (8002b3c <SysTick_Handler+0xac>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	4a26      	ldr	r2, [pc, #152]	@ (8002b3c <SysTick_Handler+0xac>)
 8002aa4:	6013      	str	r3, [r2, #0]
		timer1_counter = (timer1_counter + 1) % 1000;
 8002aa6:	4b26      	ldr	r3, [pc, #152]	@ (8002b40 <SysTick_Handler+0xb0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	4b25      	ldr	r3, [pc, #148]	@ (8002b44 <SysTick_Handler+0xb4>)
 8002aae:	fb83 1302 	smull	r1, r3, r3, r2
 8002ab2:	1199      	asrs	r1, r3, #6
 8002ab4:	17d3      	asrs	r3, r2, #31
 8002ab6:	1acb      	subs	r3, r1, r3
 8002ab8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8002b40 <SysTick_Handler+0xb0>)
 8002ac4:	6013      	str	r3, [r2, #0]
		// 100hz
		if (timer1_counter % 10 == 0){
 8002ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b40 <SysTick_Handler+0xb0>)
 8002ac8:	6819      	ldr	r1, [r3, #0]
 8002aca:	4b1f      	ldr	r3, [pc, #124]	@ (8002b48 <SysTick_Handler+0xb8>)
 8002acc:	fb83 2301 	smull	r2, r3, r3, r1
 8002ad0:	109a      	asrs	r2, r3, #2
 8002ad2:	17cb      	asrs	r3, r1, #31
 8002ad4:	1ad2      	subs	r2, r2, r3
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	1aca      	subs	r2, r1, r3
 8002ae0:	2a00      	cmp	r2, #0
 8002ae2:	d102      	bne.n	8002aea <SysTick_Handler+0x5a>
			timer_flags.do_read_IMU = 1;
 8002ae4:	4b14      	ldr	r3, [pc, #80]	@ (8002b38 <SysTick_Handler+0xa8>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	715a      	strb	r2, [r3, #5]
		}
		// 10hz
		if (timer1_counter % 100 == 0){
 8002aea:	4b15      	ldr	r3, [pc, #84]	@ (8002b40 <SysTick_Handler+0xb0>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4b17      	ldr	r3, [pc, #92]	@ (8002b4c <SysTick_Handler+0xbc>)
 8002af0:	fb83 1302 	smull	r1, r3, r3, r2
 8002af4:	1159      	asrs	r1, r3, #5
 8002af6:	17d3      	asrs	r3, r2, #31
 8002af8:	1acb      	subs	r3, r1, r3
 8002afa:	2164      	movs	r1, #100	@ 0x64
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d102      	bne.n	8002b0c <SysTick_Handler+0x7c>
			timer_flags.do_PID_wheel = 1;
 8002b06:	4b0c      	ldr	r3, [pc, #48]	@ (8002b38 <SysTick_Handler+0xa8>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]
		}
		// 5hz
		if (timer1_counter % 200 == 0){
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b40 <SysTick_Handler+0xb0>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b0e      	ldr	r3, [pc, #56]	@ (8002b4c <SysTick_Handler+0xbc>)
 8002b12:	fb83 1302 	smull	r1, r3, r3, r2
 8002b16:	1199      	asrs	r1, r3, #6
 8002b18:	17d3      	asrs	r3, r2, #31
 8002b1a:	1acb      	subs	r3, r1, r3
 8002b1c:	21c8      	movs	r1, #200	@ 0xc8
 8002b1e:	fb01 f303 	mul.w	r3, r1, r3
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d102      	bne.n	8002b2e <SysTick_Handler+0x9e>
			timer_flags.cam_data_update = 1;
 8002b28:	4b03      	ldr	r3, [pc, #12]	@ (8002b38 <SysTick_Handler+0xa8>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	709a      	strb	r2, [r3, #2]
		}
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b2e:	f000 f8a7 	bl	8002c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	200001a8 	.word	0x200001a8
 8002b3c:	200001b0 	.word	0x200001b0
 8002b40:	200003b0 	.word	0x200003b0
 8002b44:	10624dd3 	.word	0x10624dd3
 8002b48:	66666667 	.word	0x66666667
 8002b4c:	51eb851f 	.word	0x51eb851f

08002b50 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	rear_wheel_interrupt_count++;
 8002b54:	4b04      	ldr	r3, [pc, #16]	@ (8002b68 <EXTI0_IRQHandler+0x18>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	4a03      	ldr	r2, [pc, #12]	@ (8002b68 <EXTI0_IRQHandler+0x18>)
 8002b5c:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002b5e:	2001      	movs	r0, #1
 8002b60:	f000 fd42 	bl	80035e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002b64:	bf00      	nop
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	200001b6 	.word	0x200001b6

08002b6c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	front_wheel_interrupt_count++;
 8002b70:	4b04      	ldr	r3, [pc, #16]	@ (8002b84 <EXTI1_IRQHandler+0x18>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3301      	adds	r3, #1
 8002b76:	4a03      	ldr	r2, [pc, #12]	@ (8002b84 <EXTI1_IRQHandler+0x18>)
 8002b78:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002b7a:	2002      	movs	r0, #2
 8002b7c:	f000 fd34 	bl	80035e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002b80:	bf00      	nop
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	200001b4 	.word	0x200001b4

08002b88 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002b8c:	4802      	ldr	r0, [pc, #8]	@ (8002b98 <DMA1_Channel6_IRQHandler+0x10>)
 8002b8e:	f000 fa5b 	bl	8003048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000164 	.word	0x20000164

08002b9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ba8:	f7ff fff8 	bl	8002b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bac:	480b      	ldr	r0, [pc, #44]	@ (8002bdc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002bae:	490c      	ldr	r1, [pc, #48]	@ (8002be0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002bb0:	4a0c      	ldr	r2, [pc, #48]	@ (8002be4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bb4:	e002      	b.n	8002bbc <LoopCopyDataInit>

08002bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bba:	3304      	adds	r3, #4

08002bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bc0:	d3f9      	bcc.n	8002bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bc2:	4a09      	ldr	r2, [pc, #36]	@ (8002be8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002bc4:	4c09      	ldr	r4, [pc, #36]	@ (8002bec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bc8:	e001      	b.n	8002bce <LoopFillZerobss>

08002bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bcc:	3204      	adds	r2, #4

08002bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bd0:	d3fb      	bcc.n	8002bca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bd2:	f002 fae7 	bl	80051a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bd6:	f7fe fab3 	bl	8001140 <main>
  bx lr
 8002bda:	4770      	bx	lr
  ldr r0, =_sdata
 8002bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002be0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002be4:	08007508 	.word	0x08007508
  ldr r2, =_sbss
 8002be8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002bec:	200004f0 	.word	0x200004f0

08002bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bf0:	e7fe      	b.n	8002bf0 <ADC1_2_IRQHandler>
	...

08002bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bf8:	4b08      	ldr	r3, [pc, #32]	@ (8002c1c <HAL_Init+0x28>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a07      	ldr	r2, [pc, #28]	@ (8002c1c <HAL_Init+0x28>)
 8002bfe:	f043 0310 	orr.w	r3, r3, #16
 8002c02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c04:	2003      	movs	r0, #3
 8002c06:	f000 f923 	bl	8002e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c0a:	200f      	movs	r0, #15
 8002c0c:	f000 f808 	bl	8002c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c10:	f7ff fdcc 	bl	80027ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40022000 	.word	0x40022000

08002c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c28:	4b12      	ldr	r3, [pc, #72]	@ (8002c74 <HAL_InitTick+0x54>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	4b12      	ldr	r3, [pc, #72]	@ (8002c78 <HAL_InitTick+0x58>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	4619      	mov	r1, r3
 8002c32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 f93b 	bl	8002eba <HAL_SYSTICK_Config>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e00e      	b.n	8002c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b0f      	cmp	r3, #15
 8002c52:	d80a      	bhi.n	8002c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c54:	2200      	movs	r2, #0
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	f04f 30ff 	mov.w	r0, #4294967295
 8002c5c:	f000 f903 	bl	8002e66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c60:	4a06      	ldr	r2, [pc, #24]	@ (8002c7c <HAL_InitTick+0x5c>)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	e000      	b.n	8002c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20000000 	.word	0x20000000
 8002c78:	20000008 	.word	0x20000008
 8002c7c:	20000004 	.word	0x20000004

08002c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c84:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <HAL_IncTick+0x1c>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4b05      	ldr	r3, [pc, #20]	@ (8002ca0 <HAL_IncTick+0x20>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4413      	add	r3, r2
 8002c90:	4a03      	ldr	r2, [pc, #12]	@ (8002ca0 <HAL_IncTick+0x20>)
 8002c92:	6013      	str	r3, [r2, #0]
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr
 8002c9c:	20000008 	.word	0x20000008
 8002ca0:	200003b4 	.word	0x200003b4

08002ca4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ca8:	4b02      	ldr	r3, [pc, #8]	@ (8002cb4 <HAL_GetTick+0x10>)
 8002caa:	681b      	ldr	r3, [r3, #0]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr
 8002cb4:	200003b4 	.word	0x200003b4

08002cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002cfc <__NVIC_SetPriorityGrouping+0x44>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ce0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cea:	4a04      	ldr	r2, [pc, #16]	@ (8002cfc <__NVIC_SetPriorityGrouping+0x44>)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	60d3      	str	r3, [r2, #12]
}
 8002cf0:	bf00      	nop
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d04:	4b04      	ldr	r3, [pc, #16]	@ (8002d18 <__NVIC_GetPriorityGrouping+0x18>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	0a1b      	lsrs	r3, r3, #8
 8002d0a:	f003 0307 	and.w	r3, r3, #7
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	e000ed00 	.word	0xe000ed00

08002d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	db0b      	blt.n	8002d46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	f003 021f 	and.w	r2, r3, #31
 8002d34:	4906      	ldr	r1, [pc, #24]	@ (8002d50 <__NVIC_EnableIRQ+0x34>)
 8002d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr
 8002d50:	e000e100 	.word	0xe000e100

08002d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	6039      	str	r1, [r7, #0]
 8002d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	db0a      	blt.n	8002d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	490c      	ldr	r1, [pc, #48]	@ (8002da0 <__NVIC_SetPriority+0x4c>)
 8002d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d72:	0112      	lsls	r2, r2, #4
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	440b      	add	r3, r1
 8002d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d7c:	e00a      	b.n	8002d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	4908      	ldr	r1, [pc, #32]	@ (8002da4 <__NVIC_SetPriority+0x50>)
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	3b04      	subs	r3, #4
 8002d8c:	0112      	lsls	r2, r2, #4
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	440b      	add	r3, r1
 8002d92:	761a      	strb	r2, [r3, #24]
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	e000e100 	.word	0xe000e100
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b089      	sub	sp, #36	@ 0x24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f1c3 0307 	rsb	r3, r3, #7
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	bf28      	it	cs
 8002dc6:	2304      	movcs	r3, #4
 8002dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	2b06      	cmp	r3, #6
 8002dd0:	d902      	bls.n	8002dd8 <NVIC_EncodePriority+0x30>
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3b03      	subs	r3, #3
 8002dd6:	e000      	b.n	8002dda <NVIC_EncodePriority+0x32>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43da      	mvns	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	401a      	ands	r2, r3
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df0:	f04f 31ff 	mov.w	r1, #4294967295
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfa:	43d9      	mvns	r1, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e00:	4313      	orrs	r3, r2
         );
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3724      	adds	r7, #36	@ 0x24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e1c:	d301      	bcc.n	8002e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e00f      	b.n	8002e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e22:	4a0a      	ldr	r2, [pc, #40]	@ (8002e4c <SysTick_Config+0x40>)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e2a:	210f      	movs	r1, #15
 8002e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e30:	f7ff ff90 	bl	8002d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e34:	4b05      	ldr	r3, [pc, #20]	@ (8002e4c <SysTick_Config+0x40>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e3a:	4b04      	ldr	r3, [pc, #16]	@ (8002e4c <SysTick_Config+0x40>)
 8002e3c:	2207      	movs	r2, #7
 8002e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	e000e010 	.word	0xe000e010

08002e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff ff2d 	bl	8002cb8 <__NVIC_SetPriorityGrouping>
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b086      	sub	sp, #24
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	607a      	str	r2, [r7, #4]
 8002e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e78:	f7ff ff42 	bl	8002d00 <__NVIC_GetPriorityGrouping>
 8002e7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	6978      	ldr	r0, [r7, #20]
 8002e84:	f7ff ff90 	bl	8002da8 <NVIC_EncodePriority>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ff5f 	bl	8002d54 <__NVIC_SetPriority>
}
 8002e96:	bf00      	nop
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff ff35 	bl	8002d1c <__NVIC_EnableIRQ>
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff ffa2 	bl	8002e0c <SysTick_Config>
 8002ec8:	4603      	mov	r3, r0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e043      	b.n	8002f72 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4b22      	ldr	r3, [pc, #136]	@ (8002f7c <HAL_DMA_Init+0xa8>)
 8002ef2:	4413      	add	r3, r2
 8002ef4:	4a22      	ldr	r2, [pc, #136]	@ (8002f80 <HAL_DMA_Init+0xac>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	091b      	lsrs	r3, r3, #4
 8002efc:	009a      	lsls	r2, r3, #2
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a1f      	ldr	r2, [pc, #124]	@ (8002f84 <HAL_DMA_Init+0xb0>)
 8002f06:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f1e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002f22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002f2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	bffdfff8 	.word	0xbffdfff8
 8002f80:	cccccccd 	.word	0xcccccccd
 8002f84:	40020000 	.word	0x40020000

08002f88 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_DMA_Start_IT+0x20>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e04b      	b.n	8003040 <HAL_DMA_Start_IT+0xb8>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d13a      	bne.n	8003032 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0201 	bic.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f937 	bl	8003254 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 020e 	orr.w	r2, r2, #14
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	e00f      	b.n	8003020 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0204 	bic.w	r2, r2, #4
 800300e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 020a 	orr.w	r2, r2, #10
 800301e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	e005      	b.n	800303e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800303a:	2302      	movs	r3, #2
 800303c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800303e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003064:	2204      	movs	r2, #4
 8003066:	409a      	lsls	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d04f      	beq.n	8003110 <HAL_DMA_IRQHandler+0xc8>
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	2b00      	cmp	r3, #0
 8003078:	d04a      	beq.n	8003110 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0320 	and.w	r3, r3, #32
 8003084:	2b00      	cmp	r3, #0
 8003086:	d107      	bne.n	8003098 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0204 	bic.w	r2, r2, #4
 8003096:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a66      	ldr	r2, [pc, #408]	@ (8003238 <HAL_DMA_IRQHandler+0x1f0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d029      	beq.n	80030f6 <HAL_DMA_IRQHandler+0xae>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a65      	ldr	r2, [pc, #404]	@ (800323c <HAL_DMA_IRQHandler+0x1f4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d022      	beq.n	80030f2 <HAL_DMA_IRQHandler+0xaa>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a63      	ldr	r2, [pc, #396]	@ (8003240 <HAL_DMA_IRQHandler+0x1f8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d01a      	beq.n	80030ec <HAL_DMA_IRQHandler+0xa4>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a62      	ldr	r2, [pc, #392]	@ (8003244 <HAL_DMA_IRQHandler+0x1fc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d012      	beq.n	80030e6 <HAL_DMA_IRQHandler+0x9e>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a60      	ldr	r2, [pc, #384]	@ (8003248 <HAL_DMA_IRQHandler+0x200>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00a      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x98>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a5f      	ldr	r2, [pc, #380]	@ (800324c <HAL_DMA_IRQHandler+0x204>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d102      	bne.n	80030da <HAL_DMA_IRQHandler+0x92>
 80030d4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80030d8:	e00e      	b.n	80030f8 <HAL_DMA_IRQHandler+0xb0>
 80030da:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80030de:	e00b      	b.n	80030f8 <HAL_DMA_IRQHandler+0xb0>
 80030e0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80030e4:	e008      	b.n	80030f8 <HAL_DMA_IRQHandler+0xb0>
 80030e6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80030ea:	e005      	b.n	80030f8 <HAL_DMA_IRQHandler+0xb0>
 80030ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030f0:	e002      	b.n	80030f8 <HAL_DMA_IRQHandler+0xb0>
 80030f2:	2340      	movs	r3, #64	@ 0x40
 80030f4:	e000      	b.n	80030f8 <HAL_DMA_IRQHandler+0xb0>
 80030f6:	2304      	movs	r3, #4
 80030f8:	4a55      	ldr	r2, [pc, #340]	@ (8003250 <HAL_DMA_IRQHandler+0x208>)
 80030fa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 8094 	beq.w	800322e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800310e:	e08e      	b.n	800322e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003114:	2202      	movs	r2, #2
 8003116:	409a      	lsls	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4013      	ands	r3, r2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d056      	beq.n	80031ce <HAL_DMA_IRQHandler+0x186>
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d051      	beq.n	80031ce <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10b      	bne.n	8003150 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 020a 	bic.w	r2, r2, #10
 8003146:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a38      	ldr	r2, [pc, #224]	@ (8003238 <HAL_DMA_IRQHandler+0x1f0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d029      	beq.n	80031ae <HAL_DMA_IRQHandler+0x166>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a37      	ldr	r2, [pc, #220]	@ (800323c <HAL_DMA_IRQHandler+0x1f4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d022      	beq.n	80031aa <HAL_DMA_IRQHandler+0x162>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a35      	ldr	r2, [pc, #212]	@ (8003240 <HAL_DMA_IRQHandler+0x1f8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d01a      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x15c>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a34      	ldr	r2, [pc, #208]	@ (8003244 <HAL_DMA_IRQHandler+0x1fc>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d012      	beq.n	800319e <HAL_DMA_IRQHandler+0x156>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a32      	ldr	r2, [pc, #200]	@ (8003248 <HAL_DMA_IRQHandler+0x200>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00a      	beq.n	8003198 <HAL_DMA_IRQHandler+0x150>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a31      	ldr	r2, [pc, #196]	@ (800324c <HAL_DMA_IRQHandler+0x204>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d102      	bne.n	8003192 <HAL_DMA_IRQHandler+0x14a>
 800318c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003190:	e00e      	b.n	80031b0 <HAL_DMA_IRQHandler+0x168>
 8003192:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003196:	e00b      	b.n	80031b0 <HAL_DMA_IRQHandler+0x168>
 8003198:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800319c:	e008      	b.n	80031b0 <HAL_DMA_IRQHandler+0x168>
 800319e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80031a2:	e005      	b.n	80031b0 <HAL_DMA_IRQHandler+0x168>
 80031a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80031a8:	e002      	b.n	80031b0 <HAL_DMA_IRQHandler+0x168>
 80031aa:	2320      	movs	r3, #32
 80031ac:	e000      	b.n	80031b0 <HAL_DMA_IRQHandler+0x168>
 80031ae:	2302      	movs	r3, #2
 80031b0:	4a27      	ldr	r2, [pc, #156]	@ (8003250 <HAL_DMA_IRQHandler+0x208>)
 80031b2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d034      	beq.n	800322e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80031cc:	e02f      	b.n	800322e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d2:	2208      	movs	r2, #8
 80031d4:	409a      	lsls	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4013      	ands	r3, r2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d028      	beq.n	8003230 <HAL_DMA_IRQHandler+0x1e8>
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d023      	beq.n	8003230 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 020e 	bic.w	r2, r2, #14
 80031f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003200:	2101      	movs	r1, #1
 8003202:	fa01 f202 	lsl.w	r2, r1, r2
 8003206:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	2b00      	cmp	r3, #0
 8003224:	d004      	beq.n	8003230 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	4798      	blx	r3
    }
  }
  return;
 800322e:	bf00      	nop
 8003230:	bf00      	nop
}
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40020008 	.word	0x40020008
 800323c:	4002001c 	.word	0x4002001c
 8003240:	40020030 	.word	0x40020030
 8003244:	40020044 	.word	0x40020044
 8003248:	40020058 	.word	0x40020058
 800324c:	4002006c 	.word	0x4002006c
 8003250:	40020000 	.word	0x40020000

08003254 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
 8003260:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800326a:	2101      	movs	r1, #1
 800326c:	fa01 f202 	lsl.w	r2, r1, r2
 8003270:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b10      	cmp	r3, #16
 8003280:	d108      	bne.n	8003294 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003292:	e007      	b.n	80032a4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	60da      	str	r2, [r3, #12]
}
 80032a4:	bf00      	nop
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr
	...

080032b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b08b      	sub	sp, #44	@ 0x2c
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032ba:	2300      	movs	r3, #0
 80032bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80032be:	2300      	movs	r3, #0
 80032c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032c2:	e169      	b.n	8003598 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80032c4:	2201      	movs	r2, #1
 80032c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	4013      	ands	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	429a      	cmp	r2, r3
 80032de:	f040 8158 	bne.w	8003592 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	4a9a      	ldr	r2, [pc, #616]	@ (8003550 <HAL_GPIO_Init+0x2a0>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d05e      	beq.n	80033aa <HAL_GPIO_Init+0xfa>
 80032ec:	4a98      	ldr	r2, [pc, #608]	@ (8003550 <HAL_GPIO_Init+0x2a0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d875      	bhi.n	80033de <HAL_GPIO_Init+0x12e>
 80032f2:	4a98      	ldr	r2, [pc, #608]	@ (8003554 <HAL_GPIO_Init+0x2a4>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d058      	beq.n	80033aa <HAL_GPIO_Init+0xfa>
 80032f8:	4a96      	ldr	r2, [pc, #600]	@ (8003554 <HAL_GPIO_Init+0x2a4>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d86f      	bhi.n	80033de <HAL_GPIO_Init+0x12e>
 80032fe:	4a96      	ldr	r2, [pc, #600]	@ (8003558 <HAL_GPIO_Init+0x2a8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d052      	beq.n	80033aa <HAL_GPIO_Init+0xfa>
 8003304:	4a94      	ldr	r2, [pc, #592]	@ (8003558 <HAL_GPIO_Init+0x2a8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d869      	bhi.n	80033de <HAL_GPIO_Init+0x12e>
 800330a:	4a94      	ldr	r2, [pc, #592]	@ (800355c <HAL_GPIO_Init+0x2ac>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d04c      	beq.n	80033aa <HAL_GPIO_Init+0xfa>
 8003310:	4a92      	ldr	r2, [pc, #584]	@ (800355c <HAL_GPIO_Init+0x2ac>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d863      	bhi.n	80033de <HAL_GPIO_Init+0x12e>
 8003316:	4a92      	ldr	r2, [pc, #584]	@ (8003560 <HAL_GPIO_Init+0x2b0>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d046      	beq.n	80033aa <HAL_GPIO_Init+0xfa>
 800331c:	4a90      	ldr	r2, [pc, #576]	@ (8003560 <HAL_GPIO_Init+0x2b0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d85d      	bhi.n	80033de <HAL_GPIO_Init+0x12e>
 8003322:	2b12      	cmp	r3, #18
 8003324:	d82a      	bhi.n	800337c <HAL_GPIO_Init+0xcc>
 8003326:	2b12      	cmp	r3, #18
 8003328:	d859      	bhi.n	80033de <HAL_GPIO_Init+0x12e>
 800332a:	a201      	add	r2, pc, #4	@ (adr r2, 8003330 <HAL_GPIO_Init+0x80>)
 800332c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003330:	080033ab 	.word	0x080033ab
 8003334:	08003385 	.word	0x08003385
 8003338:	08003397 	.word	0x08003397
 800333c:	080033d9 	.word	0x080033d9
 8003340:	080033df 	.word	0x080033df
 8003344:	080033df 	.word	0x080033df
 8003348:	080033df 	.word	0x080033df
 800334c:	080033df 	.word	0x080033df
 8003350:	080033df 	.word	0x080033df
 8003354:	080033df 	.word	0x080033df
 8003358:	080033df 	.word	0x080033df
 800335c:	080033df 	.word	0x080033df
 8003360:	080033df 	.word	0x080033df
 8003364:	080033df 	.word	0x080033df
 8003368:	080033df 	.word	0x080033df
 800336c:	080033df 	.word	0x080033df
 8003370:	080033df 	.word	0x080033df
 8003374:	0800338d 	.word	0x0800338d
 8003378:	080033a1 	.word	0x080033a1
 800337c:	4a79      	ldr	r2, [pc, #484]	@ (8003564 <HAL_GPIO_Init+0x2b4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d013      	beq.n	80033aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003382:	e02c      	b.n	80033de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	623b      	str	r3, [r7, #32]
          break;
 800338a:	e029      	b.n	80033e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	3304      	adds	r3, #4
 8003392:	623b      	str	r3, [r7, #32]
          break;
 8003394:	e024      	b.n	80033e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	3308      	adds	r3, #8
 800339c:	623b      	str	r3, [r7, #32]
          break;
 800339e:	e01f      	b.n	80033e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	330c      	adds	r3, #12
 80033a6:	623b      	str	r3, [r7, #32]
          break;
 80033a8:	e01a      	b.n	80033e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d102      	bne.n	80033b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033b2:	2304      	movs	r3, #4
 80033b4:	623b      	str	r3, [r7, #32]
          break;
 80033b6:	e013      	b.n	80033e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d105      	bne.n	80033cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033c0:	2308      	movs	r3, #8
 80033c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69fa      	ldr	r2, [r7, #28]
 80033c8:	611a      	str	r2, [r3, #16]
          break;
 80033ca:	e009      	b.n	80033e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033cc:	2308      	movs	r3, #8
 80033ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69fa      	ldr	r2, [r7, #28]
 80033d4:	615a      	str	r2, [r3, #20]
          break;
 80033d6:	e003      	b.n	80033e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80033d8:	2300      	movs	r3, #0
 80033da:	623b      	str	r3, [r7, #32]
          break;
 80033dc:	e000      	b.n	80033e0 <HAL_GPIO_Init+0x130>
          break;
 80033de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	2bff      	cmp	r3, #255	@ 0xff
 80033e4:	d801      	bhi.n	80033ea <HAL_GPIO_Init+0x13a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	e001      	b.n	80033ee <HAL_GPIO_Init+0x13e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3304      	adds	r3, #4
 80033ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	2bff      	cmp	r3, #255	@ 0xff
 80033f4:	d802      	bhi.n	80033fc <HAL_GPIO_Init+0x14c>
 80033f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	e002      	b.n	8003402 <HAL_GPIO_Init+0x152>
 80033fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fe:	3b08      	subs	r3, #8
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	210f      	movs	r1, #15
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	fa01 f303 	lsl.w	r3, r1, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	401a      	ands	r2, r3
 8003414:	6a39      	ldr	r1, [r7, #32]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	fa01 f303 	lsl.w	r3, r1, r3
 800341c:	431a      	orrs	r2, r3
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 80b1 	beq.w	8003592 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003430:	4b4d      	ldr	r3, [pc, #308]	@ (8003568 <HAL_GPIO_Init+0x2b8>)
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	4a4c      	ldr	r2, [pc, #304]	@ (8003568 <HAL_GPIO_Init+0x2b8>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	6193      	str	r3, [r2, #24]
 800343c:	4b4a      	ldr	r3, [pc, #296]	@ (8003568 <HAL_GPIO_Init+0x2b8>)
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003448:	4a48      	ldr	r2, [pc, #288]	@ (800356c <HAL_GPIO_Init+0x2bc>)
 800344a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344c:	089b      	lsrs	r3, r3, #2
 800344e:	3302      	adds	r3, #2
 8003450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003454:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003458:	f003 0303 	and.w	r3, r3, #3
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	220f      	movs	r2, #15
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4013      	ands	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a40      	ldr	r2, [pc, #256]	@ (8003570 <HAL_GPIO_Init+0x2c0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d013      	beq.n	800349c <HAL_GPIO_Init+0x1ec>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a3f      	ldr	r2, [pc, #252]	@ (8003574 <HAL_GPIO_Init+0x2c4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00d      	beq.n	8003498 <HAL_GPIO_Init+0x1e8>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a3e      	ldr	r2, [pc, #248]	@ (8003578 <HAL_GPIO_Init+0x2c8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d007      	beq.n	8003494 <HAL_GPIO_Init+0x1e4>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a3d      	ldr	r2, [pc, #244]	@ (800357c <HAL_GPIO_Init+0x2cc>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d101      	bne.n	8003490 <HAL_GPIO_Init+0x1e0>
 800348c:	2303      	movs	r3, #3
 800348e:	e006      	b.n	800349e <HAL_GPIO_Init+0x1ee>
 8003490:	2304      	movs	r3, #4
 8003492:	e004      	b.n	800349e <HAL_GPIO_Init+0x1ee>
 8003494:	2302      	movs	r3, #2
 8003496:	e002      	b.n	800349e <HAL_GPIO_Init+0x1ee>
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <HAL_GPIO_Init+0x1ee>
 800349c:	2300      	movs	r3, #0
 800349e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034a0:	f002 0203 	and.w	r2, r2, #3
 80034a4:	0092      	lsls	r2, r2, #2
 80034a6:	4093      	lsls	r3, r2
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80034ae:	492f      	ldr	r1, [pc, #188]	@ (800356c <HAL_GPIO_Init+0x2bc>)
 80034b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b2:	089b      	lsrs	r3, r3, #2
 80034b4:	3302      	adds	r3, #2
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d006      	beq.n	80034d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80034c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003580 <HAL_GPIO_Init+0x2d0>)
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	492c      	ldr	r1, [pc, #176]	@ (8003580 <HAL_GPIO_Init+0x2d0>)
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	608b      	str	r3, [r1, #8]
 80034d4:	e006      	b.n	80034e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80034d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003580 <HAL_GPIO_Init+0x2d0>)
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	43db      	mvns	r3, r3
 80034de:	4928      	ldr	r1, [pc, #160]	@ (8003580 <HAL_GPIO_Init+0x2d0>)
 80034e0:	4013      	ands	r3, r2
 80034e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d006      	beq.n	80034fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80034f0:	4b23      	ldr	r3, [pc, #140]	@ (8003580 <HAL_GPIO_Init+0x2d0>)
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	4922      	ldr	r1, [pc, #136]	@ (8003580 <HAL_GPIO_Init+0x2d0>)
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	60cb      	str	r3, [r1, #12]
 80034fc:	e006      	b.n	800350c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80034fe:	4b20      	ldr	r3, [pc, #128]	@ (8003580 <HAL_GPIO_Init+0x2d0>)
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	43db      	mvns	r3, r3
 8003506:	491e      	ldr	r1, [pc, #120]	@ (8003580 <HAL_GPIO_Init+0x2d0>)
 8003508:	4013      	ands	r3, r2
 800350a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d006      	beq.n	8003526 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003518:	4b19      	ldr	r3, [pc, #100]	@ (8003580 <HAL_GPIO_Init+0x2d0>)
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	4918      	ldr	r1, [pc, #96]	@ (8003580 <HAL_GPIO_Init+0x2d0>)
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	4313      	orrs	r3, r2
 8003522:	604b      	str	r3, [r1, #4]
 8003524:	e006      	b.n	8003534 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003526:	4b16      	ldr	r3, [pc, #88]	@ (8003580 <HAL_GPIO_Init+0x2d0>)
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	43db      	mvns	r3, r3
 800352e:	4914      	ldr	r1, [pc, #80]	@ (8003580 <HAL_GPIO_Init+0x2d0>)
 8003530:	4013      	ands	r3, r2
 8003532:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d021      	beq.n	8003584 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003540:	4b0f      	ldr	r3, [pc, #60]	@ (8003580 <HAL_GPIO_Init+0x2d0>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	490e      	ldr	r1, [pc, #56]	@ (8003580 <HAL_GPIO_Init+0x2d0>)
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	4313      	orrs	r3, r2
 800354a:	600b      	str	r3, [r1, #0]
 800354c:	e021      	b.n	8003592 <HAL_GPIO_Init+0x2e2>
 800354e:	bf00      	nop
 8003550:	10320000 	.word	0x10320000
 8003554:	10310000 	.word	0x10310000
 8003558:	10220000 	.word	0x10220000
 800355c:	10210000 	.word	0x10210000
 8003560:	10120000 	.word	0x10120000
 8003564:	10110000 	.word	0x10110000
 8003568:	40021000 	.word	0x40021000
 800356c:	40010000 	.word	0x40010000
 8003570:	40010800 	.word	0x40010800
 8003574:	40010c00 	.word	0x40010c00
 8003578:	40011000 	.word	0x40011000
 800357c:	40011400 	.word	0x40011400
 8003580:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003584:	4b0b      	ldr	r3, [pc, #44]	@ (80035b4 <HAL_GPIO_Init+0x304>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	43db      	mvns	r3, r3
 800358c:	4909      	ldr	r1, [pc, #36]	@ (80035b4 <HAL_GPIO_Init+0x304>)
 800358e:	4013      	ands	r3, r2
 8003590:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003594:	3301      	adds	r3, #1
 8003596:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359e:	fa22 f303 	lsr.w	r3, r2, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f47f ae8e 	bne.w	80032c4 <HAL_GPIO_Init+0x14>
  }
}
 80035a8:	bf00      	nop
 80035aa:	bf00      	nop
 80035ac:	372c      	adds	r7, #44	@ 0x2c
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr
 80035b4:	40010400 	.word	0x40010400

080035b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	807b      	strh	r3, [r7, #2]
 80035c4:	4613      	mov	r3, r2
 80035c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035c8:	787b      	ldrb	r3, [r7, #1]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035ce:	887a      	ldrh	r2, [r7, #2]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80035d4:	e003      	b.n	80035de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035d6:	887b      	ldrh	r3, [r7, #2]
 80035d8:	041a      	lsls	r2, r3, #16
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	611a      	str	r2, [r3, #16]
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr

080035e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035f2:	4b08      	ldr	r3, [pc, #32]	@ (8003614 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035f4:	695a      	ldr	r2, [r3, #20]
 80035f6:	88fb      	ldrh	r3, [r7, #6]
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d006      	beq.n	800360c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035fe:	4a05      	ldr	r2, [pc, #20]	@ (8003614 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003600:	88fb      	ldrh	r3, [r7, #6]
 8003602:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	4618      	mov	r0, r3
 8003608:	f000 f806 	bl	8003618 <HAL_GPIO_EXTI_Callback>
  }
}
 800360c:	bf00      	nop
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40010400 	.word	0x40010400

08003618 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr

0800362c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e272      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 8087 	beq.w	800375a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800364c:	4b92      	ldr	r3, [pc, #584]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f003 030c 	and.w	r3, r3, #12
 8003654:	2b04      	cmp	r3, #4
 8003656:	d00c      	beq.n	8003672 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003658:	4b8f      	ldr	r3, [pc, #572]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f003 030c 	and.w	r3, r3, #12
 8003660:	2b08      	cmp	r3, #8
 8003662:	d112      	bne.n	800368a <HAL_RCC_OscConfig+0x5e>
 8003664:	4b8c      	ldr	r3, [pc, #560]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800366c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003670:	d10b      	bne.n	800368a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003672:	4b89      	ldr	r3, [pc, #548]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d06c      	beq.n	8003758 <HAL_RCC_OscConfig+0x12c>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d168      	bne.n	8003758 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e24c      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003692:	d106      	bne.n	80036a2 <HAL_RCC_OscConfig+0x76>
 8003694:	4b80      	ldr	r3, [pc, #512]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a7f      	ldr	r2, [pc, #508]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 800369a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	e02e      	b.n	8003700 <HAL_RCC_OscConfig+0xd4>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x98>
 80036aa:	4b7b      	ldr	r3, [pc, #492]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a7a      	ldr	r2, [pc, #488]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80036b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	4b78      	ldr	r3, [pc, #480]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a77      	ldr	r2, [pc, #476]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80036bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e01d      	b.n	8003700 <HAL_RCC_OscConfig+0xd4>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036cc:	d10c      	bne.n	80036e8 <HAL_RCC_OscConfig+0xbc>
 80036ce:	4b72      	ldr	r3, [pc, #456]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a71      	ldr	r2, [pc, #452]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80036d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	4b6f      	ldr	r3, [pc, #444]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a6e      	ldr	r2, [pc, #440]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80036e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	e00b      	b.n	8003700 <HAL_RCC_OscConfig+0xd4>
 80036e8:	4b6b      	ldr	r3, [pc, #428]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a6a      	ldr	r2, [pc, #424]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80036ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	4b68      	ldr	r3, [pc, #416]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a67      	ldr	r2, [pc, #412]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80036fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d013      	beq.n	8003730 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003708:	f7ff facc 	bl	8002ca4 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003710:	f7ff fac8 	bl	8002ca4 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	@ 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e200      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	4b5d      	ldr	r3, [pc, #372]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0xe4>
 800372e:	e014      	b.n	800375a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003730:	f7ff fab8 	bl	8002ca4 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003738:	f7ff fab4 	bl	8002ca4 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b64      	cmp	r3, #100	@ 0x64
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e1ec      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374a:	4b53      	ldr	r3, [pc, #332]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f0      	bne.n	8003738 <HAL_RCC_OscConfig+0x10c>
 8003756:	e000      	b.n	800375a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d063      	beq.n	800382e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003766:	4b4c      	ldr	r3, [pc, #304]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00b      	beq.n	800378a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003772:	4b49      	ldr	r3, [pc, #292]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f003 030c 	and.w	r3, r3, #12
 800377a:	2b08      	cmp	r3, #8
 800377c:	d11c      	bne.n	80037b8 <HAL_RCC_OscConfig+0x18c>
 800377e:	4b46      	ldr	r3, [pc, #280]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d116      	bne.n	80037b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378a:	4b43      	ldr	r3, [pc, #268]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d005      	beq.n	80037a2 <HAL_RCC_OscConfig+0x176>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d001      	beq.n	80037a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e1c0      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	4939      	ldr	r1, [pc, #228]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b6:	e03a      	b.n	800382e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d020      	beq.n	8003802 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037c0:	4b36      	ldr	r3, [pc, #216]	@ (800389c <HAL_RCC_OscConfig+0x270>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c6:	f7ff fa6d 	bl	8002ca4 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ce:	f7ff fa69 	bl	8002ca4 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e1a1      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ec:	4b2a      	ldr	r3, [pc, #168]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4927      	ldr	r1, [pc, #156]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	600b      	str	r3, [r1, #0]
 8003800:	e015      	b.n	800382e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003802:	4b26      	ldr	r3, [pc, #152]	@ (800389c <HAL_RCC_OscConfig+0x270>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003808:	f7ff fa4c 	bl	8002ca4 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003810:	f7ff fa48 	bl	8002ca4 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e180      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003822:	4b1d      	ldr	r3, [pc, #116]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d03a      	beq.n	80038b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d019      	beq.n	8003876 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003842:	4b17      	ldr	r3, [pc, #92]	@ (80038a0 <HAL_RCC_OscConfig+0x274>)
 8003844:	2201      	movs	r2, #1
 8003846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003848:	f7ff fa2c 	bl	8002ca4 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003850:	f7ff fa28 	bl	8002ca4 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e160      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003862:	4b0d      	ldr	r3, [pc, #52]	@ (8003898 <HAL_RCC_OscConfig+0x26c>)
 8003864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0f0      	beq.n	8003850 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800386e:	2001      	movs	r0, #1
 8003870:	f000 face 	bl	8003e10 <RCC_Delay>
 8003874:	e01c      	b.n	80038b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003876:	4b0a      	ldr	r3, [pc, #40]	@ (80038a0 <HAL_RCC_OscConfig+0x274>)
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800387c:	f7ff fa12 	bl	8002ca4 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003882:	e00f      	b.n	80038a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003884:	f7ff fa0e 	bl	8002ca4 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d908      	bls.n	80038a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e146      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
 8003896:	bf00      	nop
 8003898:	40021000 	.word	0x40021000
 800389c:	42420000 	.word	0x42420000
 80038a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a4:	4b92      	ldr	r3, [pc, #584]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 80038a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1e9      	bne.n	8003884 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 80a6 	beq.w	8003a0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038be:	2300      	movs	r3, #0
 80038c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038c2:	4b8b      	ldr	r3, [pc, #556]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10d      	bne.n	80038ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ce:	4b88      	ldr	r3, [pc, #544]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	4a87      	ldr	r2, [pc, #540]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 80038d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038d8:	61d3      	str	r3, [r2, #28]
 80038da:	4b85      	ldr	r3, [pc, #532]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038e2:	60bb      	str	r3, [r7, #8]
 80038e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e6:	2301      	movs	r3, #1
 80038e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ea:	4b82      	ldr	r3, [pc, #520]	@ (8003af4 <HAL_RCC_OscConfig+0x4c8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d118      	bne.n	8003928 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038f6:	4b7f      	ldr	r3, [pc, #508]	@ (8003af4 <HAL_RCC_OscConfig+0x4c8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a7e      	ldr	r2, [pc, #504]	@ (8003af4 <HAL_RCC_OscConfig+0x4c8>)
 80038fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003902:	f7ff f9cf 	bl	8002ca4 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800390a:	f7ff f9cb 	bl	8002ca4 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b64      	cmp	r3, #100	@ 0x64
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e103      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391c:	4b75      	ldr	r3, [pc, #468]	@ (8003af4 <HAL_RCC_OscConfig+0x4c8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d106      	bne.n	800393e <HAL_RCC_OscConfig+0x312>
 8003930:	4b6f      	ldr	r3, [pc, #444]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	4a6e      	ldr	r2, [pc, #440]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	6213      	str	r3, [r2, #32]
 800393c:	e02d      	b.n	800399a <HAL_RCC_OscConfig+0x36e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10c      	bne.n	8003960 <HAL_RCC_OscConfig+0x334>
 8003946:	4b6a      	ldr	r3, [pc, #424]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	4a69      	ldr	r2, [pc, #420]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 800394c:	f023 0301 	bic.w	r3, r3, #1
 8003950:	6213      	str	r3, [r2, #32]
 8003952:	4b67      	ldr	r3, [pc, #412]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	4a66      	ldr	r2, [pc, #408]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003958:	f023 0304 	bic.w	r3, r3, #4
 800395c:	6213      	str	r3, [r2, #32]
 800395e:	e01c      	b.n	800399a <HAL_RCC_OscConfig+0x36e>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	2b05      	cmp	r3, #5
 8003966:	d10c      	bne.n	8003982 <HAL_RCC_OscConfig+0x356>
 8003968:	4b61      	ldr	r3, [pc, #388]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	4a60      	ldr	r2, [pc, #384]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 800396e:	f043 0304 	orr.w	r3, r3, #4
 8003972:	6213      	str	r3, [r2, #32]
 8003974:	4b5e      	ldr	r3, [pc, #376]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	4a5d      	ldr	r2, [pc, #372]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	6213      	str	r3, [r2, #32]
 8003980:	e00b      	b.n	800399a <HAL_RCC_OscConfig+0x36e>
 8003982:	4b5b      	ldr	r3, [pc, #364]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	4a5a      	ldr	r2, [pc, #360]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003988:	f023 0301 	bic.w	r3, r3, #1
 800398c:	6213      	str	r3, [r2, #32]
 800398e:	4b58      	ldr	r3, [pc, #352]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	4a57      	ldr	r2, [pc, #348]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003994:	f023 0304 	bic.w	r3, r3, #4
 8003998:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d015      	beq.n	80039ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a2:	f7ff f97f 	bl	8002ca4 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a8:	e00a      	b.n	80039c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039aa:	f7ff f97b 	bl	8002ca4 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e0b1      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c0:	4b4b      	ldr	r3, [pc, #300]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0ee      	beq.n	80039aa <HAL_RCC_OscConfig+0x37e>
 80039cc:	e014      	b.n	80039f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ce:	f7ff f969 	bl	8002ca4 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d4:	e00a      	b.n	80039ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d6:	f7ff f965 	bl	8002ca4 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e09b      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ec:	4b40      	ldr	r3, [pc, #256]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1ee      	bne.n	80039d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d105      	bne.n	8003a0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039fe:	4b3c      	ldr	r3, [pc, #240]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	4a3b      	ldr	r2, [pc, #236]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003a04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 8087 	beq.w	8003b22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a14:	4b36      	ldr	r3, [pc, #216]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 030c 	and.w	r3, r3, #12
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d061      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d146      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a28:	4b33      	ldr	r3, [pc, #204]	@ (8003af8 <HAL_RCC_OscConfig+0x4cc>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2e:	f7ff f939 	bl	8002ca4 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a36:	f7ff f935 	bl	8002ca4 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e06d      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a48:	4b29      	ldr	r3, [pc, #164]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1f0      	bne.n	8003a36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a5c:	d108      	bne.n	8003a70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a5e:	4b24      	ldr	r3, [pc, #144]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	4921      	ldr	r1, [pc, #132]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a70:	4b1f      	ldr	r3, [pc, #124]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a19      	ldr	r1, [r3, #32]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a80:	430b      	orrs	r3, r1
 8003a82:	491b      	ldr	r1, [pc, #108]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a88:	4b1b      	ldr	r3, [pc, #108]	@ (8003af8 <HAL_RCC_OscConfig+0x4cc>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8e:	f7ff f909 	bl	8002ca4 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a96:	f7ff f905 	bl	8002ca4 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e03d      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aa8:	4b11      	ldr	r3, [pc, #68]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f0      	beq.n	8003a96 <HAL_RCC_OscConfig+0x46a>
 8003ab4:	e035      	b.n	8003b22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab6:	4b10      	ldr	r3, [pc, #64]	@ (8003af8 <HAL_RCC_OscConfig+0x4cc>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abc:	f7ff f8f2 	bl	8002ca4 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac4:	f7ff f8ee 	bl	8002ca4 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e026      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ad6:	4b06      	ldr	r3, [pc, #24]	@ (8003af0 <HAL_RCC_OscConfig+0x4c4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f0      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x498>
 8003ae2:	e01e      	b.n	8003b22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d107      	bne.n	8003afc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e019      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
 8003af0:	40021000 	.word	0x40021000
 8003af4:	40007000 	.word	0x40007000
 8003af8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003afc:	4b0b      	ldr	r3, [pc, #44]	@ (8003b2c <HAL_RCC_OscConfig+0x500>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d106      	bne.n	8003b1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d001      	beq.n	8003b22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40021000 	.word	0x40021000

08003b30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e0d0      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b44:	4b6a      	ldr	r3, [pc, #424]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d910      	bls.n	8003b74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b52:	4b67      	ldr	r3, [pc, #412]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f023 0207 	bic.w	r2, r3, #7
 8003b5a:	4965      	ldr	r1, [pc, #404]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b62:	4b63      	ldr	r3, [pc, #396]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d001      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0b8      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d020      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b8c:	4b59      	ldr	r3, [pc, #356]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	4a58      	ldr	r2, [pc, #352]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ba4:	4b53      	ldr	r3, [pc, #332]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	4a52      	ldr	r2, [pc, #328]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003baa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003bae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb0:	4b50      	ldr	r3, [pc, #320]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	494d      	ldr	r1, [pc, #308]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d040      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d107      	bne.n	8003be6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd6:	4b47      	ldr	r3, [pc, #284]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d115      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e07f      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d107      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bee:	4b41      	ldr	r3, [pc, #260]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d109      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e073      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e06b      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c0e:	4b39      	ldr	r3, [pc, #228]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f023 0203 	bic.w	r2, r3, #3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	4936      	ldr	r1, [pc, #216]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c20:	f7ff f840 	bl	8002ca4 <HAL_GetTick>
 8003c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c28:	f7ff f83c 	bl	8002ca4 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e053      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 020c 	and.w	r2, r3, #12
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d1eb      	bne.n	8003c28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c50:	4b27      	ldr	r3, [pc, #156]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d210      	bcs.n	8003c80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5e:	4b24      	ldr	r3, [pc, #144]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f023 0207 	bic.w	r2, r3, #7
 8003c66:	4922      	ldr	r1, [pc, #136]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6e:	4b20      	ldr	r3, [pc, #128]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d001      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e032      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d008      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c8c:	4b19      	ldr	r3, [pc, #100]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	4916      	ldr	r1, [pc, #88]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d009      	beq.n	8003cbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003caa:	4b12      	ldr	r3, [pc, #72]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	490e      	ldr	r1, [pc, #56]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cbe:	f000 f821 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	091b      	lsrs	r3, r3, #4
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	490a      	ldr	r1, [pc, #40]	@ (8003cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cd0:	5ccb      	ldrb	r3, [r1, r3]
 8003cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd6:	4a09      	ldr	r2, [pc, #36]	@ (8003cfc <HAL_RCC_ClockConfig+0x1cc>)
 8003cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cda:	4b09      	ldr	r3, [pc, #36]	@ (8003d00 <HAL_RCC_ClockConfig+0x1d0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fe ff9e 	bl	8002c20 <HAL_InitTick>

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40022000 	.word	0x40022000
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	08007288 	.word	0x08007288
 8003cfc:	20000000 	.word	0x20000000
 8003d00:	20000004 	.word	0x20000004

08003d04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	2300      	movs	r3, #0
 8003d18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f003 030c 	and.w	r3, r3, #12
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d002      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0x30>
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d003      	beq.n	8003d3a <HAL_RCC_GetSysClockFreq+0x36>
 8003d32:	e027      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d34:	4b19      	ldr	r3, [pc, #100]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x98>)
 8003d36:	613b      	str	r3, [r7, #16]
      break;
 8003d38:	e027      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	0c9b      	lsrs	r3, r3, #18
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	4a17      	ldr	r2, [pc, #92]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d44:	5cd3      	ldrb	r3, [r2, r3]
 8003d46:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d010      	beq.n	8003d74 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d52:	4b11      	ldr	r3, [pc, #68]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	0c5b      	lsrs	r3, r3, #17
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	4a11      	ldr	r2, [pc, #68]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d5e:	5cd3      	ldrb	r3, [r2, r3]
 8003d60:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a0d      	ldr	r2, [pc, #52]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x98>)
 8003d66:	fb03 f202 	mul.w	r2, r3, r2
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	e004      	b.n	8003d7e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a0c      	ldr	r2, [pc, #48]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d78:	fb02 f303 	mul.w	r3, r2, r3
 8003d7c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	613b      	str	r3, [r7, #16]
      break;
 8003d82:	e002      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d84:	4b05      	ldr	r3, [pc, #20]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x98>)
 8003d86:	613b      	str	r3, [r7, #16]
      break;
 8003d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d8a:	693b      	ldr	r3, [r7, #16]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	371c      	adds	r7, #28
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	007a1200 	.word	0x007a1200
 8003da0:	080072a0 	.word	0x080072a0
 8003da4:	080072b0 	.word	0x080072b0
 8003da8:	003d0900 	.word	0x003d0900

08003dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db0:	4b02      	ldr	r3, [pc, #8]	@ (8003dbc <HAL_RCC_GetHCLKFreq+0x10>)
 8003db2:	681b      	ldr	r3, [r3, #0]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr
 8003dbc:	20000000 	.word	0x20000000

08003dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dc4:	f7ff fff2 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	4b05      	ldr	r3, [pc, #20]	@ (8003de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	0a1b      	lsrs	r3, r3, #8
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	4903      	ldr	r1, [pc, #12]	@ (8003de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dd6:	5ccb      	ldrb	r3, [r1, r3]
 8003dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40021000 	.word	0x40021000
 8003de4:	08007298 	.word	0x08007298

08003de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dec:	f7ff ffde 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003df0:	4602      	mov	r2, r0
 8003df2:	4b05      	ldr	r3, [pc, #20]	@ (8003e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	0adb      	lsrs	r3, r3, #11
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	4903      	ldr	r1, [pc, #12]	@ (8003e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dfe:	5ccb      	ldrb	r3, [r1, r3]
 8003e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	08007298 	.word	0x08007298

08003e10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e18:	4b0a      	ldr	r3, [pc, #40]	@ (8003e44 <RCC_Delay+0x34>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8003e48 <RCC_Delay+0x38>)
 8003e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e22:	0a5b      	lsrs	r3, r3, #9
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	fb02 f303 	mul.w	r3, r2, r3
 8003e2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e2c:	bf00      	nop
  }
  while (Delay --);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1e5a      	subs	r2, r3, #1
 8003e32:	60fa      	str	r2, [r7, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1f9      	bne.n	8003e2c <RCC_Delay+0x1c>
}
 8003e38:	bf00      	nop
 8003e3a:	bf00      	nop
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr
 8003e44:	20000000 	.word	0x20000000
 8003e48:	10624dd3 	.word	0x10624dd3

08003e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e041      	b.n	8003ee2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fe fccc 	bl	8002810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3304      	adds	r3, #4
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	f000 faa8 	bl	80043e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b082      	sub	sp, #8
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e041      	b.n	8003f80 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d106      	bne.n	8003f16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7fe fc9b 	bl	800284c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2202      	movs	r2, #2
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3304      	adds	r3, #4
 8003f26:	4619      	mov	r1, r3
 8003f28:	4610      	mov	r0, r2
 8003f2a:	f000 fa59 	bl	80043e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d109      	bne.n	8003fac <HAL_TIM_PWM_Start+0x24>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	bf14      	ite	ne
 8003fa4:	2301      	movne	r3, #1
 8003fa6:	2300      	moveq	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	e022      	b.n	8003ff2 <HAL_TIM_PWM_Start+0x6a>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d109      	bne.n	8003fc6 <HAL_TIM_PWM_Start+0x3e>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	bf14      	ite	ne
 8003fbe:	2301      	movne	r3, #1
 8003fc0:	2300      	moveq	r3, #0
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	e015      	b.n	8003ff2 <HAL_TIM_PWM_Start+0x6a>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d109      	bne.n	8003fe0 <HAL_TIM_PWM_Start+0x58>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	bf14      	ite	ne
 8003fd8:	2301      	movne	r3, #1
 8003fda:	2300      	moveq	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	e008      	b.n	8003ff2 <HAL_TIM_PWM_Start+0x6a>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	bf14      	ite	ne
 8003fec:	2301      	movne	r3, #1
 8003fee:	2300      	moveq	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e05e      	b.n	80040b8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d104      	bne.n	800400a <HAL_TIM_PWM_Start+0x82>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004008:	e013      	b.n	8004032 <HAL_TIM_PWM_Start+0xaa>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b04      	cmp	r3, #4
 800400e:	d104      	bne.n	800401a <HAL_TIM_PWM_Start+0x92>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004018:	e00b      	b.n	8004032 <HAL_TIM_PWM_Start+0xaa>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b08      	cmp	r3, #8
 800401e:	d104      	bne.n	800402a <HAL_TIM_PWM_Start+0xa2>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004028:	e003      	b.n	8004032 <HAL_TIM_PWM_Start+0xaa>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2202      	movs	r2, #2
 800402e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2201      	movs	r2, #1
 8004038:	6839      	ldr	r1, [r7, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fc5c 	bl	80048f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a1e      	ldr	r2, [pc, #120]	@ (80040c0 <HAL_TIM_PWM_Start+0x138>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d107      	bne.n	800405a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004058:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a18      	ldr	r2, [pc, #96]	@ (80040c0 <HAL_TIM_PWM_Start+0x138>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d00e      	beq.n	8004082 <HAL_TIM_PWM_Start+0xfa>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800406c:	d009      	beq.n	8004082 <HAL_TIM_PWM_Start+0xfa>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a14      	ldr	r2, [pc, #80]	@ (80040c4 <HAL_TIM_PWM_Start+0x13c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d004      	beq.n	8004082 <HAL_TIM_PWM_Start+0xfa>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a12      	ldr	r2, [pc, #72]	@ (80040c8 <HAL_TIM_PWM_Start+0x140>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d111      	bne.n	80040a6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2b06      	cmp	r3, #6
 8004092:	d010      	beq.n	80040b6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a4:	e007      	b.n	80040b6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f042 0201 	orr.w	r2, r2, #1
 80040b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40012c00 	.word	0x40012c00
 80040c4:	40000400 	.word	0x40000400
 80040c8:	40000800 	.word	0x40000800

080040cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e0ae      	b.n	8004248 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b0c      	cmp	r3, #12
 80040f6:	f200 809f 	bhi.w	8004238 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80040fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004100 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004100:	08004135 	.word	0x08004135
 8004104:	08004239 	.word	0x08004239
 8004108:	08004239 	.word	0x08004239
 800410c:	08004239 	.word	0x08004239
 8004110:	08004175 	.word	0x08004175
 8004114:	08004239 	.word	0x08004239
 8004118:	08004239 	.word	0x08004239
 800411c:	08004239 	.word	0x08004239
 8004120:	080041b7 	.word	0x080041b7
 8004124:	08004239 	.word	0x08004239
 8004128:	08004239 	.word	0x08004239
 800412c:	08004239 	.word	0x08004239
 8004130:	080041f7 	.word	0x080041f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68b9      	ldr	r1, [r7, #8]
 800413a:	4618      	mov	r0, r3
 800413c:	f000 f9be 	bl	80044bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699a      	ldr	r2, [r3, #24]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0208 	orr.w	r2, r2, #8
 800414e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0204 	bic.w	r2, r2, #4
 800415e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6999      	ldr	r1, [r3, #24]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	619a      	str	r2, [r3, #24]
      break;
 8004172:	e064      	b.n	800423e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68b9      	ldr	r1, [r7, #8]
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fa04 	bl	8004588 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699a      	ldr	r2, [r3, #24]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800418e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699a      	ldr	r2, [r3, #24]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800419e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6999      	ldr	r1, [r3, #24]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	021a      	lsls	r2, r3, #8
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	619a      	str	r2, [r3, #24]
      break;
 80041b4:	e043      	b.n	800423e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68b9      	ldr	r1, [r7, #8]
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fa4d 	bl	800465c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69da      	ldr	r2, [r3, #28]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0208 	orr.w	r2, r2, #8
 80041d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69da      	ldr	r2, [r3, #28]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0204 	bic.w	r2, r2, #4
 80041e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69d9      	ldr	r1, [r3, #28]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	61da      	str	r2, [r3, #28]
      break;
 80041f4:	e023      	b.n	800423e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68b9      	ldr	r1, [r7, #8]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 fa97 	bl	8004730 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69da      	ldr	r2, [r3, #28]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69d9      	ldr	r1, [r3, #28]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	021a      	lsls	r2, r3, #8
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	61da      	str	r2, [r3, #28]
      break;
 8004236:	e002      	b.n	800423e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	75fb      	strb	r3, [r7, #23]
      break;
 800423c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004246:	7dfb      	ldrb	r3, [r7, #23]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_TIM_ConfigClockSource+0x1c>
 8004268:	2302      	movs	r3, #2
 800426a:	e0b4      	b.n	80043d6 <HAL_TIM_ConfigClockSource+0x186>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800428a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004292:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042a4:	d03e      	beq.n	8004324 <HAL_TIM_ConfigClockSource+0xd4>
 80042a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042aa:	f200 8087 	bhi.w	80043bc <HAL_TIM_ConfigClockSource+0x16c>
 80042ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042b2:	f000 8086 	beq.w	80043c2 <HAL_TIM_ConfigClockSource+0x172>
 80042b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042ba:	d87f      	bhi.n	80043bc <HAL_TIM_ConfigClockSource+0x16c>
 80042bc:	2b70      	cmp	r3, #112	@ 0x70
 80042be:	d01a      	beq.n	80042f6 <HAL_TIM_ConfigClockSource+0xa6>
 80042c0:	2b70      	cmp	r3, #112	@ 0x70
 80042c2:	d87b      	bhi.n	80043bc <HAL_TIM_ConfigClockSource+0x16c>
 80042c4:	2b60      	cmp	r3, #96	@ 0x60
 80042c6:	d050      	beq.n	800436a <HAL_TIM_ConfigClockSource+0x11a>
 80042c8:	2b60      	cmp	r3, #96	@ 0x60
 80042ca:	d877      	bhi.n	80043bc <HAL_TIM_ConfigClockSource+0x16c>
 80042cc:	2b50      	cmp	r3, #80	@ 0x50
 80042ce:	d03c      	beq.n	800434a <HAL_TIM_ConfigClockSource+0xfa>
 80042d0:	2b50      	cmp	r3, #80	@ 0x50
 80042d2:	d873      	bhi.n	80043bc <HAL_TIM_ConfigClockSource+0x16c>
 80042d4:	2b40      	cmp	r3, #64	@ 0x40
 80042d6:	d058      	beq.n	800438a <HAL_TIM_ConfigClockSource+0x13a>
 80042d8:	2b40      	cmp	r3, #64	@ 0x40
 80042da:	d86f      	bhi.n	80043bc <HAL_TIM_ConfigClockSource+0x16c>
 80042dc:	2b30      	cmp	r3, #48	@ 0x30
 80042de:	d064      	beq.n	80043aa <HAL_TIM_ConfigClockSource+0x15a>
 80042e0:	2b30      	cmp	r3, #48	@ 0x30
 80042e2:	d86b      	bhi.n	80043bc <HAL_TIM_ConfigClockSource+0x16c>
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d060      	beq.n	80043aa <HAL_TIM_ConfigClockSource+0x15a>
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d867      	bhi.n	80043bc <HAL_TIM_ConfigClockSource+0x16c>
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d05c      	beq.n	80043aa <HAL_TIM_ConfigClockSource+0x15a>
 80042f0:	2b10      	cmp	r3, #16
 80042f2:	d05a      	beq.n	80043aa <HAL_TIM_ConfigClockSource+0x15a>
 80042f4:	e062      	b.n	80043bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004306:	f000 fad8 	bl	80048ba <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004318:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	609a      	str	r2, [r3, #8]
      break;
 8004322:	e04f      	b.n	80043c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004334:	f000 fac1 	bl	80048ba <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004346:	609a      	str	r2, [r3, #8]
      break;
 8004348:	e03c      	b.n	80043c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004356:	461a      	mov	r2, r3
 8004358:	f000 fa38 	bl	80047cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2150      	movs	r1, #80	@ 0x50
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fa8f 	bl	8004886 <TIM_ITRx_SetConfig>
      break;
 8004368:	e02c      	b.n	80043c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004376:	461a      	mov	r2, r3
 8004378:	f000 fa56 	bl	8004828 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2160      	movs	r1, #96	@ 0x60
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fa7f 	bl	8004886 <TIM_ITRx_SetConfig>
      break;
 8004388:	e01c      	b.n	80043c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004396:	461a      	mov	r2, r3
 8004398:	f000 fa18 	bl	80047cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2140      	movs	r1, #64	@ 0x40
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fa6f 	bl	8004886 <TIM_ITRx_SetConfig>
      break;
 80043a8:	e00c      	b.n	80043c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4619      	mov	r1, r3
 80043b4:	4610      	mov	r0, r2
 80043b6:	f000 fa66 	bl	8004886 <TIM_ITRx_SetConfig>
      break;
 80043ba:	e003      	b.n	80043c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	73fb      	strb	r3, [r7, #15]
      break;
 80043c0:	e000      	b.n	80043c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a2f      	ldr	r2, [pc, #188]	@ (80044b0 <TIM_Base_SetConfig+0xd0>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00b      	beq.n	8004410 <TIM_Base_SetConfig+0x30>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043fe:	d007      	beq.n	8004410 <TIM_Base_SetConfig+0x30>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a2c      	ldr	r2, [pc, #176]	@ (80044b4 <TIM_Base_SetConfig+0xd4>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d003      	beq.n	8004410 <TIM_Base_SetConfig+0x30>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a2b      	ldr	r2, [pc, #172]	@ (80044b8 <TIM_Base_SetConfig+0xd8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d108      	bne.n	8004422 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	4313      	orrs	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a22      	ldr	r2, [pc, #136]	@ (80044b0 <TIM_Base_SetConfig+0xd0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00b      	beq.n	8004442 <TIM_Base_SetConfig+0x62>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004430:	d007      	beq.n	8004442 <TIM_Base_SetConfig+0x62>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a1f      	ldr	r2, [pc, #124]	@ (80044b4 <TIM_Base_SetConfig+0xd4>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d003      	beq.n	8004442 <TIM_Base_SetConfig+0x62>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a1e      	ldr	r2, [pc, #120]	@ (80044b8 <TIM_Base_SetConfig+0xd8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d108      	bne.n	8004454 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a0d      	ldr	r2, [pc, #52]	@ (80044b0 <TIM_Base_SetConfig+0xd0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d103      	bne.n	8004488 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d005      	beq.n	80044a6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f023 0201 	bic.w	r2, r3, #1
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	611a      	str	r2, [r3, #16]
  }
}
 80044a6:	bf00      	nop
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr
 80044b0:	40012c00 	.word	0x40012c00
 80044b4:	40000400 	.word	0x40000400
 80044b8:	40000800 	.word	0x40000800

080044bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	f023 0201 	bic.w	r2, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 0303 	bic.w	r3, r3, #3
 80044f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f023 0302 	bic.w	r3, r3, #2
 8004504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	4313      	orrs	r3, r2
 800450e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a1c      	ldr	r2, [pc, #112]	@ (8004584 <TIM_OC1_SetConfig+0xc8>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d10c      	bne.n	8004532 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f023 0308 	bic.w	r3, r3, #8
 800451e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f023 0304 	bic.w	r3, r3, #4
 8004530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a13      	ldr	r2, [pc, #76]	@ (8004584 <TIM_OC1_SetConfig+0xc8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d111      	bne.n	800455e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	621a      	str	r2, [r3, #32]
}
 8004578:	bf00      	nop
 800457a:	371c      	adds	r7, #28
 800457c:	46bd      	mov	sp, r7
 800457e:	bc80      	pop	{r7}
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40012c00 	.word	0x40012c00

08004588 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	f023 0210 	bic.w	r2, r3, #16
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f023 0320 	bic.w	r3, r3, #32
 80045d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004658 <TIM_OC2_SetConfig+0xd0>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d10d      	bne.n	8004604 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004602:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a14      	ldr	r2, [pc, #80]	@ (8004658 <TIM_OC2_SetConfig+0xd0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d113      	bne.n	8004634 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004612:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800461a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	621a      	str	r2, [r3, #32]
}
 800464e:	bf00      	nop
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr
 8004658:	40012c00 	.word	0x40012c00

0800465c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800468a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0303 	bic.w	r3, r3, #3
 8004692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	021b      	lsls	r3, r3, #8
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a1d      	ldr	r2, [pc, #116]	@ (800472c <TIM_OC3_SetConfig+0xd0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d10d      	bne.n	80046d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	021b      	lsls	r3, r3, #8
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a14      	ldr	r2, [pc, #80]	@ (800472c <TIM_OC3_SetConfig+0xd0>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d113      	bne.n	8004706 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	621a      	str	r2, [r3, #32]
}
 8004720:	bf00      	nop
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	bc80      	pop	{r7}
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40012c00 	.word	0x40012c00

08004730 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800475e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004766:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	021b      	lsls	r3, r3, #8
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800477a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	031b      	lsls	r3, r3, #12
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	4313      	orrs	r3, r2
 8004786:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a0f      	ldr	r2, [pc, #60]	@ (80047c8 <TIM_OC4_SetConfig+0x98>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d109      	bne.n	80047a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004796:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	019b      	lsls	r3, r3, #6
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	621a      	str	r2, [r3, #32]
}
 80047be:	bf00      	nop
 80047c0:	371c      	adds	r7, #28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr
 80047c8:	40012c00 	.word	0x40012c00

080047cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	f023 0201 	bic.w	r2, r3, #1
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f023 030a 	bic.w	r3, r3, #10
 8004808:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	4313      	orrs	r3, r2
 8004810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	621a      	str	r2, [r3, #32]
}
 800481e:	bf00      	nop
 8004820:	371c      	adds	r7, #28
 8004822:	46bd      	mov	sp, r7
 8004824:	bc80      	pop	{r7}
 8004826:	4770      	bx	lr

08004828 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	f023 0210 	bic.w	r2, r3, #16
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	031b      	lsls	r3, r3, #12
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004864:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	011b      	lsls	r3, r3, #4
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	4313      	orrs	r3, r2
 800486e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	621a      	str	r2, [r3, #32]
}
 800487c:	bf00      	nop
 800487e:	371c      	adds	r7, #28
 8004880:	46bd      	mov	sp, r7
 8004882:	bc80      	pop	{r7}
 8004884:	4770      	bx	lr

08004886 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004886:	b480      	push	{r7}
 8004888:	b085      	sub	sp, #20
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
 800488e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800489c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f043 0307 	orr.w	r3, r3, #7
 80048a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	609a      	str	r2, [r3, #8]
}
 80048b0:	bf00      	nop
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bc80      	pop	{r7}
 80048b8:	4770      	bx	lr

080048ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b087      	sub	sp, #28
 80048be:	af00      	add	r7, sp, #0
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	607a      	str	r2, [r7, #4]
 80048c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	021a      	lsls	r2, r3, #8
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	431a      	orrs	r2, r3
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	609a      	str	r2, [r3, #8]
}
 80048ee:	bf00      	nop
 80048f0:	371c      	adds	r7, #28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr

080048f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f003 031f 	and.w	r3, r3, #31
 800490a:	2201      	movs	r2, #1
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a1a      	ldr	r2, [r3, #32]
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	43db      	mvns	r3, r3
 800491a:	401a      	ands	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a1a      	ldr	r2, [r3, #32]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f003 031f 	and.w	r3, r3, #31
 800492a:	6879      	ldr	r1, [r7, #4]
 800492c:	fa01 f303 	lsl.w	r3, r1, r3
 8004930:	431a      	orrs	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	621a      	str	r2, [r3, #32]
}
 8004936:	bf00      	nop
 8004938:	371c      	adds	r7, #28
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr

08004940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004954:	2302      	movs	r3, #2
 8004956:	e046      	b.n	80049e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800497e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a16      	ldr	r2, [pc, #88]	@ (80049f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00e      	beq.n	80049ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049a4:	d009      	beq.n	80049ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a12      	ldr	r2, [pc, #72]	@ (80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d004      	beq.n	80049ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a10      	ldr	r2, [pc, #64]	@ (80049f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d10c      	bne.n	80049d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr
 80049f0:	40012c00 	.word	0x40012c00
 80049f4:	40000400 	.word	0x40000400
 80049f8:	40000800 	.word	0x40000800

080049fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d101      	bne.n	8004a18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a14:	2302      	movs	r3, #2
 8004a16:	e03d      	b.n	8004a94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bc80      	pop	{r7}
 8004a9c:	4770      	bx	lr

08004a9e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b082      	sub	sp, #8
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e042      	b.n	8004b36 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d106      	bne.n	8004aca <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7fd ff49 	bl	800295c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2224      	movs	r2, #36	@ 0x24
 8004ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ae0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fac2 	bl	800506c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691a      	ldr	r2, [r3, #16]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004af6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695a      	ldr	r2, [r3, #20]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b06:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b16:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b08c      	sub	sp, #48	@ 0x30
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	60f8      	str	r0, [r7, #12]
 8004b46:	60b9      	str	r1, [r7, #8]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d146      	bne.n	8004be6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004b5e:	88fb      	ldrh	r3, [r7, #6]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e03f      	b.n	8004be8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004b74:	88fb      	ldrh	r3, [r7, #6]
 8004b76:	461a      	mov	r2, r3
 8004b78:	68b9      	ldr	r1, [r7, #8]
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 f952 	bl	8004e24 <UART_Start_Receive_DMA>
 8004b80:	4603      	mov	r3, r0
 8004b82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d125      	bne.n	8004bda <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b8e:	2300      	movs	r3, #0
 8004b90:	613b      	str	r3, [r7, #16]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	330c      	adds	r3, #12
 8004baa:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	e853 3f00 	ldrex	r3, [r3]
 8004bb2:	617b      	str	r3, [r7, #20]
   return(result);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f043 0310 	orr.w	r3, r3, #16
 8004bba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	330c      	adds	r3, #12
 8004bc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bc4:	627a      	str	r2, [r7, #36]	@ 0x24
 8004bc6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc8:	6a39      	ldr	r1, [r7, #32]
 8004bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bcc:	e841 2300 	strex	r3, r2, [r1]
 8004bd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e5      	bne.n	8004ba4 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8004bd8:	e002      	b.n	8004be0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8004be0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004be4:	e000      	b.n	8004be8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8004be6:	2302      	movs	r3, #2
  }
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3730      	adds	r7, #48	@ 0x30
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bc80      	pop	{r7}
 8004c00:	4770      	bx	lr

08004c02 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr

08004c14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	4770      	bx	lr

08004c26 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b09c      	sub	sp, #112	@ 0x70
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c32:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d172      	bne.n	8004d28 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004c42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c44:	2200      	movs	r2, #0
 8004c46:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	330c      	adds	r3, #12
 8004c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c52:	e853 3f00 	ldrex	r3, [r3]
 8004c56:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c5e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	330c      	adds	r3, #12
 8004c66:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004c68:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004c6a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c70:	e841 2300 	strex	r3, r2, [r1]
 8004c74:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1e5      	bne.n	8004c48 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3314      	adds	r3, #20
 8004c82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c8e:	f023 0301 	bic.w	r3, r3, #1
 8004c92:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3314      	adds	r3, #20
 8004c9a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004c9c:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c9e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ca2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ca4:	e841 2300 	strex	r3, r2, [r1]
 8004ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e5      	bne.n	8004c7c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3314      	adds	r3, #20
 8004cb6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cba:	e853 3f00 	ldrex	r3, [r3]
 8004cbe:	623b      	str	r3, [r7, #32]
   return(result);
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cc6:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3314      	adds	r3, #20
 8004cce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004cd0:	633a      	str	r2, [r7, #48]	@ 0x30
 8004cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cd8:	e841 2300 	strex	r3, r2, [r1]
 8004cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e5      	bne.n	8004cb0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ce4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d119      	bne.n	8004d28 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	330c      	adds	r3, #12
 8004cfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	e853 3f00 	ldrex	r3, [r3]
 8004d02:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0310 	bic.w	r3, r3, #16
 8004d0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	330c      	adds	r3, #12
 8004d12:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004d14:	61fa      	str	r2, [r7, #28]
 8004d16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d18:	69b9      	ldr	r1, [r7, #24]
 8004d1a:	69fa      	ldr	r2, [r7, #28]
 8004d1c:	e841 2300 	strex	r3, r2, [r1]
 8004d20:	617b      	str	r3, [r7, #20]
   return(result);
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1e5      	bne.n	8004cf4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d106      	bne.n	8004d44 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004d3e:	f7fd fb53 	bl	80023e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d42:	e002      	b.n	8004d4a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004d44:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004d46:	f7ff ff53 	bl	8004bf0 <HAL_UART_RxCpltCallback>
}
 8004d4a:	bf00      	nop
 8004d4c:	3770      	adds	r7, #112	@ 0x70
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b084      	sub	sp, #16
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2201      	movs	r2, #1
 8004d64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d108      	bne.n	8004d80 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d72:	085b      	lsrs	r3, r3, #1
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	4619      	mov	r1, r3
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f7fd fb35 	bl	80023e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d7e:	e002      	b.n	8004d86 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f7ff ff3e 	bl	8004c02 <HAL_UART_RxHalfCpltCallback>
}
 8004d86:	bf00      	nop
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	bf14      	ite	ne
 8004dae:	2301      	movne	r3, #1
 8004db0:	2300      	moveq	r3, #0
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b21      	cmp	r3, #33	@ 0x21
 8004dc0:	d108      	bne.n	8004dd4 <UART_DMAError+0x46>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d005      	beq.n	8004dd4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004dce:	68b8      	ldr	r0, [r7, #8]
 8004dd0:	f000 f8c2 	bl	8004f58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	bf14      	ite	ne
 8004de2:	2301      	movne	r3, #1
 8004de4:	2300      	moveq	r3, #0
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b22      	cmp	r3, #34	@ 0x22
 8004df4:	d108      	bne.n	8004e08 <UART_DMAError+0x7a>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d005      	beq.n	8004e08 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004e02:	68b8      	ldr	r0, [r7, #8]
 8004e04:	f000 f8cf 	bl	8004fa6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e0c:	f043 0210 	orr.w	r2, r3, #16
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e14:	68b8      	ldr	r0, [r7, #8]
 8004e16:	f7ff fefd 	bl	8004c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e1a:	bf00      	nop
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
	...

08004e24 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b098      	sub	sp, #96	@ 0x60
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	88fa      	ldrh	r2, [r7, #6]
 8004e3c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2222      	movs	r2, #34	@ 0x22
 8004e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e50:	4a3e      	ldr	r2, [pc, #248]	@ (8004f4c <UART_Start_Receive_DMA+0x128>)
 8004e52:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e58:	4a3d      	ldr	r2, [pc, #244]	@ (8004f50 <UART_Start_Receive_DMA+0x12c>)
 8004e5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e60:	4a3c      	ldr	r2, [pc, #240]	@ (8004f54 <UART_Start_Receive_DMA+0x130>)
 8004e62:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e68:	2200      	movs	r2, #0
 8004e6a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004e6c:	f107 0308 	add.w	r3, r7, #8
 8004e70:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	88fb      	ldrh	r3, [r7, #6]
 8004e84:	f7fe f880 	bl	8002f88 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004e88:	2300      	movs	r3, #0
 8004e8a:	613b      	str	r3, [r7, #16]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	613b      	str	r3, [r7, #16]
 8004e9c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d019      	beq.n	8004eda <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	330c      	adds	r3, #12
 8004eac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ebc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	330c      	adds	r3, #12
 8004ec4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ec6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004ecc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004ed4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e5      	bne.n	8004ea6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3314      	adds	r3, #20
 8004ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eec:	f043 0301 	orr.w	r3, r3, #1
 8004ef0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3314      	adds	r3, #20
 8004ef8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004efa:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004efc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004f00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f02:	e841 2300 	strex	r3, r2, [r1]
 8004f06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e5      	bne.n	8004eda <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3314      	adds	r3, #20
 8004f14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	e853 3f00 	ldrex	r3, [r3]
 8004f1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f24:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3314      	adds	r3, #20
 8004f2c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004f2e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f32:	6a39      	ldr	r1, [r7, #32]
 8004f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e5      	bne.n	8004f0e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3760      	adds	r7, #96	@ 0x60
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	08004c27 	.word	0x08004c27
 8004f50:	08004d53 	.word	0x08004d53
 8004f54:	08004d8f 	.word	0x08004d8f

08004f58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b089      	sub	sp, #36	@ 0x24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	330c      	adds	r3, #12
 8004f66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	e853 3f00 	ldrex	r3, [r3]
 8004f6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004f76:	61fb      	str	r3, [r7, #28]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	330c      	adds	r3, #12
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	61ba      	str	r2, [r7, #24]
 8004f82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	6979      	ldr	r1, [r7, #20]
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	e841 2300 	strex	r3, r2, [r1]
 8004f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1e5      	bne.n	8004f60 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004f9c:	bf00      	nop
 8004f9e:	3724      	adds	r7, #36	@ 0x24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bc80      	pop	{r7}
 8004fa4:	4770      	bx	lr

08004fa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b095      	sub	sp, #84	@ 0x54
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	330c      	adds	r3, #12
 8004fb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fb8:	e853 3f00 	ldrex	r3, [r3]
 8004fbc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	330c      	adds	r3, #12
 8004fcc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004fce:	643a      	str	r2, [r7, #64]	@ 0x40
 8004fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004fd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1e5      	bne.n	8004fae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3314      	adds	r3, #20
 8004fe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	f023 0301 	bic.w	r3, r3, #1
 8004ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3314      	adds	r3, #20
 8005000:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005002:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005004:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005008:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800500a:	e841 2300 	strex	r3, r2, [r1]
 800500e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e5      	bne.n	8004fe2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501a:	2b01      	cmp	r3, #1
 800501c:	d119      	bne.n	8005052 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	330c      	adds	r3, #12
 8005024:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	e853 3f00 	ldrex	r3, [r3]
 800502c:	60bb      	str	r3, [r7, #8]
   return(result);
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f023 0310 	bic.w	r3, r3, #16
 8005034:	647b      	str	r3, [r7, #68]	@ 0x44
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	330c      	adds	r3, #12
 800503c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800503e:	61ba      	str	r2, [r7, #24]
 8005040:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005042:	6979      	ldr	r1, [r7, #20]
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	e841 2300 	strex	r3, r2, [r1]
 800504a:	613b      	str	r3, [r7, #16]
   return(result);
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1e5      	bne.n	800501e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2220      	movs	r2, #32
 8005056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005060:	bf00      	nop
 8005062:	3754      	adds	r7, #84	@ 0x54
 8005064:	46bd      	mov	sp, r7
 8005066:	bc80      	pop	{r7}
 8005068:	4770      	bx	lr
	...

0800506c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689a      	ldr	r2, [r3, #8]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	4313      	orrs	r3, r2
 800509a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80050a6:	f023 030c 	bic.w	r3, r3, #12
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6812      	ldr	r2, [r2, #0]
 80050ae:	68b9      	ldr	r1, [r7, #8]
 80050b0:	430b      	orrs	r3, r1
 80050b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699a      	ldr	r2, [r3, #24]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005180 <UART_SetConfig+0x114>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d103      	bne.n	80050dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80050d4:	f7fe fe88 	bl	8003de8 <HAL_RCC_GetPCLK2Freq>
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	e002      	b.n	80050e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80050dc:	f7fe fe70 	bl	8003dc0 <HAL_RCC_GetPCLK1Freq>
 80050e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	009a      	lsls	r2, r3, #2
 80050ec:	441a      	add	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f8:	4a22      	ldr	r2, [pc, #136]	@ (8005184 <UART_SetConfig+0x118>)
 80050fa:	fba2 2303 	umull	r2, r3, r2, r3
 80050fe:	095b      	lsrs	r3, r3, #5
 8005100:	0119      	lsls	r1, r3, #4
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4613      	mov	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	009a      	lsls	r2, r3, #2
 800510c:	441a      	add	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	fbb2 f2f3 	udiv	r2, r2, r3
 8005118:	4b1a      	ldr	r3, [pc, #104]	@ (8005184 <UART_SetConfig+0x118>)
 800511a:	fba3 0302 	umull	r0, r3, r3, r2
 800511e:	095b      	lsrs	r3, r3, #5
 8005120:	2064      	movs	r0, #100	@ 0x64
 8005122:	fb00 f303 	mul.w	r3, r0, r3
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	011b      	lsls	r3, r3, #4
 800512a:	3332      	adds	r3, #50	@ 0x32
 800512c:	4a15      	ldr	r2, [pc, #84]	@ (8005184 <UART_SetConfig+0x118>)
 800512e:	fba2 2303 	umull	r2, r3, r2, r3
 8005132:	095b      	lsrs	r3, r3, #5
 8005134:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005138:	4419      	add	r1, r3
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4613      	mov	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	009a      	lsls	r2, r3, #2
 8005144:	441a      	add	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005150:	4b0c      	ldr	r3, [pc, #48]	@ (8005184 <UART_SetConfig+0x118>)
 8005152:	fba3 0302 	umull	r0, r3, r3, r2
 8005156:	095b      	lsrs	r3, r3, #5
 8005158:	2064      	movs	r0, #100	@ 0x64
 800515a:	fb00 f303 	mul.w	r3, r0, r3
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	011b      	lsls	r3, r3, #4
 8005162:	3332      	adds	r3, #50	@ 0x32
 8005164:	4a07      	ldr	r2, [pc, #28]	@ (8005184 <UART_SetConfig+0x118>)
 8005166:	fba2 2303 	umull	r2, r3, r2, r3
 800516a:	095b      	lsrs	r3, r3, #5
 800516c:	f003 020f 	and.w	r2, r3, #15
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	440a      	add	r2, r1
 8005176:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005178:	bf00      	nop
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40013800 	.word	0x40013800
 8005184:	51eb851f 	.word	0x51eb851f

08005188 <memset>:
 8005188:	4603      	mov	r3, r0
 800518a:	4402      	add	r2, r0
 800518c:	4293      	cmp	r3, r2
 800518e:	d100      	bne.n	8005192 <memset+0xa>
 8005190:	4770      	bx	lr
 8005192:	f803 1b01 	strb.w	r1, [r3], #1
 8005196:	e7f9      	b.n	800518c <memset+0x4>

08005198 <__errno>:
 8005198:	4b01      	ldr	r3, [pc, #4]	@ (80051a0 <__errno+0x8>)
 800519a:	6818      	ldr	r0, [r3, #0]
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	2000000c 	.word	0x2000000c

080051a4 <__libc_init_array>:
 80051a4:	b570      	push	{r4, r5, r6, lr}
 80051a6:	2600      	movs	r6, #0
 80051a8:	4d0c      	ldr	r5, [pc, #48]	@ (80051dc <__libc_init_array+0x38>)
 80051aa:	4c0d      	ldr	r4, [pc, #52]	@ (80051e0 <__libc_init_array+0x3c>)
 80051ac:	1b64      	subs	r4, r4, r5
 80051ae:	10a4      	asrs	r4, r4, #2
 80051b0:	42a6      	cmp	r6, r4
 80051b2:	d109      	bne.n	80051c8 <__libc_init_array+0x24>
 80051b4:	f002 f85c 	bl	8007270 <_init>
 80051b8:	2600      	movs	r6, #0
 80051ba:	4d0a      	ldr	r5, [pc, #40]	@ (80051e4 <__libc_init_array+0x40>)
 80051bc:	4c0a      	ldr	r4, [pc, #40]	@ (80051e8 <__libc_init_array+0x44>)
 80051be:	1b64      	subs	r4, r4, r5
 80051c0:	10a4      	asrs	r4, r4, #2
 80051c2:	42a6      	cmp	r6, r4
 80051c4:	d105      	bne.n	80051d2 <__libc_init_array+0x2e>
 80051c6:	bd70      	pop	{r4, r5, r6, pc}
 80051c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051cc:	4798      	blx	r3
 80051ce:	3601      	adds	r6, #1
 80051d0:	e7ee      	b.n	80051b0 <__libc_init_array+0xc>
 80051d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d6:	4798      	blx	r3
 80051d8:	3601      	adds	r6, #1
 80051da:	e7f2      	b.n	80051c2 <__libc_init_array+0x1e>
 80051dc:	08007500 	.word	0x08007500
 80051e0:	08007500 	.word	0x08007500
 80051e4:	08007500 	.word	0x08007500
 80051e8:	08007504 	.word	0x08007504

080051ec <pow>:
 80051ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051f0:	4614      	mov	r4, r2
 80051f2:	461d      	mov	r5, r3
 80051f4:	4680      	mov	r8, r0
 80051f6:	4689      	mov	r9, r1
 80051f8:	f000 fc02 	bl	8005a00 <__ieee754_pow>
 80051fc:	4622      	mov	r2, r4
 80051fe:	4606      	mov	r6, r0
 8005200:	460f      	mov	r7, r1
 8005202:	462b      	mov	r3, r5
 8005204:	4620      	mov	r0, r4
 8005206:	4629      	mov	r1, r5
 8005208:	f7fb fbf8 	bl	80009fc <__aeabi_dcmpun>
 800520c:	bbc8      	cbnz	r0, 8005282 <pow+0x96>
 800520e:	2200      	movs	r2, #0
 8005210:	2300      	movs	r3, #0
 8005212:	4640      	mov	r0, r8
 8005214:	4649      	mov	r1, r9
 8005216:	f7fb fbbf 	bl	8000998 <__aeabi_dcmpeq>
 800521a:	b1b8      	cbz	r0, 800524c <pow+0x60>
 800521c:	2200      	movs	r2, #0
 800521e:	2300      	movs	r3, #0
 8005220:	4620      	mov	r0, r4
 8005222:	4629      	mov	r1, r5
 8005224:	f7fb fbb8 	bl	8000998 <__aeabi_dcmpeq>
 8005228:	2800      	cmp	r0, #0
 800522a:	d141      	bne.n	80052b0 <pow+0xc4>
 800522c:	4620      	mov	r0, r4
 800522e:	4629      	mov	r1, r5
 8005230:	f000 fa66 	bl	8005700 <finite>
 8005234:	b328      	cbz	r0, 8005282 <pow+0x96>
 8005236:	2200      	movs	r2, #0
 8005238:	2300      	movs	r3, #0
 800523a:	4620      	mov	r0, r4
 800523c:	4629      	mov	r1, r5
 800523e:	f7fb fbb5 	bl	80009ac <__aeabi_dcmplt>
 8005242:	b1f0      	cbz	r0, 8005282 <pow+0x96>
 8005244:	f7ff ffa8 	bl	8005198 <__errno>
 8005248:	2322      	movs	r3, #34	@ 0x22
 800524a:	e019      	b.n	8005280 <pow+0x94>
 800524c:	4630      	mov	r0, r6
 800524e:	4639      	mov	r1, r7
 8005250:	f000 fa56 	bl	8005700 <finite>
 8005254:	b9c8      	cbnz	r0, 800528a <pow+0x9e>
 8005256:	4640      	mov	r0, r8
 8005258:	4649      	mov	r1, r9
 800525a:	f000 fa51 	bl	8005700 <finite>
 800525e:	b1a0      	cbz	r0, 800528a <pow+0x9e>
 8005260:	4620      	mov	r0, r4
 8005262:	4629      	mov	r1, r5
 8005264:	f000 fa4c 	bl	8005700 <finite>
 8005268:	b178      	cbz	r0, 800528a <pow+0x9e>
 800526a:	4632      	mov	r2, r6
 800526c:	463b      	mov	r3, r7
 800526e:	4630      	mov	r0, r6
 8005270:	4639      	mov	r1, r7
 8005272:	f7fb fbc3 	bl	80009fc <__aeabi_dcmpun>
 8005276:	2800      	cmp	r0, #0
 8005278:	d0e4      	beq.n	8005244 <pow+0x58>
 800527a:	f7ff ff8d 	bl	8005198 <__errno>
 800527e:	2321      	movs	r3, #33	@ 0x21
 8005280:	6003      	str	r3, [r0, #0]
 8005282:	4630      	mov	r0, r6
 8005284:	4639      	mov	r1, r7
 8005286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800528a:	2200      	movs	r2, #0
 800528c:	2300      	movs	r3, #0
 800528e:	4630      	mov	r0, r6
 8005290:	4639      	mov	r1, r7
 8005292:	f7fb fb81 	bl	8000998 <__aeabi_dcmpeq>
 8005296:	2800      	cmp	r0, #0
 8005298:	d0f3      	beq.n	8005282 <pow+0x96>
 800529a:	4640      	mov	r0, r8
 800529c:	4649      	mov	r1, r9
 800529e:	f000 fa2f 	bl	8005700 <finite>
 80052a2:	2800      	cmp	r0, #0
 80052a4:	d0ed      	beq.n	8005282 <pow+0x96>
 80052a6:	4620      	mov	r0, r4
 80052a8:	4629      	mov	r1, r5
 80052aa:	f000 fa29 	bl	8005700 <finite>
 80052ae:	e7c8      	b.n	8005242 <pow+0x56>
 80052b0:	2600      	movs	r6, #0
 80052b2:	4f01      	ldr	r7, [pc, #4]	@ (80052b8 <pow+0xcc>)
 80052b4:	e7e5      	b.n	8005282 <pow+0x96>
 80052b6:	bf00      	nop
 80052b8:	3ff00000 	.word	0x3ff00000
 80052bc:	00000000 	.word	0x00000000

080052c0 <atan>:
 80052c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c4:	4bbc      	ldr	r3, [pc, #752]	@ (80055b8 <atan+0x2f8>)
 80052c6:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80052ca:	429e      	cmp	r6, r3
 80052cc:	4604      	mov	r4, r0
 80052ce:	460d      	mov	r5, r1
 80052d0:	468b      	mov	fp, r1
 80052d2:	d918      	bls.n	8005306 <atan+0x46>
 80052d4:	4bb9      	ldr	r3, [pc, #740]	@ (80055bc <atan+0x2fc>)
 80052d6:	429e      	cmp	r6, r3
 80052d8:	d801      	bhi.n	80052de <atan+0x1e>
 80052da:	d109      	bne.n	80052f0 <atan+0x30>
 80052dc:	b140      	cbz	r0, 80052f0 <atan+0x30>
 80052de:	4622      	mov	r2, r4
 80052e0:	462b      	mov	r3, r5
 80052e2:	4620      	mov	r0, r4
 80052e4:	4629      	mov	r1, r5
 80052e6:	f7fa ff39 	bl	800015c <__adddf3>
 80052ea:	4604      	mov	r4, r0
 80052ec:	460d      	mov	r5, r1
 80052ee:	e006      	b.n	80052fe <atan+0x3e>
 80052f0:	f1bb 0f00 	cmp.w	fp, #0
 80052f4:	f340 8123 	ble.w	800553e <atan+0x27e>
 80052f8:	a593      	add	r5, pc, #588	@ (adr r5, 8005548 <atan+0x288>)
 80052fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80052fe:	4620      	mov	r0, r4
 8005300:	4629      	mov	r1, r5
 8005302:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005306:	4bae      	ldr	r3, [pc, #696]	@ (80055c0 <atan+0x300>)
 8005308:	429e      	cmp	r6, r3
 800530a:	d811      	bhi.n	8005330 <atan+0x70>
 800530c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8005310:	429e      	cmp	r6, r3
 8005312:	d80a      	bhi.n	800532a <atan+0x6a>
 8005314:	a38e      	add	r3, pc, #568	@ (adr r3, 8005550 <atan+0x290>)
 8005316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531a:	f7fa ff1f 	bl	800015c <__adddf3>
 800531e:	2200      	movs	r2, #0
 8005320:	4ba8      	ldr	r3, [pc, #672]	@ (80055c4 <atan+0x304>)
 8005322:	f7fb fb61 	bl	80009e8 <__aeabi_dcmpgt>
 8005326:	2800      	cmp	r0, #0
 8005328:	d1e9      	bne.n	80052fe <atan+0x3e>
 800532a:	f04f 3aff 	mov.w	sl, #4294967295
 800532e:	e027      	b.n	8005380 <atan+0xc0>
 8005330:	f000 f99c 	bl	800566c <fabs>
 8005334:	4ba4      	ldr	r3, [pc, #656]	@ (80055c8 <atan+0x308>)
 8005336:	4604      	mov	r4, r0
 8005338:	429e      	cmp	r6, r3
 800533a:	460d      	mov	r5, r1
 800533c:	f200 80b8 	bhi.w	80054b0 <atan+0x1f0>
 8005340:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8005344:	429e      	cmp	r6, r3
 8005346:	f200 809c 	bhi.w	8005482 <atan+0x1c2>
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	f7fa ff05 	bl	800015c <__adddf3>
 8005352:	2200      	movs	r2, #0
 8005354:	4b9b      	ldr	r3, [pc, #620]	@ (80055c4 <atan+0x304>)
 8005356:	f7fa feff 	bl	8000158 <__aeabi_dsub>
 800535a:	2200      	movs	r2, #0
 800535c:	4606      	mov	r6, r0
 800535e:	460f      	mov	r7, r1
 8005360:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005364:	4620      	mov	r0, r4
 8005366:	4629      	mov	r1, r5
 8005368:	f7fa fef8 	bl	800015c <__adddf3>
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4630      	mov	r0, r6
 8005372:	4639      	mov	r1, r7
 8005374:	f7fb f9d2 	bl	800071c <__aeabi_ddiv>
 8005378:	f04f 0a00 	mov.w	sl, #0
 800537c:	4604      	mov	r4, r0
 800537e:	460d      	mov	r5, r1
 8005380:	4622      	mov	r2, r4
 8005382:	462b      	mov	r3, r5
 8005384:	4620      	mov	r0, r4
 8005386:	4629      	mov	r1, r5
 8005388:	f7fb f89e 	bl	80004c8 <__aeabi_dmul>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4680      	mov	r8, r0
 8005392:	4689      	mov	r9, r1
 8005394:	f7fb f898 	bl	80004c8 <__aeabi_dmul>
 8005398:	a36f      	add	r3, pc, #444	@ (adr r3, 8005558 <atan+0x298>)
 800539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539e:	4606      	mov	r6, r0
 80053a0:	460f      	mov	r7, r1
 80053a2:	f7fb f891 	bl	80004c8 <__aeabi_dmul>
 80053a6:	a36e      	add	r3, pc, #440	@ (adr r3, 8005560 <atan+0x2a0>)
 80053a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ac:	f7fa fed6 	bl	800015c <__adddf3>
 80053b0:	4632      	mov	r2, r6
 80053b2:	463b      	mov	r3, r7
 80053b4:	f7fb f888 	bl	80004c8 <__aeabi_dmul>
 80053b8:	a36b      	add	r3, pc, #428	@ (adr r3, 8005568 <atan+0x2a8>)
 80053ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053be:	f7fa fecd 	bl	800015c <__adddf3>
 80053c2:	4632      	mov	r2, r6
 80053c4:	463b      	mov	r3, r7
 80053c6:	f7fb f87f 	bl	80004c8 <__aeabi_dmul>
 80053ca:	a369      	add	r3, pc, #420	@ (adr r3, 8005570 <atan+0x2b0>)
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	f7fa fec4 	bl	800015c <__adddf3>
 80053d4:	4632      	mov	r2, r6
 80053d6:	463b      	mov	r3, r7
 80053d8:	f7fb f876 	bl	80004c8 <__aeabi_dmul>
 80053dc:	a366      	add	r3, pc, #408	@ (adr r3, 8005578 <atan+0x2b8>)
 80053de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e2:	f7fa febb 	bl	800015c <__adddf3>
 80053e6:	4632      	mov	r2, r6
 80053e8:	463b      	mov	r3, r7
 80053ea:	f7fb f86d 	bl	80004c8 <__aeabi_dmul>
 80053ee:	a364      	add	r3, pc, #400	@ (adr r3, 8005580 <atan+0x2c0>)
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	f7fa feb2 	bl	800015c <__adddf3>
 80053f8:	4642      	mov	r2, r8
 80053fa:	464b      	mov	r3, r9
 80053fc:	f7fb f864 	bl	80004c8 <__aeabi_dmul>
 8005400:	a361      	add	r3, pc, #388	@ (adr r3, 8005588 <atan+0x2c8>)
 8005402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005406:	4680      	mov	r8, r0
 8005408:	4689      	mov	r9, r1
 800540a:	4630      	mov	r0, r6
 800540c:	4639      	mov	r1, r7
 800540e:	f7fb f85b 	bl	80004c8 <__aeabi_dmul>
 8005412:	a35f      	add	r3, pc, #380	@ (adr r3, 8005590 <atan+0x2d0>)
 8005414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005418:	f7fa fe9e 	bl	8000158 <__aeabi_dsub>
 800541c:	4632      	mov	r2, r6
 800541e:	463b      	mov	r3, r7
 8005420:	f7fb f852 	bl	80004c8 <__aeabi_dmul>
 8005424:	a35c      	add	r3, pc, #368	@ (adr r3, 8005598 <atan+0x2d8>)
 8005426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542a:	f7fa fe95 	bl	8000158 <__aeabi_dsub>
 800542e:	4632      	mov	r2, r6
 8005430:	463b      	mov	r3, r7
 8005432:	f7fb f849 	bl	80004c8 <__aeabi_dmul>
 8005436:	a35a      	add	r3, pc, #360	@ (adr r3, 80055a0 <atan+0x2e0>)
 8005438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543c:	f7fa fe8c 	bl	8000158 <__aeabi_dsub>
 8005440:	4632      	mov	r2, r6
 8005442:	463b      	mov	r3, r7
 8005444:	f7fb f840 	bl	80004c8 <__aeabi_dmul>
 8005448:	a357      	add	r3, pc, #348	@ (adr r3, 80055a8 <atan+0x2e8>)
 800544a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544e:	f7fa fe83 	bl	8000158 <__aeabi_dsub>
 8005452:	4632      	mov	r2, r6
 8005454:	463b      	mov	r3, r7
 8005456:	f7fb f837 	bl	80004c8 <__aeabi_dmul>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	4640      	mov	r0, r8
 8005460:	4649      	mov	r1, r9
 8005462:	f7fa fe7b 	bl	800015c <__adddf3>
 8005466:	4622      	mov	r2, r4
 8005468:	462b      	mov	r3, r5
 800546a:	f7fb f82d 	bl	80004c8 <__aeabi_dmul>
 800546e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005472:	4602      	mov	r2, r0
 8005474:	460b      	mov	r3, r1
 8005476:	d144      	bne.n	8005502 <atan+0x242>
 8005478:	4620      	mov	r0, r4
 800547a:	4629      	mov	r1, r5
 800547c:	f7fa fe6c 	bl	8000158 <__aeabi_dsub>
 8005480:	e733      	b.n	80052ea <atan+0x2a>
 8005482:	2200      	movs	r2, #0
 8005484:	4b4f      	ldr	r3, [pc, #316]	@ (80055c4 <atan+0x304>)
 8005486:	f7fa fe67 	bl	8000158 <__aeabi_dsub>
 800548a:	2200      	movs	r2, #0
 800548c:	4606      	mov	r6, r0
 800548e:	460f      	mov	r7, r1
 8005490:	4620      	mov	r0, r4
 8005492:	4629      	mov	r1, r5
 8005494:	4b4b      	ldr	r3, [pc, #300]	@ (80055c4 <atan+0x304>)
 8005496:	f7fa fe61 	bl	800015c <__adddf3>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4630      	mov	r0, r6
 80054a0:	4639      	mov	r1, r7
 80054a2:	f7fb f93b 	bl	800071c <__aeabi_ddiv>
 80054a6:	f04f 0a01 	mov.w	sl, #1
 80054aa:	4604      	mov	r4, r0
 80054ac:	460d      	mov	r5, r1
 80054ae:	e767      	b.n	8005380 <atan+0xc0>
 80054b0:	4b46      	ldr	r3, [pc, #280]	@ (80055cc <atan+0x30c>)
 80054b2:	429e      	cmp	r6, r3
 80054b4:	d21a      	bcs.n	80054ec <atan+0x22c>
 80054b6:	2200      	movs	r2, #0
 80054b8:	4b45      	ldr	r3, [pc, #276]	@ (80055d0 <atan+0x310>)
 80054ba:	f7fa fe4d 	bl	8000158 <__aeabi_dsub>
 80054be:	2200      	movs	r2, #0
 80054c0:	4606      	mov	r6, r0
 80054c2:	460f      	mov	r7, r1
 80054c4:	4620      	mov	r0, r4
 80054c6:	4629      	mov	r1, r5
 80054c8:	4b41      	ldr	r3, [pc, #260]	@ (80055d0 <atan+0x310>)
 80054ca:	f7fa fffd 	bl	80004c8 <__aeabi_dmul>
 80054ce:	2200      	movs	r2, #0
 80054d0:	4b3c      	ldr	r3, [pc, #240]	@ (80055c4 <atan+0x304>)
 80054d2:	f7fa fe43 	bl	800015c <__adddf3>
 80054d6:	4602      	mov	r2, r0
 80054d8:	460b      	mov	r3, r1
 80054da:	4630      	mov	r0, r6
 80054dc:	4639      	mov	r1, r7
 80054de:	f7fb f91d 	bl	800071c <__aeabi_ddiv>
 80054e2:	f04f 0a02 	mov.w	sl, #2
 80054e6:	4604      	mov	r4, r0
 80054e8:	460d      	mov	r5, r1
 80054ea:	e749      	b.n	8005380 <atan+0xc0>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	2000      	movs	r0, #0
 80054f2:	4938      	ldr	r1, [pc, #224]	@ (80055d4 <atan+0x314>)
 80054f4:	f7fb f912 	bl	800071c <__aeabi_ddiv>
 80054f8:	f04f 0a03 	mov.w	sl, #3
 80054fc:	4604      	mov	r4, r0
 80054fe:	460d      	mov	r5, r1
 8005500:	e73e      	b.n	8005380 <atan+0xc0>
 8005502:	4b35      	ldr	r3, [pc, #212]	@ (80055d8 <atan+0x318>)
 8005504:	4e35      	ldr	r6, [pc, #212]	@ (80055dc <atan+0x31c>)
 8005506:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800550a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550e:	f7fa fe23 	bl	8000158 <__aeabi_dsub>
 8005512:	4622      	mov	r2, r4
 8005514:	462b      	mov	r3, r5
 8005516:	f7fa fe1f 	bl	8000158 <__aeabi_dsub>
 800551a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005526:	f7fa fe17 	bl	8000158 <__aeabi_dsub>
 800552a:	f1bb 0f00 	cmp.w	fp, #0
 800552e:	4604      	mov	r4, r0
 8005530:	460d      	mov	r5, r1
 8005532:	f6bf aee4 	bge.w	80052fe <atan+0x3e>
 8005536:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800553a:	461d      	mov	r5, r3
 800553c:	e6df      	b.n	80052fe <atan+0x3e>
 800553e:	a51c      	add	r5, pc, #112	@ (adr r5, 80055b0 <atan+0x2f0>)
 8005540:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005544:	e6db      	b.n	80052fe <atan+0x3e>
 8005546:	bf00      	nop
 8005548:	54442d18 	.word	0x54442d18
 800554c:	3ff921fb 	.word	0x3ff921fb
 8005550:	8800759c 	.word	0x8800759c
 8005554:	7e37e43c 	.word	0x7e37e43c
 8005558:	e322da11 	.word	0xe322da11
 800555c:	3f90ad3a 	.word	0x3f90ad3a
 8005560:	24760deb 	.word	0x24760deb
 8005564:	3fa97b4b 	.word	0x3fa97b4b
 8005568:	a0d03d51 	.word	0xa0d03d51
 800556c:	3fb10d66 	.word	0x3fb10d66
 8005570:	c54c206e 	.word	0xc54c206e
 8005574:	3fb745cd 	.word	0x3fb745cd
 8005578:	920083ff 	.word	0x920083ff
 800557c:	3fc24924 	.word	0x3fc24924
 8005580:	5555550d 	.word	0x5555550d
 8005584:	3fd55555 	.word	0x3fd55555
 8005588:	2c6a6c2f 	.word	0x2c6a6c2f
 800558c:	bfa2b444 	.word	0xbfa2b444
 8005590:	52defd9a 	.word	0x52defd9a
 8005594:	3fadde2d 	.word	0x3fadde2d
 8005598:	af749a6d 	.word	0xaf749a6d
 800559c:	3fb3b0f2 	.word	0x3fb3b0f2
 80055a0:	fe231671 	.word	0xfe231671
 80055a4:	3fbc71c6 	.word	0x3fbc71c6
 80055a8:	9998ebc4 	.word	0x9998ebc4
 80055ac:	3fc99999 	.word	0x3fc99999
 80055b0:	54442d18 	.word	0x54442d18
 80055b4:	bff921fb 	.word	0xbff921fb
 80055b8:	440fffff 	.word	0x440fffff
 80055bc:	7ff00000 	.word	0x7ff00000
 80055c0:	3fdbffff 	.word	0x3fdbffff
 80055c4:	3ff00000 	.word	0x3ff00000
 80055c8:	3ff2ffff 	.word	0x3ff2ffff
 80055cc:	40038000 	.word	0x40038000
 80055d0:	3ff80000 	.word	0x3ff80000
 80055d4:	bff00000 	.word	0xbff00000
 80055d8:	080072b8 	.word	0x080072b8
 80055dc:	080072d8 	.word	0x080072d8

080055e0 <cos>:
 80055e0:	b530      	push	{r4, r5, lr}
 80055e2:	4d20      	ldr	r5, [pc, #128]	@ (8005664 <cos+0x84>)
 80055e4:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80055e8:	42ac      	cmp	r4, r5
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	b087      	sub	sp, #28
 80055f0:	d806      	bhi.n	8005600 <cos+0x20>
 80055f2:	2200      	movs	r2, #0
 80055f4:	2300      	movs	r3, #0
 80055f6:	b007      	add	sp, #28
 80055f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055fc:	f000 b888 	b.w	8005710 <__kernel_cos>
 8005600:	4d19      	ldr	r5, [pc, #100]	@ (8005668 <cos+0x88>)
 8005602:	42ac      	cmp	r4, r5
 8005604:	d903      	bls.n	800560e <cos+0x2e>
 8005606:	f7fa fda7 	bl	8000158 <__aeabi_dsub>
 800560a:	b007      	add	sp, #28
 800560c:	bd30      	pop	{r4, r5, pc}
 800560e:	aa02      	add	r2, sp, #8
 8005610:	f000 ff1e 	bl	8006450 <__ieee754_rem_pio2>
 8005614:	f000 0003 	and.w	r0, r0, #3
 8005618:	2801      	cmp	r0, #1
 800561a:	d009      	beq.n	8005630 <cos+0x50>
 800561c:	2802      	cmp	r0, #2
 800561e:	d011      	beq.n	8005644 <cos+0x64>
 8005620:	b9b8      	cbnz	r0, 8005652 <cos+0x72>
 8005622:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800562a:	f000 f871 	bl	8005710 <__kernel_cos>
 800562e:	e7ec      	b.n	800560a <cos+0x2a>
 8005630:	9000      	str	r0, [sp, #0]
 8005632:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800563a:	f000 f929 	bl	8005890 <__kernel_sin>
 800563e:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8005642:	e7e2      	b.n	800560a <cos+0x2a>
 8005644:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005648:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800564c:	f000 f860 	bl	8005710 <__kernel_cos>
 8005650:	e7f5      	b.n	800563e <cos+0x5e>
 8005652:	2301      	movs	r3, #1
 8005654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800565e:	f000 f917 	bl	8005890 <__kernel_sin>
 8005662:	e7d2      	b.n	800560a <cos+0x2a>
 8005664:	3fe921fb 	.word	0x3fe921fb
 8005668:	7fefffff 	.word	0x7fefffff

0800566c <fabs>:
 800566c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005670:	4619      	mov	r1, r3
 8005672:	4770      	bx	lr

08005674 <sin>:
 8005674:	b530      	push	{r4, r5, lr}
 8005676:	4d20      	ldr	r5, [pc, #128]	@ (80056f8 <sin+0x84>)
 8005678:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800567c:	42ac      	cmp	r4, r5
 800567e:	4602      	mov	r2, r0
 8005680:	460b      	mov	r3, r1
 8005682:	b087      	sub	sp, #28
 8005684:	d806      	bhi.n	8005694 <sin+0x20>
 8005686:	2300      	movs	r3, #0
 8005688:	2200      	movs	r2, #0
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	2300      	movs	r3, #0
 800568e:	f000 f8ff 	bl	8005890 <__kernel_sin>
 8005692:	e004      	b.n	800569e <sin+0x2a>
 8005694:	4d19      	ldr	r5, [pc, #100]	@ (80056fc <sin+0x88>)
 8005696:	42ac      	cmp	r4, r5
 8005698:	d903      	bls.n	80056a2 <sin+0x2e>
 800569a:	f7fa fd5d 	bl	8000158 <__aeabi_dsub>
 800569e:	b007      	add	sp, #28
 80056a0:	bd30      	pop	{r4, r5, pc}
 80056a2:	aa02      	add	r2, sp, #8
 80056a4:	f000 fed4 	bl	8006450 <__ieee754_rem_pio2>
 80056a8:	f000 0003 	and.w	r0, r0, #3
 80056ac:	2801      	cmp	r0, #1
 80056ae:	d009      	beq.n	80056c4 <sin+0x50>
 80056b0:	2802      	cmp	r0, #2
 80056b2:	d00e      	beq.n	80056d2 <sin+0x5e>
 80056b4:	b9c0      	cbnz	r0, 80056e8 <sin+0x74>
 80056b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056ba:	2301      	movs	r3, #1
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056c2:	e7e4      	b.n	800568e <sin+0x1a>
 80056c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056cc:	f000 f820 	bl	8005710 <__kernel_cos>
 80056d0:	e7e5      	b.n	800569e <sin+0x2a>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056de:	f000 f8d7 	bl	8005890 <__kernel_sin>
 80056e2:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 80056e6:	e7da      	b.n	800569e <sin+0x2a>
 80056e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056f0:	f000 f80e 	bl	8005710 <__kernel_cos>
 80056f4:	e7f5      	b.n	80056e2 <sin+0x6e>
 80056f6:	bf00      	nop
 80056f8:	3fe921fb 	.word	0x3fe921fb
 80056fc:	7fefffff 	.word	0x7fefffff

08005700 <finite>:
 8005700:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8005704:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8005708:	0fc0      	lsrs	r0, r0, #31
 800570a:	4770      	bx	lr
 800570c:	0000      	movs	r0, r0
	...

08005710 <__kernel_cos>:
 8005710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005714:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8005718:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800571c:	4680      	mov	r8, r0
 800571e:	4689      	mov	r9, r1
 8005720:	e9cd 2300 	strd	r2, r3, [sp]
 8005724:	d204      	bcs.n	8005730 <__kernel_cos+0x20>
 8005726:	f7fb f97f 	bl	8000a28 <__aeabi_d2iz>
 800572a:	2800      	cmp	r0, #0
 800572c:	f000 8086 	beq.w	800583c <__kernel_cos+0x12c>
 8005730:	4642      	mov	r2, r8
 8005732:	464b      	mov	r3, r9
 8005734:	4640      	mov	r0, r8
 8005736:	4649      	mov	r1, r9
 8005738:	f7fa fec6 	bl	80004c8 <__aeabi_dmul>
 800573c:	2200      	movs	r2, #0
 800573e:	4b4e      	ldr	r3, [pc, #312]	@ (8005878 <__kernel_cos+0x168>)
 8005740:	4604      	mov	r4, r0
 8005742:	460d      	mov	r5, r1
 8005744:	f7fa fec0 	bl	80004c8 <__aeabi_dmul>
 8005748:	a33f      	add	r3, pc, #252	@ (adr r3, 8005848 <__kernel_cos+0x138>)
 800574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574e:	4682      	mov	sl, r0
 8005750:	468b      	mov	fp, r1
 8005752:	4620      	mov	r0, r4
 8005754:	4629      	mov	r1, r5
 8005756:	f7fa feb7 	bl	80004c8 <__aeabi_dmul>
 800575a:	a33d      	add	r3, pc, #244	@ (adr r3, 8005850 <__kernel_cos+0x140>)
 800575c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005760:	f7fa fcfc 	bl	800015c <__adddf3>
 8005764:	4622      	mov	r2, r4
 8005766:	462b      	mov	r3, r5
 8005768:	f7fa feae 	bl	80004c8 <__aeabi_dmul>
 800576c:	a33a      	add	r3, pc, #232	@ (adr r3, 8005858 <__kernel_cos+0x148>)
 800576e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005772:	f7fa fcf1 	bl	8000158 <__aeabi_dsub>
 8005776:	4622      	mov	r2, r4
 8005778:	462b      	mov	r3, r5
 800577a:	f7fa fea5 	bl	80004c8 <__aeabi_dmul>
 800577e:	a338      	add	r3, pc, #224	@ (adr r3, 8005860 <__kernel_cos+0x150>)
 8005780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005784:	f7fa fcea 	bl	800015c <__adddf3>
 8005788:	4622      	mov	r2, r4
 800578a:	462b      	mov	r3, r5
 800578c:	f7fa fe9c 	bl	80004c8 <__aeabi_dmul>
 8005790:	a335      	add	r3, pc, #212	@ (adr r3, 8005868 <__kernel_cos+0x158>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	f7fa fcdf 	bl	8000158 <__aeabi_dsub>
 800579a:	4622      	mov	r2, r4
 800579c:	462b      	mov	r3, r5
 800579e:	f7fa fe93 	bl	80004c8 <__aeabi_dmul>
 80057a2:	a333      	add	r3, pc, #204	@ (adr r3, 8005870 <__kernel_cos+0x160>)
 80057a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a8:	f7fa fcd8 	bl	800015c <__adddf3>
 80057ac:	4622      	mov	r2, r4
 80057ae:	462b      	mov	r3, r5
 80057b0:	f7fa fe8a 	bl	80004c8 <__aeabi_dmul>
 80057b4:	4622      	mov	r2, r4
 80057b6:	462b      	mov	r3, r5
 80057b8:	f7fa fe86 	bl	80004c8 <__aeabi_dmul>
 80057bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057c0:	4604      	mov	r4, r0
 80057c2:	460d      	mov	r5, r1
 80057c4:	4640      	mov	r0, r8
 80057c6:	4649      	mov	r1, r9
 80057c8:	f7fa fe7e 	bl	80004c8 <__aeabi_dmul>
 80057cc:	460b      	mov	r3, r1
 80057ce:	4602      	mov	r2, r0
 80057d0:	4629      	mov	r1, r5
 80057d2:	4620      	mov	r0, r4
 80057d4:	f7fa fcc0 	bl	8000158 <__aeabi_dsub>
 80057d8:	4b28      	ldr	r3, [pc, #160]	@ (800587c <__kernel_cos+0x16c>)
 80057da:	4680      	mov	r8, r0
 80057dc:	429e      	cmp	r6, r3
 80057de:	4689      	mov	r9, r1
 80057e0:	d80e      	bhi.n	8005800 <__kernel_cos+0xf0>
 80057e2:	4602      	mov	r2, r0
 80057e4:	460b      	mov	r3, r1
 80057e6:	4650      	mov	r0, sl
 80057e8:	4659      	mov	r1, fp
 80057ea:	f7fa fcb5 	bl	8000158 <__aeabi_dsub>
 80057ee:	4602      	mov	r2, r0
 80057f0:	2000      	movs	r0, #0
 80057f2:	460b      	mov	r3, r1
 80057f4:	4922      	ldr	r1, [pc, #136]	@ (8005880 <__kernel_cos+0x170>)
 80057f6:	f7fa fcaf 	bl	8000158 <__aeabi_dsub>
 80057fa:	b003      	add	sp, #12
 80057fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005800:	2400      	movs	r4, #0
 8005802:	4b20      	ldr	r3, [pc, #128]	@ (8005884 <__kernel_cos+0x174>)
 8005804:	4622      	mov	r2, r4
 8005806:	429e      	cmp	r6, r3
 8005808:	bf8c      	ite	hi
 800580a:	4d1f      	ldrhi	r5, [pc, #124]	@ (8005888 <__kernel_cos+0x178>)
 800580c:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8005810:	462b      	mov	r3, r5
 8005812:	2000      	movs	r0, #0
 8005814:	491a      	ldr	r1, [pc, #104]	@ (8005880 <__kernel_cos+0x170>)
 8005816:	f7fa fc9f 	bl	8000158 <__aeabi_dsub>
 800581a:	4622      	mov	r2, r4
 800581c:	4606      	mov	r6, r0
 800581e:	460f      	mov	r7, r1
 8005820:	462b      	mov	r3, r5
 8005822:	4650      	mov	r0, sl
 8005824:	4659      	mov	r1, fp
 8005826:	f7fa fc97 	bl	8000158 <__aeabi_dsub>
 800582a:	4642      	mov	r2, r8
 800582c:	464b      	mov	r3, r9
 800582e:	f7fa fc93 	bl	8000158 <__aeabi_dsub>
 8005832:	4602      	mov	r2, r0
 8005834:	460b      	mov	r3, r1
 8005836:	4630      	mov	r0, r6
 8005838:	4639      	mov	r1, r7
 800583a:	e7dc      	b.n	80057f6 <__kernel_cos+0xe6>
 800583c:	2000      	movs	r0, #0
 800583e:	4910      	ldr	r1, [pc, #64]	@ (8005880 <__kernel_cos+0x170>)
 8005840:	e7db      	b.n	80057fa <__kernel_cos+0xea>
 8005842:	bf00      	nop
 8005844:	f3af 8000 	nop.w
 8005848:	be8838d4 	.word	0xbe8838d4
 800584c:	bda8fae9 	.word	0xbda8fae9
 8005850:	bdb4b1c4 	.word	0xbdb4b1c4
 8005854:	3e21ee9e 	.word	0x3e21ee9e
 8005858:	809c52ad 	.word	0x809c52ad
 800585c:	3e927e4f 	.word	0x3e927e4f
 8005860:	19cb1590 	.word	0x19cb1590
 8005864:	3efa01a0 	.word	0x3efa01a0
 8005868:	16c15177 	.word	0x16c15177
 800586c:	3f56c16c 	.word	0x3f56c16c
 8005870:	5555554c 	.word	0x5555554c
 8005874:	3fa55555 	.word	0x3fa55555
 8005878:	3fe00000 	.word	0x3fe00000
 800587c:	3fd33332 	.word	0x3fd33332
 8005880:	3ff00000 	.word	0x3ff00000
 8005884:	3fe90000 	.word	0x3fe90000
 8005888:	3fd20000 	.word	0x3fd20000
 800588c:	00000000 	.word	0x00000000

08005890 <__kernel_sin>:
 8005890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005894:	461f      	mov	r7, r3
 8005896:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800589a:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800589e:	4604      	mov	r4, r0
 80058a0:	460d      	mov	r5, r1
 80058a2:	4616      	mov	r6, r2
 80058a4:	b085      	sub	sp, #20
 80058a6:	d203      	bcs.n	80058b0 <__kernel_sin+0x20>
 80058a8:	f7fb f8be 	bl	8000a28 <__aeabi_d2iz>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	d051      	beq.n	8005954 <__kernel_sin+0xc4>
 80058b0:	4622      	mov	r2, r4
 80058b2:	462b      	mov	r3, r5
 80058b4:	4620      	mov	r0, r4
 80058b6:	4629      	mov	r1, r5
 80058b8:	f7fa fe06 	bl	80004c8 <__aeabi_dmul>
 80058bc:	4682      	mov	sl, r0
 80058be:	468b      	mov	fp, r1
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	4620      	mov	r0, r4
 80058c6:	4629      	mov	r1, r5
 80058c8:	f7fa fdfe 	bl	80004c8 <__aeabi_dmul>
 80058cc:	a33e      	add	r3, pc, #248	@ (adr r3, 80059c8 <__kernel_sin+0x138>)
 80058ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d2:	4680      	mov	r8, r0
 80058d4:	4689      	mov	r9, r1
 80058d6:	4650      	mov	r0, sl
 80058d8:	4659      	mov	r1, fp
 80058da:	f7fa fdf5 	bl	80004c8 <__aeabi_dmul>
 80058de:	a33c      	add	r3, pc, #240	@ (adr r3, 80059d0 <__kernel_sin+0x140>)
 80058e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e4:	f7fa fc38 	bl	8000158 <__aeabi_dsub>
 80058e8:	4652      	mov	r2, sl
 80058ea:	465b      	mov	r3, fp
 80058ec:	f7fa fdec 	bl	80004c8 <__aeabi_dmul>
 80058f0:	a339      	add	r3, pc, #228	@ (adr r3, 80059d8 <__kernel_sin+0x148>)
 80058f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f6:	f7fa fc31 	bl	800015c <__adddf3>
 80058fa:	4652      	mov	r2, sl
 80058fc:	465b      	mov	r3, fp
 80058fe:	f7fa fde3 	bl	80004c8 <__aeabi_dmul>
 8005902:	a337      	add	r3, pc, #220	@ (adr r3, 80059e0 <__kernel_sin+0x150>)
 8005904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005908:	f7fa fc26 	bl	8000158 <__aeabi_dsub>
 800590c:	4652      	mov	r2, sl
 800590e:	465b      	mov	r3, fp
 8005910:	f7fa fdda 	bl	80004c8 <__aeabi_dmul>
 8005914:	a334      	add	r3, pc, #208	@ (adr r3, 80059e8 <__kernel_sin+0x158>)
 8005916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591a:	f7fa fc1f 	bl	800015c <__adddf3>
 800591e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005920:	e9cd 0100 	strd	r0, r1, [sp]
 8005924:	b9db      	cbnz	r3, 800595e <__kernel_sin+0xce>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4650      	mov	r0, sl
 800592c:	4659      	mov	r1, fp
 800592e:	f7fa fdcb 	bl	80004c8 <__aeabi_dmul>
 8005932:	a32f      	add	r3, pc, #188	@ (adr r3, 80059f0 <__kernel_sin+0x160>)
 8005934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005938:	f7fa fc0e 	bl	8000158 <__aeabi_dsub>
 800593c:	4642      	mov	r2, r8
 800593e:	464b      	mov	r3, r9
 8005940:	f7fa fdc2 	bl	80004c8 <__aeabi_dmul>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4620      	mov	r0, r4
 800594a:	4629      	mov	r1, r5
 800594c:	f7fa fc06 	bl	800015c <__adddf3>
 8005950:	4604      	mov	r4, r0
 8005952:	460d      	mov	r5, r1
 8005954:	4620      	mov	r0, r4
 8005956:	4629      	mov	r1, r5
 8005958:	b005      	add	sp, #20
 800595a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800595e:	2200      	movs	r2, #0
 8005960:	4630      	mov	r0, r6
 8005962:	4639      	mov	r1, r7
 8005964:	4b24      	ldr	r3, [pc, #144]	@ (80059f8 <__kernel_sin+0x168>)
 8005966:	f7fa fdaf 	bl	80004c8 <__aeabi_dmul>
 800596a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800596e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005972:	4640      	mov	r0, r8
 8005974:	4649      	mov	r1, r9
 8005976:	f7fa fda7 	bl	80004c8 <__aeabi_dmul>
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005982:	f7fa fbe9 	bl	8000158 <__aeabi_dsub>
 8005986:	4652      	mov	r2, sl
 8005988:	465b      	mov	r3, fp
 800598a:	f7fa fd9d 	bl	80004c8 <__aeabi_dmul>
 800598e:	4632      	mov	r2, r6
 8005990:	463b      	mov	r3, r7
 8005992:	f7fa fbe1 	bl	8000158 <__aeabi_dsub>
 8005996:	a316      	add	r3, pc, #88	@ (adr r3, 80059f0 <__kernel_sin+0x160>)
 8005998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599c:	4606      	mov	r6, r0
 800599e:	460f      	mov	r7, r1
 80059a0:	4640      	mov	r0, r8
 80059a2:	4649      	mov	r1, r9
 80059a4:	f7fa fd90 	bl	80004c8 <__aeabi_dmul>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	4630      	mov	r0, r6
 80059ae:	4639      	mov	r1, r7
 80059b0:	f7fa fbd4 	bl	800015c <__adddf3>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4620      	mov	r0, r4
 80059ba:	4629      	mov	r1, r5
 80059bc:	f7fa fbcc 	bl	8000158 <__aeabi_dsub>
 80059c0:	e7c6      	b.n	8005950 <__kernel_sin+0xc0>
 80059c2:	bf00      	nop
 80059c4:	f3af 8000 	nop.w
 80059c8:	5acfd57c 	.word	0x5acfd57c
 80059cc:	3de5d93a 	.word	0x3de5d93a
 80059d0:	8a2b9ceb 	.word	0x8a2b9ceb
 80059d4:	3e5ae5e6 	.word	0x3e5ae5e6
 80059d8:	57b1fe7d 	.word	0x57b1fe7d
 80059dc:	3ec71de3 	.word	0x3ec71de3
 80059e0:	19c161d5 	.word	0x19c161d5
 80059e4:	3f2a01a0 	.word	0x3f2a01a0
 80059e8:	1110f8a6 	.word	0x1110f8a6
 80059ec:	3f811111 	.word	0x3f811111
 80059f0:	55555549 	.word	0x55555549
 80059f4:	3fc55555 	.word	0x3fc55555
 80059f8:	3fe00000 	.word	0x3fe00000
 80059fc:	00000000 	.word	0x00000000

08005a00 <__ieee754_pow>:
 8005a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a04:	b091      	sub	sp, #68	@ 0x44
 8005a06:	e9cd 2300 	strd	r2, r3, [sp]
 8005a0a:	468b      	mov	fp, r1
 8005a0c:	e9dd 1800 	ldrd	r1, r8, [sp]
 8005a10:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8005a14:	4682      	mov	sl, r0
 8005a16:	ea57 0001 	orrs.w	r0, r7, r1
 8005a1a:	d112      	bne.n	8005a42 <__ieee754_pow+0x42>
 8005a1c:	4653      	mov	r3, sl
 8005a1e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8005a22:	18db      	adds	r3, r3, r3
 8005a24:	4152      	adcs	r2, r2
 8005a26:	4298      	cmp	r0, r3
 8005a28:	4b91      	ldr	r3, [pc, #580]	@ (8005c70 <__ieee754_pow+0x270>)
 8005a2a:	4193      	sbcs	r3, r2
 8005a2c:	f080 84ce 	bcs.w	80063cc <__ieee754_pow+0x9cc>
 8005a30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a34:	4650      	mov	r0, sl
 8005a36:	4659      	mov	r1, fp
 8005a38:	f7fa fb90 	bl	800015c <__adddf3>
 8005a3c:	b011      	add	sp, #68	@ 0x44
 8005a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a42:	4b8c      	ldr	r3, [pc, #560]	@ (8005c74 <__ieee754_pow+0x274>)
 8005a44:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8005a48:	429e      	cmp	r6, r3
 8005a4a:	465d      	mov	r5, fp
 8005a4c:	46d1      	mov	r9, sl
 8005a4e:	d807      	bhi.n	8005a60 <__ieee754_pow+0x60>
 8005a50:	d102      	bne.n	8005a58 <__ieee754_pow+0x58>
 8005a52:	f1ba 0f00 	cmp.w	sl, #0
 8005a56:	d1eb      	bne.n	8005a30 <__ieee754_pow+0x30>
 8005a58:	429f      	cmp	r7, r3
 8005a5a:	d801      	bhi.n	8005a60 <__ieee754_pow+0x60>
 8005a5c:	d10f      	bne.n	8005a7e <__ieee754_pow+0x7e>
 8005a5e:	b171      	cbz	r1, 8005a7e <__ieee754_pow+0x7e>
 8005a60:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8005a64:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8005a68:	ea55 0509 	orrs.w	r5, r5, r9
 8005a6c:	d1e0      	bne.n	8005a30 <__ieee754_pow+0x30>
 8005a6e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005a72:	18db      	adds	r3, r3, r3
 8005a74:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8005a78:	4152      	adcs	r2, r2
 8005a7a:	429d      	cmp	r5, r3
 8005a7c:	e7d4      	b.n	8005a28 <__ieee754_pow+0x28>
 8005a7e:	2d00      	cmp	r5, #0
 8005a80:	4633      	mov	r3, r6
 8005a82:	da39      	bge.n	8005af8 <__ieee754_pow+0xf8>
 8005a84:	4a7c      	ldr	r2, [pc, #496]	@ (8005c78 <__ieee754_pow+0x278>)
 8005a86:	4297      	cmp	r7, r2
 8005a88:	d84e      	bhi.n	8005b28 <__ieee754_pow+0x128>
 8005a8a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8005a8e:	4297      	cmp	r7, r2
 8005a90:	f240 84ab 	bls.w	80063ea <__ieee754_pow+0x9ea>
 8005a94:	153a      	asrs	r2, r7, #20
 8005a96:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8005a9a:	2a14      	cmp	r2, #20
 8005a9c:	dd0f      	ble.n	8005abe <__ieee754_pow+0xbe>
 8005a9e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8005aa2:	fa21 f402 	lsr.w	r4, r1, r2
 8005aa6:	fa04 f202 	lsl.w	r2, r4, r2
 8005aaa:	428a      	cmp	r2, r1
 8005aac:	f040 849d 	bne.w	80063ea <__ieee754_pow+0x9ea>
 8005ab0:	f004 0401 	and.w	r4, r4, #1
 8005ab4:	f1c4 0402 	rsb	r4, r4, #2
 8005ab8:	2900      	cmp	r1, #0
 8005aba:	d15a      	bne.n	8005b72 <__ieee754_pow+0x172>
 8005abc:	e00e      	b.n	8005adc <__ieee754_pow+0xdc>
 8005abe:	2900      	cmp	r1, #0
 8005ac0:	d156      	bne.n	8005b70 <__ieee754_pow+0x170>
 8005ac2:	f1c2 0214 	rsb	r2, r2, #20
 8005ac6:	fa47 f402 	asr.w	r4, r7, r2
 8005aca:	fa04 f202 	lsl.w	r2, r4, r2
 8005ace:	42ba      	cmp	r2, r7
 8005ad0:	f040 8488 	bne.w	80063e4 <__ieee754_pow+0x9e4>
 8005ad4:	f004 0401 	and.w	r4, r4, #1
 8005ad8:	f1c4 0402 	rsb	r4, r4, #2
 8005adc:	4a67      	ldr	r2, [pc, #412]	@ (8005c7c <__ieee754_pow+0x27c>)
 8005ade:	4297      	cmp	r7, r2
 8005ae0:	d130      	bne.n	8005b44 <__ieee754_pow+0x144>
 8005ae2:	f1b8 0f00 	cmp.w	r8, #0
 8005ae6:	f280 8479 	bge.w	80063dc <__ieee754_pow+0x9dc>
 8005aea:	4652      	mov	r2, sl
 8005aec:	465b      	mov	r3, fp
 8005aee:	2000      	movs	r0, #0
 8005af0:	4962      	ldr	r1, [pc, #392]	@ (8005c7c <__ieee754_pow+0x27c>)
 8005af2:	f7fa fe13 	bl	800071c <__aeabi_ddiv>
 8005af6:	e7a1      	b.n	8005a3c <__ieee754_pow+0x3c>
 8005af8:	2400      	movs	r4, #0
 8005afa:	2900      	cmp	r1, #0
 8005afc:	d139      	bne.n	8005b72 <__ieee754_pow+0x172>
 8005afe:	4a5d      	ldr	r2, [pc, #372]	@ (8005c74 <__ieee754_pow+0x274>)
 8005b00:	4297      	cmp	r7, r2
 8005b02:	d1eb      	bne.n	8005adc <__ieee754_pow+0xdc>
 8005b04:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8005b08:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8005b0c:	ea53 0309 	orrs.w	r3, r3, r9
 8005b10:	f000 845c 	beq.w	80063cc <__ieee754_pow+0x9cc>
 8005b14:	4b5a      	ldr	r3, [pc, #360]	@ (8005c80 <__ieee754_pow+0x280>)
 8005b16:	429e      	cmp	r6, r3
 8005b18:	d908      	bls.n	8005b2c <__ieee754_pow+0x12c>
 8005b1a:	f1b8 0f00 	cmp.w	r8, #0
 8005b1e:	f2c0 8459 	blt.w	80063d4 <__ieee754_pow+0x9d4>
 8005b22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b26:	e789      	b.n	8005a3c <__ieee754_pow+0x3c>
 8005b28:	2402      	movs	r4, #2
 8005b2a:	e7e6      	b.n	8005afa <__ieee754_pow+0xfa>
 8005b2c:	f1b8 0f00 	cmp.w	r8, #0
 8005b30:	f04f 0000 	mov.w	r0, #0
 8005b34:	f04f 0100 	mov.w	r1, #0
 8005b38:	da80      	bge.n	8005a3c <__ieee754_pow+0x3c>
 8005b3a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005b3e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005b42:	e77b      	b.n	8005a3c <__ieee754_pow+0x3c>
 8005b44:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8005b48:	d106      	bne.n	8005b58 <__ieee754_pow+0x158>
 8005b4a:	4652      	mov	r2, sl
 8005b4c:	465b      	mov	r3, fp
 8005b4e:	4650      	mov	r0, sl
 8005b50:	4659      	mov	r1, fp
 8005b52:	f7fa fcb9 	bl	80004c8 <__aeabi_dmul>
 8005b56:	e771      	b.n	8005a3c <__ieee754_pow+0x3c>
 8005b58:	4a4a      	ldr	r2, [pc, #296]	@ (8005c84 <__ieee754_pow+0x284>)
 8005b5a:	4590      	cmp	r8, r2
 8005b5c:	d109      	bne.n	8005b72 <__ieee754_pow+0x172>
 8005b5e:	2d00      	cmp	r5, #0
 8005b60:	db07      	blt.n	8005b72 <__ieee754_pow+0x172>
 8005b62:	4650      	mov	r0, sl
 8005b64:	4659      	mov	r1, fp
 8005b66:	b011      	add	sp, #68	@ 0x44
 8005b68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b6c:	f000 bf06 	b.w	800697c <__ieee754_sqrt>
 8005b70:	2400      	movs	r4, #0
 8005b72:	4650      	mov	r0, sl
 8005b74:	4659      	mov	r1, fp
 8005b76:	9302      	str	r3, [sp, #8]
 8005b78:	f7ff fd78 	bl	800566c <fabs>
 8005b7c:	9b02      	ldr	r3, [sp, #8]
 8005b7e:	f1b9 0f00 	cmp.w	r9, #0
 8005b82:	d127      	bne.n	8005bd4 <__ieee754_pow+0x1d4>
 8005b84:	4a3d      	ldr	r2, [pc, #244]	@ (8005c7c <__ieee754_pow+0x27c>)
 8005b86:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8005b8a:	4594      	cmp	ip, r2
 8005b8c:	d000      	beq.n	8005b90 <__ieee754_pow+0x190>
 8005b8e:	bb0e      	cbnz	r6, 8005bd4 <__ieee754_pow+0x1d4>
 8005b90:	f1b8 0f00 	cmp.w	r8, #0
 8005b94:	da05      	bge.n	8005ba2 <__ieee754_pow+0x1a2>
 8005b96:	4602      	mov	r2, r0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	4937      	ldr	r1, [pc, #220]	@ (8005c7c <__ieee754_pow+0x27c>)
 8005b9e:	f7fa fdbd 	bl	800071c <__aeabi_ddiv>
 8005ba2:	2d00      	cmp	r5, #0
 8005ba4:	f6bf af4a 	bge.w	8005a3c <__ieee754_pow+0x3c>
 8005ba8:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8005bac:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8005bb0:	4326      	orrs	r6, r4
 8005bb2:	d108      	bne.n	8005bc6 <__ieee754_pow+0x1c6>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4610      	mov	r0, r2
 8005bba:	4619      	mov	r1, r3
 8005bbc:	f7fa facc 	bl	8000158 <__aeabi_dsub>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	e795      	b.n	8005af2 <__ieee754_pow+0xf2>
 8005bc6:	2c01      	cmp	r4, #1
 8005bc8:	f47f af38 	bne.w	8005a3c <__ieee754_pow+0x3c>
 8005bcc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	e733      	b.n	8005a3c <__ieee754_pow+0x3c>
 8005bd4:	0fea      	lsrs	r2, r5, #31
 8005bd6:	3a01      	subs	r2, #1
 8005bd8:	ea52 0c04 	orrs.w	ip, r2, r4
 8005bdc:	d102      	bne.n	8005be4 <__ieee754_pow+0x1e4>
 8005bde:	4652      	mov	r2, sl
 8005be0:	465b      	mov	r3, fp
 8005be2:	e7e9      	b.n	8005bb8 <__ieee754_pow+0x1b8>
 8005be4:	f04f 0900 	mov.w	r9, #0
 8005be8:	3c01      	subs	r4, #1
 8005bea:	4314      	orrs	r4, r2
 8005bec:	bf14      	ite	ne
 8005bee:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8005c7c <__ieee754_pow+0x27c>
 8005bf2:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8005c88 <__ieee754_pow+0x288>
 8005bf6:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8005bfa:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8005bfe:	f240 8107 	bls.w	8005e10 <__ieee754_pow+0x410>
 8005c02:	4b22      	ldr	r3, [pc, #136]	@ (8005c8c <__ieee754_pow+0x28c>)
 8005c04:	429f      	cmp	r7, r3
 8005c06:	4b1e      	ldr	r3, [pc, #120]	@ (8005c80 <__ieee754_pow+0x280>)
 8005c08:	d913      	bls.n	8005c32 <__ieee754_pow+0x232>
 8005c0a:	429e      	cmp	r6, r3
 8005c0c:	d808      	bhi.n	8005c20 <__ieee754_pow+0x220>
 8005c0e:	f1b8 0f00 	cmp.w	r8, #0
 8005c12:	da08      	bge.n	8005c26 <__ieee754_pow+0x226>
 8005c14:	2000      	movs	r0, #0
 8005c16:	b011      	add	sp, #68	@ 0x44
 8005c18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1c:	f000 bea8 	b.w	8006970 <__math_oflow>
 8005c20:	f1b8 0f00 	cmp.w	r8, #0
 8005c24:	dcf6      	bgt.n	8005c14 <__ieee754_pow+0x214>
 8005c26:	2000      	movs	r0, #0
 8005c28:	b011      	add	sp, #68	@ 0x44
 8005c2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2e:	f000 be9a 	b.w	8006966 <__math_uflow>
 8005c32:	429e      	cmp	r6, r3
 8005c34:	d20c      	bcs.n	8005c50 <__ieee754_pow+0x250>
 8005c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	f7fa feb5 	bl	80009ac <__aeabi_dcmplt>
 8005c42:	3800      	subs	r0, #0
 8005c44:	bf18      	it	ne
 8005c46:	2001      	movne	r0, #1
 8005c48:	f1b8 0f00 	cmp.w	r8, #0
 8005c4c:	daec      	bge.n	8005c28 <__ieee754_pow+0x228>
 8005c4e:	e7e2      	b.n	8005c16 <__ieee754_pow+0x216>
 8005c50:	4b0a      	ldr	r3, [pc, #40]	@ (8005c7c <__ieee754_pow+0x27c>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	429e      	cmp	r6, r3
 8005c56:	d91b      	bls.n	8005c90 <__ieee754_pow+0x290>
 8005c58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f7fa fea5 	bl	80009ac <__aeabi_dcmplt>
 8005c62:	3800      	subs	r0, #0
 8005c64:	bf18      	it	ne
 8005c66:	2001      	movne	r0, #1
 8005c68:	f1b8 0f00 	cmp.w	r8, #0
 8005c6c:	dcd3      	bgt.n	8005c16 <__ieee754_pow+0x216>
 8005c6e:	e7db      	b.n	8005c28 <__ieee754_pow+0x228>
 8005c70:	fff00000 	.word	0xfff00000
 8005c74:	7ff00000 	.word	0x7ff00000
 8005c78:	433fffff 	.word	0x433fffff
 8005c7c:	3ff00000 	.word	0x3ff00000
 8005c80:	3fefffff 	.word	0x3fefffff
 8005c84:	3fe00000 	.word	0x3fe00000
 8005c88:	bff00000 	.word	0xbff00000
 8005c8c:	43f00000 	.word	0x43f00000
 8005c90:	4b5b      	ldr	r3, [pc, #364]	@ (8005e00 <__ieee754_pow+0x400>)
 8005c92:	f7fa fa61 	bl	8000158 <__aeabi_dsub>
 8005c96:	a352      	add	r3, pc, #328	@ (adr r3, 8005de0 <__ieee754_pow+0x3e0>)
 8005c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	460d      	mov	r5, r1
 8005ca0:	f7fa fc12 	bl	80004c8 <__aeabi_dmul>
 8005ca4:	a350      	add	r3, pc, #320	@ (adr r3, 8005de8 <__ieee754_pow+0x3e8>)
 8005ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005caa:	4606      	mov	r6, r0
 8005cac:	460f      	mov	r7, r1
 8005cae:	4620      	mov	r0, r4
 8005cb0:	4629      	mov	r1, r5
 8005cb2:	f7fa fc09 	bl	80004c8 <__aeabi_dmul>
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	4682      	mov	sl, r0
 8005cba:	468b      	mov	fp, r1
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	4629      	mov	r1, r5
 8005cc0:	4b50      	ldr	r3, [pc, #320]	@ (8005e04 <__ieee754_pow+0x404>)
 8005cc2:	f7fa fc01 	bl	80004c8 <__aeabi_dmul>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	a149      	add	r1, pc, #292	@ (adr r1, 8005df0 <__ieee754_pow+0x3f0>)
 8005ccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cd0:	f7fa fa42 	bl	8000158 <__aeabi_dsub>
 8005cd4:	4622      	mov	r2, r4
 8005cd6:	462b      	mov	r3, r5
 8005cd8:	f7fa fbf6 	bl	80004c8 <__aeabi_dmul>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	4949      	ldr	r1, [pc, #292]	@ (8005e08 <__ieee754_pow+0x408>)
 8005ce4:	f7fa fa38 	bl	8000158 <__aeabi_dsub>
 8005ce8:	4622      	mov	r2, r4
 8005cea:	4680      	mov	r8, r0
 8005cec:	4689      	mov	r9, r1
 8005cee:	462b      	mov	r3, r5
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	f7fa fbe8 	bl	80004c8 <__aeabi_dmul>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4640      	mov	r0, r8
 8005cfe:	4649      	mov	r1, r9
 8005d00:	f7fa fbe2 	bl	80004c8 <__aeabi_dmul>
 8005d04:	a33c      	add	r3, pc, #240	@ (adr r3, 8005df8 <__ieee754_pow+0x3f8>)
 8005d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0a:	f7fa fbdd 	bl	80004c8 <__aeabi_dmul>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	460b      	mov	r3, r1
 8005d12:	4650      	mov	r0, sl
 8005d14:	4659      	mov	r1, fp
 8005d16:	f7fa fa1f 	bl	8000158 <__aeabi_dsub>
 8005d1a:	2400      	movs	r4, #0
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	4680      	mov	r8, r0
 8005d22:	4689      	mov	r9, r1
 8005d24:	4630      	mov	r0, r6
 8005d26:	4639      	mov	r1, r7
 8005d28:	f7fa fa18 	bl	800015c <__adddf3>
 8005d2c:	4632      	mov	r2, r6
 8005d2e:	463b      	mov	r3, r7
 8005d30:	4620      	mov	r0, r4
 8005d32:	460d      	mov	r5, r1
 8005d34:	f7fa fa10 	bl	8000158 <__aeabi_dsub>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4640      	mov	r0, r8
 8005d3e:	4649      	mov	r1, r9
 8005d40:	f7fa fa0a 	bl	8000158 <__aeabi_dsub>
 8005d44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d48:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	9304      	str	r3, [sp, #16]
 8005d50:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005d54:	4606      	mov	r6, r0
 8005d56:	460f      	mov	r7, r1
 8005d58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d5c:	4652      	mov	r2, sl
 8005d5e:	465b      	mov	r3, fp
 8005d60:	f7fa f9fa 	bl	8000158 <__aeabi_dsub>
 8005d64:	4622      	mov	r2, r4
 8005d66:	462b      	mov	r3, r5
 8005d68:	f7fa fbae 	bl	80004c8 <__aeabi_dmul>
 8005d6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d70:	4680      	mov	r8, r0
 8005d72:	4689      	mov	r9, r1
 8005d74:	4630      	mov	r0, r6
 8005d76:	4639      	mov	r1, r7
 8005d78:	f7fa fba6 	bl	80004c8 <__aeabi_dmul>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4640      	mov	r0, r8
 8005d82:	4649      	mov	r1, r9
 8005d84:	f7fa f9ea 	bl	800015c <__adddf3>
 8005d88:	4652      	mov	r2, sl
 8005d8a:	465b      	mov	r3, fp
 8005d8c:	4606      	mov	r6, r0
 8005d8e:	460f      	mov	r7, r1
 8005d90:	4620      	mov	r0, r4
 8005d92:	4629      	mov	r1, r5
 8005d94:	f7fa fb98 	bl	80004c8 <__aeabi_dmul>
 8005d98:	460b      	mov	r3, r1
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	4680      	mov	r8, r0
 8005d9e:	4689      	mov	r9, r1
 8005da0:	4630      	mov	r0, r6
 8005da2:	4639      	mov	r1, r7
 8005da4:	f7fa f9da 	bl	800015c <__adddf3>
 8005da8:	4b18      	ldr	r3, [pc, #96]	@ (8005e0c <__ieee754_pow+0x40c>)
 8005daa:	4604      	mov	r4, r0
 8005dac:	4299      	cmp	r1, r3
 8005dae:	460d      	mov	r5, r1
 8005db0:	468a      	mov	sl, r1
 8005db2:	468b      	mov	fp, r1
 8005db4:	f340 82e0 	ble.w	8006378 <__ieee754_pow+0x978>
 8005db8:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8005dbc:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8005dc0:	4303      	orrs	r3, r0
 8005dc2:	f000 81df 	beq.w	8006184 <__ieee754_pow+0x784>
 8005dc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f7fa fded 	bl	80009ac <__aeabi_dcmplt>
 8005dd2:	3800      	subs	r0, #0
 8005dd4:	bf18      	it	ne
 8005dd6:	2001      	movne	r0, #1
 8005dd8:	e71d      	b.n	8005c16 <__ieee754_pow+0x216>
 8005dda:	bf00      	nop
 8005ddc:	f3af 8000 	nop.w
 8005de0:	60000000 	.word	0x60000000
 8005de4:	3ff71547 	.word	0x3ff71547
 8005de8:	f85ddf44 	.word	0xf85ddf44
 8005dec:	3e54ae0b 	.word	0x3e54ae0b
 8005df0:	55555555 	.word	0x55555555
 8005df4:	3fd55555 	.word	0x3fd55555
 8005df8:	652b82fe 	.word	0x652b82fe
 8005dfc:	3ff71547 	.word	0x3ff71547
 8005e00:	3ff00000 	.word	0x3ff00000
 8005e04:	3fd00000 	.word	0x3fd00000
 8005e08:	3fe00000 	.word	0x3fe00000
 8005e0c:	408fffff 	.word	0x408fffff
 8005e10:	4ad3      	ldr	r2, [pc, #844]	@ (8006160 <__ieee754_pow+0x760>)
 8005e12:	402a      	ands	r2, r5
 8005e14:	2a00      	cmp	r2, #0
 8005e16:	f040 817a 	bne.w	800610e <__ieee754_pow+0x70e>
 8005e1a:	4bd2      	ldr	r3, [pc, #840]	@ (8006164 <__ieee754_pow+0x764>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f7fa fb53 	bl	80004c8 <__aeabi_dmul>
 8005e22:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8005e26:	460b      	mov	r3, r1
 8005e28:	151a      	asrs	r2, r3, #20
 8005e2a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8005e2e:	4422      	add	r2, r4
 8005e30:	920a      	str	r2, [sp, #40]	@ 0x28
 8005e32:	4acd      	ldr	r2, [pc, #820]	@ (8006168 <__ieee754_pow+0x768>)
 8005e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e38:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8005e42:	dd08      	ble.n	8005e56 <__ieee754_pow+0x456>
 8005e44:	4ac9      	ldr	r2, [pc, #804]	@ (800616c <__ieee754_pow+0x76c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	f340 8163 	ble.w	8006112 <__ieee754_pow+0x712>
 8005e4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e4e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8005e52:	3301      	adds	r3, #1
 8005e54:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e56:	2600      	movs	r6, #0
 8005e58:	00f3      	lsls	r3, r6, #3
 8005e5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e5c:	4bc4      	ldr	r3, [pc, #784]	@ (8006170 <__ieee754_pow+0x770>)
 8005e5e:	4629      	mov	r1, r5
 8005e60:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005e64:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005e6e:	4623      	mov	r3, r4
 8005e70:	4682      	mov	sl, r0
 8005e72:	f7fa f971 	bl	8000158 <__aeabi_dsub>
 8005e76:	4652      	mov	r2, sl
 8005e78:	462b      	mov	r3, r5
 8005e7a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8005e7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005e82:	f7fa f96b 	bl	800015c <__adddf3>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	2000      	movs	r0, #0
 8005e8c:	49b9      	ldr	r1, [pc, #740]	@ (8006174 <__ieee754_pow+0x774>)
 8005e8e:	f7fa fc45 	bl	800071c <__aeabi_ddiv>
 8005e92:	4602      	mov	r2, r0
 8005e94:	460b      	mov	r3, r1
 8005e96:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005e9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e9e:	f7fa fb13 	bl	80004c8 <__aeabi_dmul>
 8005ea2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005ea6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8005eaa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005eae:	2300      	movs	r3, #0
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	46ab      	mov	fp, r5
 8005eb4:	106d      	asrs	r5, r5, #1
 8005eb6:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8005eba:	9304      	str	r3, [sp, #16]
 8005ebc:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8005ec0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005ec4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8005ec8:	4640      	mov	r0, r8
 8005eca:	4649      	mov	r1, r9
 8005ecc:	4614      	mov	r4, r2
 8005ece:	461d      	mov	r5, r3
 8005ed0:	f7fa fafa 	bl	80004c8 <__aeabi_dmul>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005edc:	f7fa f93c 	bl	8000158 <__aeabi_dsub>
 8005ee0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ee4:	4606      	mov	r6, r0
 8005ee6:	460f      	mov	r7, r1
 8005ee8:	4620      	mov	r0, r4
 8005eea:	4629      	mov	r1, r5
 8005eec:	f7fa f934 	bl	8000158 <__aeabi_dsub>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	4650      	mov	r0, sl
 8005ef6:	4659      	mov	r1, fp
 8005ef8:	f7fa f92e 	bl	8000158 <__aeabi_dsub>
 8005efc:	4642      	mov	r2, r8
 8005efe:	464b      	mov	r3, r9
 8005f00:	f7fa fae2 	bl	80004c8 <__aeabi_dmul>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	4630      	mov	r0, r6
 8005f0a:	4639      	mov	r1, r7
 8005f0c:	f7fa f924 	bl	8000158 <__aeabi_dsub>
 8005f10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005f14:	f7fa fad8 	bl	80004c8 <__aeabi_dmul>
 8005f18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f1c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005f20:	4610      	mov	r0, r2
 8005f22:	4619      	mov	r1, r3
 8005f24:	f7fa fad0 	bl	80004c8 <__aeabi_dmul>
 8005f28:	a37b      	add	r3, pc, #492	@ (adr r3, 8006118 <__ieee754_pow+0x718>)
 8005f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2e:	4604      	mov	r4, r0
 8005f30:	460d      	mov	r5, r1
 8005f32:	f7fa fac9 	bl	80004c8 <__aeabi_dmul>
 8005f36:	a37a      	add	r3, pc, #488	@ (adr r3, 8006120 <__ieee754_pow+0x720>)
 8005f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3c:	f7fa f90e 	bl	800015c <__adddf3>
 8005f40:	4622      	mov	r2, r4
 8005f42:	462b      	mov	r3, r5
 8005f44:	f7fa fac0 	bl	80004c8 <__aeabi_dmul>
 8005f48:	a377      	add	r3, pc, #476	@ (adr r3, 8006128 <__ieee754_pow+0x728>)
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	f7fa f905 	bl	800015c <__adddf3>
 8005f52:	4622      	mov	r2, r4
 8005f54:	462b      	mov	r3, r5
 8005f56:	f7fa fab7 	bl	80004c8 <__aeabi_dmul>
 8005f5a:	a375      	add	r3, pc, #468	@ (adr r3, 8006130 <__ieee754_pow+0x730>)
 8005f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f60:	f7fa f8fc 	bl	800015c <__adddf3>
 8005f64:	4622      	mov	r2, r4
 8005f66:	462b      	mov	r3, r5
 8005f68:	f7fa faae 	bl	80004c8 <__aeabi_dmul>
 8005f6c:	a372      	add	r3, pc, #456	@ (adr r3, 8006138 <__ieee754_pow+0x738>)
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	f7fa f8f3 	bl	800015c <__adddf3>
 8005f76:	4622      	mov	r2, r4
 8005f78:	462b      	mov	r3, r5
 8005f7a:	f7fa faa5 	bl	80004c8 <__aeabi_dmul>
 8005f7e:	a370      	add	r3, pc, #448	@ (adr r3, 8006140 <__ieee754_pow+0x740>)
 8005f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f84:	f7fa f8ea 	bl	800015c <__adddf3>
 8005f88:	4622      	mov	r2, r4
 8005f8a:	4606      	mov	r6, r0
 8005f8c:	460f      	mov	r7, r1
 8005f8e:	462b      	mov	r3, r5
 8005f90:	4620      	mov	r0, r4
 8005f92:	4629      	mov	r1, r5
 8005f94:	f7fa fa98 	bl	80004c8 <__aeabi_dmul>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	4639      	mov	r1, r7
 8005fa0:	f7fa fa92 	bl	80004c8 <__aeabi_dmul>
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	460d      	mov	r5, r1
 8005fa8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fac:	4642      	mov	r2, r8
 8005fae:	464b      	mov	r3, r9
 8005fb0:	f7fa f8d4 	bl	800015c <__adddf3>
 8005fb4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005fb8:	f7fa fa86 	bl	80004c8 <__aeabi_dmul>
 8005fbc:	4622      	mov	r2, r4
 8005fbe:	462b      	mov	r3, r5
 8005fc0:	f7fa f8cc 	bl	800015c <__adddf3>
 8005fc4:	4642      	mov	r2, r8
 8005fc6:	4682      	mov	sl, r0
 8005fc8:	468b      	mov	fp, r1
 8005fca:	464b      	mov	r3, r9
 8005fcc:	4640      	mov	r0, r8
 8005fce:	4649      	mov	r1, r9
 8005fd0:	f7fa fa7a 	bl	80004c8 <__aeabi_dmul>
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	4b68      	ldr	r3, [pc, #416]	@ (8006178 <__ieee754_pow+0x778>)
 8005fd8:	4606      	mov	r6, r0
 8005fda:	460f      	mov	r7, r1
 8005fdc:	f7fa f8be 	bl	800015c <__adddf3>
 8005fe0:	4652      	mov	r2, sl
 8005fe2:	465b      	mov	r3, fp
 8005fe4:	f7fa f8ba 	bl	800015c <__adddf3>
 8005fe8:	2400      	movs	r4, #0
 8005fea:	460d      	mov	r5, r1
 8005fec:	4622      	mov	r2, r4
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4640      	mov	r0, r8
 8005ff2:	4649      	mov	r1, r9
 8005ff4:	f7fa fa68 	bl	80004c8 <__aeabi_dmul>
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	4680      	mov	r8, r0
 8005ffc:	4689      	mov	r9, r1
 8005ffe:	4620      	mov	r0, r4
 8006000:	4629      	mov	r1, r5
 8006002:	4b5d      	ldr	r3, [pc, #372]	@ (8006178 <__ieee754_pow+0x778>)
 8006004:	f7fa f8a8 	bl	8000158 <__aeabi_dsub>
 8006008:	4632      	mov	r2, r6
 800600a:	463b      	mov	r3, r7
 800600c:	f7fa f8a4 	bl	8000158 <__aeabi_dsub>
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	4650      	mov	r0, sl
 8006016:	4659      	mov	r1, fp
 8006018:	f7fa f89e 	bl	8000158 <__aeabi_dsub>
 800601c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006020:	f7fa fa52 	bl	80004c8 <__aeabi_dmul>
 8006024:	4622      	mov	r2, r4
 8006026:	4606      	mov	r6, r0
 8006028:	460f      	mov	r7, r1
 800602a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800602e:	462b      	mov	r3, r5
 8006030:	f7fa fa4a 	bl	80004c8 <__aeabi_dmul>
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	4630      	mov	r0, r6
 800603a:	4639      	mov	r1, r7
 800603c:	f7fa f88e 	bl	800015c <__adddf3>
 8006040:	2400      	movs	r4, #0
 8006042:	4606      	mov	r6, r0
 8006044:	460f      	mov	r7, r1
 8006046:	4602      	mov	r2, r0
 8006048:	460b      	mov	r3, r1
 800604a:	4640      	mov	r0, r8
 800604c:	4649      	mov	r1, r9
 800604e:	f7fa f885 	bl	800015c <__adddf3>
 8006052:	a33d      	add	r3, pc, #244	@ (adr r3, 8006148 <__ieee754_pow+0x748>)
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	4620      	mov	r0, r4
 800605a:	460d      	mov	r5, r1
 800605c:	f7fa fa34 	bl	80004c8 <__aeabi_dmul>
 8006060:	4642      	mov	r2, r8
 8006062:	464b      	mov	r3, r9
 8006064:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006068:	4620      	mov	r0, r4
 800606a:	4629      	mov	r1, r5
 800606c:	f7fa f874 	bl	8000158 <__aeabi_dsub>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4630      	mov	r0, r6
 8006076:	4639      	mov	r1, r7
 8006078:	f7fa f86e 	bl	8000158 <__aeabi_dsub>
 800607c:	a334      	add	r3, pc, #208	@ (adr r3, 8006150 <__ieee754_pow+0x750>)
 800607e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006082:	f7fa fa21 	bl	80004c8 <__aeabi_dmul>
 8006086:	a334      	add	r3, pc, #208	@ (adr r3, 8006158 <__ieee754_pow+0x758>)
 8006088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608c:	4606      	mov	r6, r0
 800608e:	460f      	mov	r7, r1
 8006090:	4620      	mov	r0, r4
 8006092:	4629      	mov	r1, r5
 8006094:	f7fa fa18 	bl	80004c8 <__aeabi_dmul>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4630      	mov	r0, r6
 800609e:	4639      	mov	r1, r7
 80060a0:	f7fa f85c 	bl	800015c <__adddf3>
 80060a4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80060a6:	4b35      	ldr	r3, [pc, #212]	@ (800617c <__ieee754_pow+0x77c>)
 80060a8:	2400      	movs	r4, #0
 80060aa:	4413      	add	r3, r2
 80060ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b0:	f7fa f854 	bl	800015c <__adddf3>
 80060b4:	4682      	mov	sl, r0
 80060b6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80060b8:	468b      	mov	fp, r1
 80060ba:	f7fa f99b 	bl	80003f4 <__aeabi_i2d>
 80060be:	4606      	mov	r6, r0
 80060c0:	460f      	mov	r7, r1
 80060c2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80060c4:	4b2e      	ldr	r3, [pc, #184]	@ (8006180 <__ieee754_pow+0x780>)
 80060c6:	4413      	add	r3, r2
 80060c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060cc:	4652      	mov	r2, sl
 80060ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060d2:	465b      	mov	r3, fp
 80060d4:	f7fa f842 	bl	800015c <__adddf3>
 80060d8:	4642      	mov	r2, r8
 80060da:	464b      	mov	r3, r9
 80060dc:	f7fa f83e 	bl	800015c <__adddf3>
 80060e0:	4632      	mov	r2, r6
 80060e2:	463b      	mov	r3, r7
 80060e4:	f7fa f83a 	bl	800015c <__adddf3>
 80060e8:	4632      	mov	r2, r6
 80060ea:	463b      	mov	r3, r7
 80060ec:	4620      	mov	r0, r4
 80060ee:	460d      	mov	r5, r1
 80060f0:	f7fa f832 	bl	8000158 <__aeabi_dsub>
 80060f4:	4642      	mov	r2, r8
 80060f6:	464b      	mov	r3, r9
 80060f8:	f7fa f82e 	bl	8000158 <__aeabi_dsub>
 80060fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006100:	f7fa f82a 	bl	8000158 <__aeabi_dsub>
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	4650      	mov	r0, sl
 800610a:	4659      	mov	r1, fp
 800610c:	e618      	b.n	8005d40 <__ieee754_pow+0x340>
 800610e:	2400      	movs	r4, #0
 8006110:	e68a      	b.n	8005e28 <__ieee754_pow+0x428>
 8006112:	2601      	movs	r6, #1
 8006114:	e6a0      	b.n	8005e58 <__ieee754_pow+0x458>
 8006116:	bf00      	nop
 8006118:	4a454eef 	.word	0x4a454eef
 800611c:	3fca7e28 	.word	0x3fca7e28
 8006120:	93c9db65 	.word	0x93c9db65
 8006124:	3fcd864a 	.word	0x3fcd864a
 8006128:	a91d4101 	.word	0xa91d4101
 800612c:	3fd17460 	.word	0x3fd17460
 8006130:	518f264d 	.word	0x518f264d
 8006134:	3fd55555 	.word	0x3fd55555
 8006138:	db6fabff 	.word	0xdb6fabff
 800613c:	3fdb6db6 	.word	0x3fdb6db6
 8006140:	33333303 	.word	0x33333303
 8006144:	3fe33333 	.word	0x3fe33333
 8006148:	e0000000 	.word	0xe0000000
 800614c:	3feec709 	.word	0x3feec709
 8006150:	dc3a03fd 	.word	0xdc3a03fd
 8006154:	3feec709 	.word	0x3feec709
 8006158:	145b01f5 	.word	0x145b01f5
 800615c:	be3e2fe0 	.word	0xbe3e2fe0
 8006160:	7ff00000 	.word	0x7ff00000
 8006164:	43400000 	.word	0x43400000
 8006168:	0003988e 	.word	0x0003988e
 800616c:	000bb679 	.word	0x000bb679
 8006170:	08007318 	.word	0x08007318
 8006174:	3ff00000 	.word	0x3ff00000
 8006178:	40080000 	.word	0x40080000
 800617c:	080072f8 	.word	0x080072f8
 8006180:	08007308 	.word	0x08007308
 8006184:	a39a      	add	r3, pc, #616	@ (adr r3, 80063f0 <__ieee754_pow+0x9f0>)
 8006186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618a:	4630      	mov	r0, r6
 800618c:	4639      	mov	r1, r7
 800618e:	f7f9 ffe5 	bl	800015c <__adddf3>
 8006192:	4642      	mov	r2, r8
 8006194:	e9cd 0100 	strd	r0, r1, [sp]
 8006198:	464b      	mov	r3, r9
 800619a:	4620      	mov	r0, r4
 800619c:	4629      	mov	r1, r5
 800619e:	f7f9 ffdb 	bl	8000158 <__aeabi_dsub>
 80061a2:	4602      	mov	r2, r0
 80061a4:	460b      	mov	r3, r1
 80061a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061aa:	f7fa fc1d 	bl	80009e8 <__aeabi_dcmpgt>
 80061ae:	2800      	cmp	r0, #0
 80061b0:	f47f ae09 	bne.w	8005dc6 <__ieee754_pow+0x3c6>
 80061b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80061b8:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80061bc:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80061c0:	fa43 fa0a 	asr.w	sl, r3, sl
 80061c4:	44da      	add	sl, fp
 80061c6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80061ca:	489b      	ldr	r0, [pc, #620]	@ (8006438 <__ieee754_pow+0xa38>)
 80061cc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80061d0:	4108      	asrs	r0, r1
 80061d2:	ea00 030a 	and.w	r3, r0, sl
 80061d6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80061da:	f1c1 0114 	rsb	r1, r1, #20
 80061de:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80061e2:	4640      	mov	r0, r8
 80061e4:	fa4a fa01 	asr.w	sl, sl, r1
 80061e8:	f1bb 0f00 	cmp.w	fp, #0
 80061ec:	4649      	mov	r1, r9
 80061ee:	f04f 0200 	mov.w	r2, #0
 80061f2:	bfb8      	it	lt
 80061f4:	f1ca 0a00 	rsblt	sl, sl, #0
 80061f8:	f7f9 ffae 	bl	8000158 <__aeabi_dsub>
 80061fc:	4680      	mov	r8, r0
 80061fe:	4689      	mov	r9, r1
 8006200:	2400      	movs	r4, #0
 8006202:	4632      	mov	r2, r6
 8006204:	463b      	mov	r3, r7
 8006206:	4640      	mov	r0, r8
 8006208:	4649      	mov	r1, r9
 800620a:	f7f9 ffa7 	bl	800015c <__adddf3>
 800620e:	a37a      	add	r3, pc, #488	@ (adr r3, 80063f8 <__ieee754_pow+0x9f8>)
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	4620      	mov	r0, r4
 8006216:	460d      	mov	r5, r1
 8006218:	f7fa f956 	bl	80004c8 <__aeabi_dmul>
 800621c:	4642      	mov	r2, r8
 800621e:	464b      	mov	r3, r9
 8006220:	e9cd 0100 	strd	r0, r1, [sp]
 8006224:	4620      	mov	r0, r4
 8006226:	4629      	mov	r1, r5
 8006228:	f7f9 ff96 	bl	8000158 <__aeabi_dsub>
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	4630      	mov	r0, r6
 8006232:	4639      	mov	r1, r7
 8006234:	f7f9 ff90 	bl	8000158 <__aeabi_dsub>
 8006238:	a371      	add	r3, pc, #452	@ (adr r3, 8006400 <__ieee754_pow+0xa00>)
 800623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623e:	f7fa f943 	bl	80004c8 <__aeabi_dmul>
 8006242:	a371      	add	r3, pc, #452	@ (adr r3, 8006408 <__ieee754_pow+0xa08>)
 8006244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006248:	4680      	mov	r8, r0
 800624a:	4689      	mov	r9, r1
 800624c:	4620      	mov	r0, r4
 800624e:	4629      	mov	r1, r5
 8006250:	f7fa f93a 	bl	80004c8 <__aeabi_dmul>
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	4640      	mov	r0, r8
 800625a:	4649      	mov	r1, r9
 800625c:	f7f9 ff7e 	bl	800015c <__adddf3>
 8006260:	4604      	mov	r4, r0
 8006262:	460d      	mov	r5, r1
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	e9dd 0100 	ldrd	r0, r1, [sp]
 800626c:	f7f9 ff76 	bl	800015c <__adddf3>
 8006270:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006274:	4680      	mov	r8, r0
 8006276:	4689      	mov	r9, r1
 8006278:	f7f9 ff6e 	bl	8000158 <__aeabi_dsub>
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	4620      	mov	r0, r4
 8006282:	4629      	mov	r1, r5
 8006284:	f7f9 ff68 	bl	8000158 <__aeabi_dsub>
 8006288:	4642      	mov	r2, r8
 800628a:	4606      	mov	r6, r0
 800628c:	460f      	mov	r7, r1
 800628e:	464b      	mov	r3, r9
 8006290:	4640      	mov	r0, r8
 8006292:	4649      	mov	r1, r9
 8006294:	f7fa f918 	bl	80004c8 <__aeabi_dmul>
 8006298:	a35d      	add	r3, pc, #372	@ (adr r3, 8006410 <__ieee754_pow+0xa10>)
 800629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629e:	4604      	mov	r4, r0
 80062a0:	460d      	mov	r5, r1
 80062a2:	f7fa f911 	bl	80004c8 <__aeabi_dmul>
 80062a6:	a35c      	add	r3, pc, #368	@ (adr r3, 8006418 <__ieee754_pow+0xa18>)
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	f7f9 ff54 	bl	8000158 <__aeabi_dsub>
 80062b0:	4622      	mov	r2, r4
 80062b2:	462b      	mov	r3, r5
 80062b4:	f7fa f908 	bl	80004c8 <__aeabi_dmul>
 80062b8:	a359      	add	r3, pc, #356	@ (adr r3, 8006420 <__ieee754_pow+0xa20>)
 80062ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062be:	f7f9 ff4d 	bl	800015c <__adddf3>
 80062c2:	4622      	mov	r2, r4
 80062c4:	462b      	mov	r3, r5
 80062c6:	f7fa f8ff 	bl	80004c8 <__aeabi_dmul>
 80062ca:	a357      	add	r3, pc, #348	@ (adr r3, 8006428 <__ieee754_pow+0xa28>)
 80062cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d0:	f7f9 ff42 	bl	8000158 <__aeabi_dsub>
 80062d4:	4622      	mov	r2, r4
 80062d6:	462b      	mov	r3, r5
 80062d8:	f7fa f8f6 	bl	80004c8 <__aeabi_dmul>
 80062dc:	a354      	add	r3, pc, #336	@ (adr r3, 8006430 <__ieee754_pow+0xa30>)
 80062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e2:	f7f9 ff3b 	bl	800015c <__adddf3>
 80062e6:	4622      	mov	r2, r4
 80062e8:	462b      	mov	r3, r5
 80062ea:	f7fa f8ed 	bl	80004c8 <__aeabi_dmul>
 80062ee:	4602      	mov	r2, r0
 80062f0:	460b      	mov	r3, r1
 80062f2:	4640      	mov	r0, r8
 80062f4:	4649      	mov	r1, r9
 80062f6:	f7f9 ff2f 	bl	8000158 <__aeabi_dsub>
 80062fa:	4604      	mov	r4, r0
 80062fc:	460d      	mov	r5, r1
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	4640      	mov	r0, r8
 8006304:	4649      	mov	r1, r9
 8006306:	f7fa f8df 	bl	80004c8 <__aeabi_dmul>
 800630a:	2200      	movs	r2, #0
 800630c:	e9cd 0100 	strd	r0, r1, [sp]
 8006310:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006314:	4620      	mov	r0, r4
 8006316:	4629      	mov	r1, r5
 8006318:	f7f9 ff1e 	bl	8000158 <__aeabi_dsub>
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006324:	f7fa f9fa 	bl	800071c <__aeabi_ddiv>
 8006328:	4632      	mov	r2, r6
 800632a:	4604      	mov	r4, r0
 800632c:	460d      	mov	r5, r1
 800632e:	463b      	mov	r3, r7
 8006330:	4640      	mov	r0, r8
 8006332:	4649      	mov	r1, r9
 8006334:	f7fa f8c8 	bl	80004c8 <__aeabi_dmul>
 8006338:	4632      	mov	r2, r6
 800633a:	463b      	mov	r3, r7
 800633c:	f7f9 ff0e 	bl	800015c <__adddf3>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	4620      	mov	r0, r4
 8006346:	4629      	mov	r1, r5
 8006348:	f7f9 ff06 	bl	8000158 <__aeabi_dsub>
 800634c:	4642      	mov	r2, r8
 800634e:	464b      	mov	r3, r9
 8006350:	f7f9 ff02 	bl	8000158 <__aeabi_dsub>
 8006354:	4602      	mov	r2, r0
 8006356:	460b      	mov	r3, r1
 8006358:	2000      	movs	r0, #0
 800635a:	4938      	ldr	r1, [pc, #224]	@ (800643c <__ieee754_pow+0xa3c>)
 800635c:	f7f9 fefc 	bl	8000158 <__aeabi_dsub>
 8006360:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006364:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8006368:	da2e      	bge.n	80063c8 <__ieee754_pow+0x9c8>
 800636a:	4652      	mov	r2, sl
 800636c:	f000 fa68 	bl	8006840 <scalbn>
 8006370:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006374:	f7ff bbed 	b.w	8005b52 <__ieee754_pow+0x152>
 8006378:	4c31      	ldr	r4, [pc, #196]	@ (8006440 <__ieee754_pow+0xa40>)
 800637a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800637e:	42a3      	cmp	r3, r4
 8006380:	d91a      	bls.n	80063b8 <__ieee754_pow+0x9b8>
 8006382:	4b30      	ldr	r3, [pc, #192]	@ (8006444 <__ieee754_pow+0xa44>)
 8006384:	440b      	add	r3, r1
 8006386:	4303      	orrs	r3, r0
 8006388:	d009      	beq.n	800639e <__ieee754_pow+0x99e>
 800638a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800638e:	2200      	movs	r2, #0
 8006390:	2300      	movs	r3, #0
 8006392:	f7fa fb0b 	bl	80009ac <__aeabi_dcmplt>
 8006396:	3800      	subs	r0, #0
 8006398:	bf18      	it	ne
 800639a:	2001      	movne	r0, #1
 800639c:	e444      	b.n	8005c28 <__ieee754_pow+0x228>
 800639e:	4642      	mov	r2, r8
 80063a0:	464b      	mov	r3, r9
 80063a2:	f7f9 fed9 	bl	8000158 <__aeabi_dsub>
 80063a6:	4632      	mov	r2, r6
 80063a8:	463b      	mov	r3, r7
 80063aa:	f7fa fb13 	bl	80009d4 <__aeabi_dcmpge>
 80063ae:	2800      	cmp	r0, #0
 80063b0:	d1eb      	bne.n	800638a <__ieee754_pow+0x98a>
 80063b2:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8006448 <__ieee754_pow+0xa48>
 80063b6:	e6fd      	b.n	80061b4 <__ieee754_pow+0x7b4>
 80063b8:	469a      	mov	sl, r3
 80063ba:	4b24      	ldr	r3, [pc, #144]	@ (800644c <__ieee754_pow+0xa4c>)
 80063bc:	459a      	cmp	sl, r3
 80063be:	f63f aef9 	bhi.w	80061b4 <__ieee754_pow+0x7b4>
 80063c2:	f8dd a010 	ldr.w	sl, [sp, #16]
 80063c6:	e71b      	b.n	8006200 <__ieee754_pow+0x800>
 80063c8:	4621      	mov	r1, r4
 80063ca:	e7d1      	b.n	8006370 <__ieee754_pow+0x970>
 80063cc:	2000      	movs	r0, #0
 80063ce:	491b      	ldr	r1, [pc, #108]	@ (800643c <__ieee754_pow+0xa3c>)
 80063d0:	f7ff bb34 	b.w	8005a3c <__ieee754_pow+0x3c>
 80063d4:	2000      	movs	r0, #0
 80063d6:	2100      	movs	r1, #0
 80063d8:	f7ff bb30 	b.w	8005a3c <__ieee754_pow+0x3c>
 80063dc:	4650      	mov	r0, sl
 80063de:	4659      	mov	r1, fp
 80063e0:	f7ff bb2c 	b.w	8005a3c <__ieee754_pow+0x3c>
 80063e4:	460c      	mov	r4, r1
 80063e6:	f7ff bb79 	b.w	8005adc <__ieee754_pow+0xdc>
 80063ea:	2400      	movs	r4, #0
 80063ec:	f7ff bb64 	b.w	8005ab8 <__ieee754_pow+0xb8>
 80063f0:	652b82fe 	.word	0x652b82fe
 80063f4:	3c971547 	.word	0x3c971547
 80063f8:	00000000 	.word	0x00000000
 80063fc:	3fe62e43 	.word	0x3fe62e43
 8006400:	fefa39ef 	.word	0xfefa39ef
 8006404:	3fe62e42 	.word	0x3fe62e42
 8006408:	0ca86c39 	.word	0x0ca86c39
 800640c:	be205c61 	.word	0xbe205c61
 8006410:	72bea4d0 	.word	0x72bea4d0
 8006414:	3e663769 	.word	0x3e663769
 8006418:	c5d26bf1 	.word	0xc5d26bf1
 800641c:	3ebbbd41 	.word	0x3ebbbd41
 8006420:	af25de2c 	.word	0xaf25de2c
 8006424:	3f11566a 	.word	0x3f11566a
 8006428:	16bebd93 	.word	0x16bebd93
 800642c:	3f66c16c 	.word	0x3f66c16c
 8006430:	5555553e 	.word	0x5555553e
 8006434:	3fc55555 	.word	0x3fc55555
 8006438:	fff00000 	.word	0xfff00000
 800643c:	3ff00000 	.word	0x3ff00000
 8006440:	4090cbff 	.word	0x4090cbff
 8006444:	3f6f3400 	.word	0x3f6f3400
 8006448:	4090cc00 	.word	0x4090cc00
 800644c:	3fe00000 	.word	0x3fe00000

08006450 <__ieee754_rem_pio2>:
 8006450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006454:	4bc4      	ldr	r3, [pc, #784]	@ (8006768 <__ieee754_rem_pio2+0x318>)
 8006456:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800645a:	b08d      	sub	sp, #52	@ 0x34
 800645c:	4598      	cmp	r8, r3
 800645e:	4606      	mov	r6, r0
 8006460:	460f      	mov	r7, r1
 8006462:	4614      	mov	r4, r2
 8006464:	9104      	str	r1, [sp, #16]
 8006466:	d807      	bhi.n	8006478 <__ieee754_rem_pio2+0x28>
 8006468:	e9c2 6700 	strd	r6, r7, [r2]
 800646c:	2300      	movs	r3, #0
 800646e:	2200      	movs	r2, #0
 8006470:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006474:	2500      	movs	r5, #0
 8006476:	e026      	b.n	80064c6 <__ieee754_rem_pio2+0x76>
 8006478:	4bbc      	ldr	r3, [pc, #752]	@ (800676c <__ieee754_rem_pio2+0x31c>)
 800647a:	4598      	cmp	r8, r3
 800647c:	d876      	bhi.n	800656c <__ieee754_rem_pio2+0x11c>
 800647e:	9b04      	ldr	r3, [sp, #16]
 8006480:	4dbb      	ldr	r5, [pc, #748]	@ (8006770 <__ieee754_rem_pio2+0x320>)
 8006482:	2b00      	cmp	r3, #0
 8006484:	a3aa      	add	r3, pc, #680	@ (adr r3, 8006730 <__ieee754_rem_pio2+0x2e0>)
 8006486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648a:	dd38      	ble.n	80064fe <__ieee754_rem_pio2+0xae>
 800648c:	f7f9 fe64 	bl	8000158 <__aeabi_dsub>
 8006490:	45a8      	cmp	r8, r5
 8006492:	4606      	mov	r6, r0
 8006494:	460f      	mov	r7, r1
 8006496:	d01a      	beq.n	80064ce <__ieee754_rem_pio2+0x7e>
 8006498:	a3a7      	add	r3, pc, #668	@ (adr r3, 8006738 <__ieee754_rem_pio2+0x2e8>)
 800649a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649e:	f7f9 fe5b 	bl	8000158 <__aeabi_dsub>
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	4680      	mov	r8, r0
 80064a8:	4689      	mov	r9, r1
 80064aa:	4630      	mov	r0, r6
 80064ac:	4639      	mov	r1, r7
 80064ae:	f7f9 fe53 	bl	8000158 <__aeabi_dsub>
 80064b2:	a3a1      	add	r3, pc, #644	@ (adr r3, 8006738 <__ieee754_rem_pio2+0x2e8>)
 80064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b8:	f7f9 fe4e 	bl	8000158 <__aeabi_dsub>
 80064bc:	2501      	movs	r5, #1
 80064be:	e9c4 8900 	strd	r8, r9, [r4]
 80064c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80064c6:	4628      	mov	r0, r5
 80064c8:	b00d      	add	sp, #52	@ 0x34
 80064ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ce:	a39c      	add	r3, pc, #624	@ (adr r3, 8006740 <__ieee754_rem_pio2+0x2f0>)
 80064d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d4:	f7f9 fe40 	bl	8000158 <__aeabi_dsub>
 80064d8:	a39b      	add	r3, pc, #620	@ (adr r3, 8006748 <__ieee754_rem_pio2+0x2f8>)
 80064da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064de:	4606      	mov	r6, r0
 80064e0:	460f      	mov	r7, r1
 80064e2:	f7f9 fe39 	bl	8000158 <__aeabi_dsub>
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
 80064ea:	4680      	mov	r8, r0
 80064ec:	4689      	mov	r9, r1
 80064ee:	4630      	mov	r0, r6
 80064f0:	4639      	mov	r1, r7
 80064f2:	f7f9 fe31 	bl	8000158 <__aeabi_dsub>
 80064f6:	a394      	add	r3, pc, #592	@ (adr r3, 8006748 <__ieee754_rem_pio2+0x2f8>)
 80064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fc:	e7dc      	b.n	80064b8 <__ieee754_rem_pio2+0x68>
 80064fe:	f7f9 fe2d 	bl	800015c <__adddf3>
 8006502:	45a8      	cmp	r8, r5
 8006504:	4606      	mov	r6, r0
 8006506:	460f      	mov	r7, r1
 8006508:	d018      	beq.n	800653c <__ieee754_rem_pio2+0xec>
 800650a:	a38b      	add	r3, pc, #556	@ (adr r3, 8006738 <__ieee754_rem_pio2+0x2e8>)
 800650c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006510:	f7f9 fe24 	bl	800015c <__adddf3>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	4680      	mov	r8, r0
 800651a:	4689      	mov	r9, r1
 800651c:	4630      	mov	r0, r6
 800651e:	4639      	mov	r1, r7
 8006520:	f7f9 fe1a 	bl	8000158 <__aeabi_dsub>
 8006524:	a384      	add	r3, pc, #528	@ (adr r3, 8006738 <__ieee754_rem_pio2+0x2e8>)
 8006526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652a:	f7f9 fe17 	bl	800015c <__adddf3>
 800652e:	f04f 35ff 	mov.w	r5, #4294967295
 8006532:	e9c4 8900 	strd	r8, r9, [r4]
 8006536:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800653a:	e7c4      	b.n	80064c6 <__ieee754_rem_pio2+0x76>
 800653c:	a380      	add	r3, pc, #512	@ (adr r3, 8006740 <__ieee754_rem_pio2+0x2f0>)
 800653e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006542:	f7f9 fe0b 	bl	800015c <__adddf3>
 8006546:	a380      	add	r3, pc, #512	@ (adr r3, 8006748 <__ieee754_rem_pio2+0x2f8>)
 8006548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654c:	4606      	mov	r6, r0
 800654e:	460f      	mov	r7, r1
 8006550:	f7f9 fe04 	bl	800015c <__adddf3>
 8006554:	4602      	mov	r2, r0
 8006556:	460b      	mov	r3, r1
 8006558:	4680      	mov	r8, r0
 800655a:	4689      	mov	r9, r1
 800655c:	4630      	mov	r0, r6
 800655e:	4639      	mov	r1, r7
 8006560:	f7f9 fdfa 	bl	8000158 <__aeabi_dsub>
 8006564:	a378      	add	r3, pc, #480	@ (adr r3, 8006748 <__ieee754_rem_pio2+0x2f8>)
 8006566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656a:	e7de      	b.n	800652a <__ieee754_rem_pio2+0xda>
 800656c:	4b81      	ldr	r3, [pc, #516]	@ (8006774 <__ieee754_rem_pio2+0x324>)
 800656e:	4598      	cmp	r8, r3
 8006570:	f200 80cf 	bhi.w	8006712 <__ieee754_rem_pio2+0x2c2>
 8006574:	f7ff f87a 	bl	800566c <fabs>
 8006578:	a375      	add	r3, pc, #468	@ (adr r3, 8006750 <__ieee754_rem_pio2+0x300>)
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	4606      	mov	r6, r0
 8006580:	460f      	mov	r7, r1
 8006582:	f7f9 ffa1 	bl	80004c8 <__aeabi_dmul>
 8006586:	2200      	movs	r2, #0
 8006588:	4b7b      	ldr	r3, [pc, #492]	@ (8006778 <__ieee754_rem_pio2+0x328>)
 800658a:	f7f9 fde7 	bl	800015c <__adddf3>
 800658e:	f7fa fa4b 	bl	8000a28 <__aeabi_d2iz>
 8006592:	4605      	mov	r5, r0
 8006594:	f7f9 ff2e 	bl	80003f4 <__aeabi_i2d>
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065a0:	a363      	add	r3, pc, #396	@ (adr r3, 8006730 <__ieee754_rem_pio2+0x2e0>)
 80065a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a6:	f7f9 ff8f 	bl	80004c8 <__aeabi_dmul>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	4630      	mov	r0, r6
 80065b0:	4639      	mov	r1, r7
 80065b2:	f7f9 fdd1 	bl	8000158 <__aeabi_dsub>
 80065b6:	a360      	add	r3, pc, #384	@ (adr r3, 8006738 <__ieee754_rem_pio2+0x2e8>)
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	4682      	mov	sl, r0
 80065be:	468b      	mov	fp, r1
 80065c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065c4:	f7f9 ff80 	bl	80004c8 <__aeabi_dmul>
 80065c8:	2d1f      	cmp	r5, #31
 80065ca:	4606      	mov	r6, r0
 80065cc:	460f      	mov	r7, r1
 80065ce:	dc0c      	bgt.n	80065ea <__ieee754_rem_pio2+0x19a>
 80065d0:	4b6a      	ldr	r3, [pc, #424]	@ (800677c <__ieee754_rem_pio2+0x32c>)
 80065d2:	1e6a      	subs	r2, r5, #1
 80065d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d8:	4543      	cmp	r3, r8
 80065da:	d006      	beq.n	80065ea <__ieee754_rem_pio2+0x19a>
 80065dc:	4632      	mov	r2, r6
 80065de:	463b      	mov	r3, r7
 80065e0:	4650      	mov	r0, sl
 80065e2:	4659      	mov	r1, fp
 80065e4:	f7f9 fdb8 	bl	8000158 <__aeabi_dsub>
 80065e8:	e00e      	b.n	8006608 <__ieee754_rem_pio2+0x1b8>
 80065ea:	463b      	mov	r3, r7
 80065ec:	4632      	mov	r2, r6
 80065ee:	4650      	mov	r0, sl
 80065f0:	4659      	mov	r1, fp
 80065f2:	f7f9 fdb1 	bl	8000158 <__aeabi_dsub>
 80065f6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80065fa:	9305      	str	r3, [sp, #20]
 80065fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006600:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006604:	2b10      	cmp	r3, #16
 8006606:	dc02      	bgt.n	800660e <__ieee754_rem_pio2+0x1be>
 8006608:	e9c4 0100 	strd	r0, r1, [r4]
 800660c:	e039      	b.n	8006682 <__ieee754_rem_pio2+0x232>
 800660e:	a34c      	add	r3, pc, #304	@ (adr r3, 8006740 <__ieee754_rem_pio2+0x2f0>)
 8006610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006614:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006618:	f7f9 ff56 	bl	80004c8 <__aeabi_dmul>
 800661c:	4606      	mov	r6, r0
 800661e:	460f      	mov	r7, r1
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	4650      	mov	r0, sl
 8006626:	4659      	mov	r1, fp
 8006628:	f7f9 fd96 	bl	8000158 <__aeabi_dsub>
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	4680      	mov	r8, r0
 8006632:	4689      	mov	r9, r1
 8006634:	4650      	mov	r0, sl
 8006636:	4659      	mov	r1, fp
 8006638:	f7f9 fd8e 	bl	8000158 <__aeabi_dsub>
 800663c:	4632      	mov	r2, r6
 800663e:	463b      	mov	r3, r7
 8006640:	f7f9 fd8a 	bl	8000158 <__aeabi_dsub>
 8006644:	a340      	add	r3, pc, #256	@ (adr r3, 8006748 <__ieee754_rem_pio2+0x2f8>)
 8006646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664a:	4606      	mov	r6, r0
 800664c:	460f      	mov	r7, r1
 800664e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006652:	f7f9 ff39 	bl	80004c8 <__aeabi_dmul>
 8006656:	4632      	mov	r2, r6
 8006658:	463b      	mov	r3, r7
 800665a:	f7f9 fd7d 	bl	8000158 <__aeabi_dsub>
 800665e:	4602      	mov	r2, r0
 8006660:	460b      	mov	r3, r1
 8006662:	4606      	mov	r6, r0
 8006664:	460f      	mov	r7, r1
 8006666:	4640      	mov	r0, r8
 8006668:	4649      	mov	r1, r9
 800666a:	f7f9 fd75 	bl	8000158 <__aeabi_dsub>
 800666e:	9a05      	ldr	r2, [sp, #20]
 8006670:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b31      	cmp	r3, #49	@ 0x31
 8006678:	dc20      	bgt.n	80066bc <__ieee754_rem_pio2+0x26c>
 800667a:	46c2      	mov	sl, r8
 800667c:	46cb      	mov	fp, r9
 800667e:	e9c4 0100 	strd	r0, r1, [r4]
 8006682:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006686:	4650      	mov	r0, sl
 8006688:	4642      	mov	r2, r8
 800668a:	464b      	mov	r3, r9
 800668c:	4659      	mov	r1, fp
 800668e:	f7f9 fd63 	bl	8000158 <__aeabi_dsub>
 8006692:	463b      	mov	r3, r7
 8006694:	4632      	mov	r2, r6
 8006696:	f7f9 fd5f 	bl	8000158 <__aeabi_dsub>
 800669a:	9b04      	ldr	r3, [sp, #16]
 800669c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f6bf af10 	bge.w	80064c6 <__ieee754_rem_pio2+0x76>
 80066a6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80066aa:	6063      	str	r3, [r4, #4]
 80066ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80066b0:	f8c4 8000 	str.w	r8, [r4]
 80066b4:	60a0      	str	r0, [r4, #8]
 80066b6:	60e3      	str	r3, [r4, #12]
 80066b8:	426d      	negs	r5, r5
 80066ba:	e704      	b.n	80064c6 <__ieee754_rem_pio2+0x76>
 80066bc:	a326      	add	r3, pc, #152	@ (adr r3, 8006758 <__ieee754_rem_pio2+0x308>)
 80066be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066c6:	f7f9 feff 	bl	80004c8 <__aeabi_dmul>
 80066ca:	4606      	mov	r6, r0
 80066cc:	460f      	mov	r7, r1
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	4640      	mov	r0, r8
 80066d4:	4649      	mov	r1, r9
 80066d6:	f7f9 fd3f 	bl	8000158 <__aeabi_dsub>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	4682      	mov	sl, r0
 80066e0:	468b      	mov	fp, r1
 80066e2:	4640      	mov	r0, r8
 80066e4:	4649      	mov	r1, r9
 80066e6:	f7f9 fd37 	bl	8000158 <__aeabi_dsub>
 80066ea:	4632      	mov	r2, r6
 80066ec:	463b      	mov	r3, r7
 80066ee:	f7f9 fd33 	bl	8000158 <__aeabi_dsub>
 80066f2:	a31b      	add	r3, pc, #108	@ (adr r3, 8006760 <__ieee754_rem_pio2+0x310>)
 80066f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f8:	4606      	mov	r6, r0
 80066fa:	460f      	mov	r7, r1
 80066fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006700:	f7f9 fee2 	bl	80004c8 <__aeabi_dmul>
 8006704:	4632      	mov	r2, r6
 8006706:	463b      	mov	r3, r7
 8006708:	f7f9 fd26 	bl	8000158 <__aeabi_dsub>
 800670c:	4606      	mov	r6, r0
 800670e:	460f      	mov	r7, r1
 8006710:	e764      	b.n	80065dc <__ieee754_rem_pio2+0x18c>
 8006712:	4b1b      	ldr	r3, [pc, #108]	@ (8006780 <__ieee754_rem_pio2+0x330>)
 8006714:	4598      	cmp	r8, r3
 8006716:	d935      	bls.n	8006784 <__ieee754_rem_pio2+0x334>
 8006718:	4602      	mov	r2, r0
 800671a:	460b      	mov	r3, r1
 800671c:	f7f9 fd1c 	bl	8000158 <__aeabi_dsub>
 8006720:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006724:	e9c4 0100 	strd	r0, r1, [r4]
 8006728:	e6a4      	b.n	8006474 <__ieee754_rem_pio2+0x24>
 800672a:	bf00      	nop
 800672c:	f3af 8000 	nop.w
 8006730:	54400000 	.word	0x54400000
 8006734:	3ff921fb 	.word	0x3ff921fb
 8006738:	1a626331 	.word	0x1a626331
 800673c:	3dd0b461 	.word	0x3dd0b461
 8006740:	1a600000 	.word	0x1a600000
 8006744:	3dd0b461 	.word	0x3dd0b461
 8006748:	2e037073 	.word	0x2e037073
 800674c:	3ba3198a 	.word	0x3ba3198a
 8006750:	6dc9c883 	.word	0x6dc9c883
 8006754:	3fe45f30 	.word	0x3fe45f30
 8006758:	2e000000 	.word	0x2e000000
 800675c:	3ba3198a 	.word	0x3ba3198a
 8006760:	252049c1 	.word	0x252049c1
 8006764:	397b839a 	.word	0x397b839a
 8006768:	3fe921fb 	.word	0x3fe921fb
 800676c:	4002d97b 	.word	0x4002d97b
 8006770:	3ff921fb 	.word	0x3ff921fb
 8006774:	413921fb 	.word	0x413921fb
 8006778:	3fe00000 	.word	0x3fe00000
 800677c:	08007328 	.word	0x08007328
 8006780:	7fefffff 	.word	0x7fefffff
 8006784:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006788:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800678c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006790:	460f      	mov	r7, r1
 8006792:	f7fa f949 	bl	8000a28 <__aeabi_d2iz>
 8006796:	f7f9 fe2d 	bl	80003f4 <__aeabi_i2d>
 800679a:	4602      	mov	r2, r0
 800679c:	460b      	mov	r3, r1
 800679e:	4630      	mov	r0, r6
 80067a0:	4639      	mov	r1, r7
 80067a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80067a6:	f7f9 fcd7 	bl	8000158 <__aeabi_dsub>
 80067aa:	2200      	movs	r2, #0
 80067ac:	4b21      	ldr	r3, [pc, #132]	@ (8006834 <__ieee754_rem_pio2+0x3e4>)
 80067ae:	f7f9 fe8b 	bl	80004c8 <__aeabi_dmul>
 80067b2:	460f      	mov	r7, r1
 80067b4:	4606      	mov	r6, r0
 80067b6:	f7fa f937 	bl	8000a28 <__aeabi_d2iz>
 80067ba:	f7f9 fe1b 	bl	80003f4 <__aeabi_i2d>
 80067be:	4602      	mov	r2, r0
 80067c0:	460b      	mov	r3, r1
 80067c2:	4630      	mov	r0, r6
 80067c4:	4639      	mov	r1, r7
 80067c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80067ca:	f7f9 fcc5 	bl	8000158 <__aeabi_dsub>
 80067ce:	2200      	movs	r2, #0
 80067d0:	4b18      	ldr	r3, [pc, #96]	@ (8006834 <__ieee754_rem_pio2+0x3e4>)
 80067d2:	f7f9 fe79 	bl	80004c8 <__aeabi_dmul>
 80067d6:	f04f 0803 	mov.w	r8, #3
 80067da:	2600      	movs	r6, #0
 80067dc:	2700      	movs	r7, #0
 80067de:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80067e2:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80067e6:	4632      	mov	r2, r6
 80067e8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80067ec:	463b      	mov	r3, r7
 80067ee:	46c2      	mov	sl, r8
 80067f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80067f4:	f7fa f8d0 	bl	8000998 <__aeabi_dcmpeq>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	d1f4      	bne.n	80067e6 <__ieee754_rem_pio2+0x396>
 80067fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006838 <__ieee754_rem_pio2+0x3e8>)
 80067fe:	462a      	mov	r2, r5
 8006800:	9301      	str	r3, [sp, #4]
 8006802:	2302      	movs	r3, #2
 8006804:	4621      	mov	r1, r4
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	a806      	add	r0, sp, #24
 800680a:	4653      	mov	r3, sl
 800680c:	f000 f98c 	bl	8006b28 <__kernel_rem_pio2>
 8006810:	9b04      	ldr	r3, [sp, #16]
 8006812:	4605      	mov	r5, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	f6bf ae56 	bge.w	80064c6 <__ieee754_rem_pio2+0x76>
 800681a:	e9d4 2100 	ldrd	r2, r1, [r4]
 800681e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006822:	e9c4 2300 	strd	r2, r3, [r4]
 8006826:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800682a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800682e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006832:	e741      	b.n	80066b8 <__ieee754_rem_pio2+0x268>
 8006834:	41700000 	.word	0x41700000
 8006838:	080073a8 	.word	0x080073a8
 800683c:	00000000 	.word	0x00000000

08006840 <scalbn>:
 8006840:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8006844:	4616      	mov	r6, r2
 8006846:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800684a:	4683      	mov	fp, r0
 800684c:	468c      	mov	ip, r1
 800684e:	460b      	mov	r3, r1
 8006850:	b982      	cbnz	r2, 8006874 <scalbn+0x34>
 8006852:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006856:	4303      	orrs	r3, r0
 8006858:	d039      	beq.n	80068ce <scalbn+0x8e>
 800685a:	4b2f      	ldr	r3, [pc, #188]	@ (8006918 <scalbn+0xd8>)
 800685c:	2200      	movs	r2, #0
 800685e:	f7f9 fe33 	bl	80004c8 <__aeabi_dmul>
 8006862:	4b2e      	ldr	r3, [pc, #184]	@ (800691c <scalbn+0xdc>)
 8006864:	4683      	mov	fp, r0
 8006866:	429e      	cmp	r6, r3
 8006868:	468c      	mov	ip, r1
 800686a:	da0d      	bge.n	8006888 <scalbn+0x48>
 800686c:	a326      	add	r3, pc, #152	@ (adr r3, 8006908 <scalbn+0xc8>)
 800686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006872:	e01b      	b.n	80068ac <scalbn+0x6c>
 8006874:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8006878:	42ba      	cmp	r2, r7
 800687a:	d109      	bne.n	8006890 <scalbn+0x50>
 800687c:	4602      	mov	r2, r0
 800687e:	f7f9 fc6d 	bl	800015c <__adddf3>
 8006882:	4683      	mov	fp, r0
 8006884:	468c      	mov	ip, r1
 8006886:	e022      	b.n	80068ce <scalbn+0x8e>
 8006888:	460b      	mov	r3, r1
 800688a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800688e:	3a36      	subs	r2, #54	@ 0x36
 8006890:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006894:	428e      	cmp	r6, r1
 8006896:	dd0c      	ble.n	80068b2 <scalbn+0x72>
 8006898:	a31d      	add	r3, pc, #116	@ (adr r3, 8006910 <scalbn+0xd0>)
 800689a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689e:	461c      	mov	r4, r3
 80068a0:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 80068a4:	f361 74df 	bfi	r4, r1, #31, #1
 80068a8:	4621      	mov	r1, r4
 80068aa:	481d      	ldr	r0, [pc, #116]	@ (8006920 <scalbn+0xe0>)
 80068ac:	f7f9 fe0c 	bl	80004c8 <__aeabi_dmul>
 80068b0:	e7e7      	b.n	8006882 <scalbn+0x42>
 80068b2:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80068b6:	4432      	add	r2, r6
 80068b8:	428a      	cmp	r2, r1
 80068ba:	dced      	bgt.n	8006898 <scalbn+0x58>
 80068bc:	2a00      	cmp	r2, #0
 80068be:	dd0a      	ble.n	80068d6 <scalbn+0x96>
 80068c0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80068c4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80068c8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80068cc:	46ac      	mov	ip, r5
 80068ce:	4658      	mov	r0, fp
 80068d0:	4661      	mov	r1, ip
 80068d2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80068d6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80068da:	da09      	bge.n	80068f0 <scalbn+0xb0>
 80068dc:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 80068e0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 80068e4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 80068e8:	480e      	ldr	r0, [pc, #56]	@ (8006924 <scalbn+0xe4>)
 80068ea:	f041 011f 	orr.w	r1, r1, #31
 80068ee:	e7bd      	b.n	800686c <scalbn+0x2c>
 80068f0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80068f4:	3236      	adds	r2, #54	@ 0x36
 80068f6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80068fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80068fe:	4658      	mov	r0, fp
 8006900:	4629      	mov	r1, r5
 8006902:	2200      	movs	r2, #0
 8006904:	4b08      	ldr	r3, [pc, #32]	@ (8006928 <scalbn+0xe8>)
 8006906:	e7d1      	b.n	80068ac <scalbn+0x6c>
 8006908:	c2f8f359 	.word	0xc2f8f359
 800690c:	01a56e1f 	.word	0x01a56e1f
 8006910:	8800759c 	.word	0x8800759c
 8006914:	7e37e43c 	.word	0x7e37e43c
 8006918:	43500000 	.word	0x43500000
 800691c:	ffff3cb0 	.word	0xffff3cb0
 8006920:	8800759c 	.word	0x8800759c
 8006924:	c2f8f359 	.word	0xc2f8f359
 8006928:	3c900000 	.word	0x3c900000

0800692c <with_errno>:
 800692c:	b570      	push	{r4, r5, r6, lr}
 800692e:	4604      	mov	r4, r0
 8006930:	460d      	mov	r5, r1
 8006932:	4616      	mov	r6, r2
 8006934:	f7fe fc30 	bl	8005198 <__errno>
 8006938:	4629      	mov	r1, r5
 800693a:	6006      	str	r6, [r0, #0]
 800693c:	4620      	mov	r0, r4
 800693e:	bd70      	pop	{r4, r5, r6, pc}

08006940 <xflow>:
 8006940:	b513      	push	{r0, r1, r4, lr}
 8006942:	4604      	mov	r4, r0
 8006944:	4619      	mov	r1, r3
 8006946:	4610      	mov	r0, r2
 8006948:	b10c      	cbz	r4, 800694e <xflow+0xe>
 800694a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800694e:	e9cd 2300 	strd	r2, r3, [sp]
 8006952:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006956:	f7f9 fdb7 	bl	80004c8 <__aeabi_dmul>
 800695a:	2222      	movs	r2, #34	@ 0x22
 800695c:	b002      	add	sp, #8
 800695e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006962:	f7ff bfe3 	b.w	800692c <with_errno>

08006966 <__math_uflow>:
 8006966:	2200      	movs	r2, #0
 8006968:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800696c:	f7ff bfe8 	b.w	8006940 <xflow>

08006970 <__math_oflow>:
 8006970:	2200      	movs	r2, #0
 8006972:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8006976:	f7ff bfe3 	b.w	8006940 <xflow>
	...

0800697c <__ieee754_sqrt>:
 800697c:	4a67      	ldr	r2, [pc, #412]	@ (8006b1c <__ieee754_sqrt+0x1a0>)
 800697e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006982:	438a      	bics	r2, r1
 8006984:	4606      	mov	r6, r0
 8006986:	460f      	mov	r7, r1
 8006988:	460b      	mov	r3, r1
 800698a:	4604      	mov	r4, r0
 800698c:	d10e      	bne.n	80069ac <__ieee754_sqrt+0x30>
 800698e:	4602      	mov	r2, r0
 8006990:	f7f9 fd9a 	bl	80004c8 <__aeabi_dmul>
 8006994:	4602      	mov	r2, r0
 8006996:	460b      	mov	r3, r1
 8006998:	4630      	mov	r0, r6
 800699a:	4639      	mov	r1, r7
 800699c:	f7f9 fbde 	bl	800015c <__adddf3>
 80069a0:	4606      	mov	r6, r0
 80069a2:	460f      	mov	r7, r1
 80069a4:	4630      	mov	r0, r6
 80069a6:	4639      	mov	r1, r7
 80069a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ac:	2900      	cmp	r1, #0
 80069ae:	dc0c      	bgt.n	80069ca <__ieee754_sqrt+0x4e>
 80069b0:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80069b4:	4302      	orrs	r2, r0
 80069b6:	d0f5      	beq.n	80069a4 <__ieee754_sqrt+0x28>
 80069b8:	b189      	cbz	r1, 80069de <__ieee754_sqrt+0x62>
 80069ba:	4602      	mov	r2, r0
 80069bc:	f7f9 fbcc 	bl	8000158 <__aeabi_dsub>
 80069c0:	4602      	mov	r2, r0
 80069c2:	460b      	mov	r3, r1
 80069c4:	f7f9 feaa 	bl	800071c <__aeabi_ddiv>
 80069c8:	e7ea      	b.n	80069a0 <__ieee754_sqrt+0x24>
 80069ca:	150a      	asrs	r2, r1, #20
 80069cc:	d115      	bne.n	80069fa <__ieee754_sqrt+0x7e>
 80069ce:	2100      	movs	r1, #0
 80069d0:	e009      	b.n	80069e6 <__ieee754_sqrt+0x6a>
 80069d2:	0ae3      	lsrs	r3, r4, #11
 80069d4:	3a15      	subs	r2, #21
 80069d6:	0564      	lsls	r4, r4, #21
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d0fa      	beq.n	80069d2 <__ieee754_sqrt+0x56>
 80069dc:	e7f7      	b.n	80069ce <__ieee754_sqrt+0x52>
 80069de:	460a      	mov	r2, r1
 80069e0:	e7fa      	b.n	80069d8 <__ieee754_sqrt+0x5c>
 80069e2:	005b      	lsls	r3, r3, #1
 80069e4:	3101      	adds	r1, #1
 80069e6:	02d8      	lsls	r0, r3, #11
 80069e8:	d5fb      	bpl.n	80069e2 <__ieee754_sqrt+0x66>
 80069ea:	1e48      	subs	r0, r1, #1
 80069ec:	1a12      	subs	r2, r2, r0
 80069ee:	f1c1 0020 	rsb	r0, r1, #32
 80069f2:	fa24 f000 	lsr.w	r0, r4, r0
 80069f6:	4303      	orrs	r3, r0
 80069f8:	408c      	lsls	r4, r1
 80069fa:	2600      	movs	r6, #0
 80069fc:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8006a00:	2116      	movs	r1, #22
 8006a02:	07d2      	lsls	r2, r2, #31
 8006a04:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8006a08:	4632      	mov	r2, r6
 8006a0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a12:	bf5c      	itt	pl
 8006a14:	005b      	lslpl	r3, r3, #1
 8006a16:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8006a1a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006a1e:	bf58      	it	pl
 8006a20:	0064      	lslpl	r4, r4, #1
 8006a22:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8006a26:	107f      	asrs	r7, r7, #1
 8006a28:	0064      	lsls	r4, r4, #1
 8006a2a:	1815      	adds	r5, r2, r0
 8006a2c:	429d      	cmp	r5, r3
 8006a2e:	bfde      	ittt	le
 8006a30:	182a      	addle	r2, r5, r0
 8006a32:	1b5b      	suble	r3, r3, r5
 8006a34:	1836      	addle	r6, r6, r0
 8006a36:	0fe5      	lsrs	r5, r4, #31
 8006a38:	3901      	subs	r1, #1
 8006a3a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8006a3e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006a42:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006a46:	d1f0      	bne.n	8006a2a <__ieee754_sqrt+0xae>
 8006a48:	460d      	mov	r5, r1
 8006a4a:	f04f 0a20 	mov.w	sl, #32
 8006a4e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8006a52:	429a      	cmp	r2, r3
 8006a54:	eb01 0c00 	add.w	ip, r1, r0
 8006a58:	db02      	blt.n	8006a60 <__ieee754_sqrt+0xe4>
 8006a5a:	d113      	bne.n	8006a84 <__ieee754_sqrt+0x108>
 8006a5c:	45a4      	cmp	ip, r4
 8006a5e:	d811      	bhi.n	8006a84 <__ieee754_sqrt+0x108>
 8006a60:	f1bc 0f00 	cmp.w	ip, #0
 8006a64:	eb0c 0100 	add.w	r1, ip, r0
 8006a68:	da42      	bge.n	8006af0 <__ieee754_sqrt+0x174>
 8006a6a:	2900      	cmp	r1, #0
 8006a6c:	db40      	blt.n	8006af0 <__ieee754_sqrt+0x174>
 8006a6e:	f102 0e01 	add.w	lr, r2, #1
 8006a72:	1a9b      	subs	r3, r3, r2
 8006a74:	4672      	mov	r2, lr
 8006a76:	45a4      	cmp	ip, r4
 8006a78:	bf88      	it	hi
 8006a7a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006a7e:	eba4 040c 	sub.w	r4, r4, ip
 8006a82:	4405      	add	r5, r0
 8006a84:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8006a88:	f1ba 0a01 	subs.w	sl, sl, #1
 8006a8c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8006a90:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006a94:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006a98:	d1db      	bne.n	8006a52 <__ieee754_sqrt+0xd6>
 8006a9a:	431c      	orrs	r4, r3
 8006a9c:	d01a      	beq.n	8006ad4 <__ieee754_sqrt+0x158>
 8006a9e:	4c20      	ldr	r4, [pc, #128]	@ (8006b20 <__ieee754_sqrt+0x1a4>)
 8006aa0:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8006b24 <__ieee754_sqrt+0x1a8>
 8006aa4:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006aa8:	e9db 2300 	ldrd	r2, r3, [fp]
 8006aac:	f7f9 fb54 	bl	8000158 <__aeabi_dsub>
 8006ab0:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4640      	mov	r0, r8
 8006aba:	4649      	mov	r1, r9
 8006abc:	f7f9 ff80 	bl	80009c0 <__aeabi_dcmple>
 8006ac0:	b140      	cbz	r0, 8006ad4 <__ieee754_sqrt+0x158>
 8006ac2:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006ac6:	e9db 2300 	ldrd	r2, r3, [fp]
 8006aca:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006ace:	d111      	bne.n	8006af4 <__ieee754_sqrt+0x178>
 8006ad0:	4655      	mov	r5, sl
 8006ad2:	3601      	adds	r6, #1
 8006ad4:	1072      	asrs	r2, r6, #1
 8006ad6:	086b      	lsrs	r3, r5, #1
 8006ad8:	07f1      	lsls	r1, r6, #31
 8006ada:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006ade:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006ae2:	bf48      	it	mi
 8006ae4:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006ae8:	4618      	mov	r0, r3
 8006aea:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8006aee:	e757      	b.n	80069a0 <__ieee754_sqrt+0x24>
 8006af0:	4696      	mov	lr, r2
 8006af2:	e7be      	b.n	8006a72 <__ieee754_sqrt+0xf6>
 8006af4:	f7f9 fb32 	bl	800015c <__adddf3>
 8006af8:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4640      	mov	r0, r8
 8006b02:	4649      	mov	r1, r9
 8006b04:	f7f9 ff52 	bl	80009ac <__aeabi_dcmplt>
 8006b08:	b120      	cbz	r0, 8006b14 <__ieee754_sqrt+0x198>
 8006b0a:	1ca8      	adds	r0, r5, #2
 8006b0c:	bf08      	it	eq
 8006b0e:	3601      	addeq	r6, #1
 8006b10:	3502      	adds	r5, #2
 8006b12:	e7df      	b.n	8006ad4 <__ieee754_sqrt+0x158>
 8006b14:	1c6b      	adds	r3, r5, #1
 8006b16:	f023 0501 	bic.w	r5, r3, #1
 8006b1a:	e7db      	b.n	8006ad4 <__ieee754_sqrt+0x158>
 8006b1c:	7ff00000 	.word	0x7ff00000
 8006b20:	20000068 	.word	0x20000068
 8006b24:	20000060 	.word	0x20000060

08006b28 <__kernel_rem_pio2>:
 8006b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2c:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8006b30:	9308      	str	r3, [sp, #32]
 8006b32:	9104      	str	r1, [sp, #16]
 8006b34:	4bb6      	ldr	r3, [pc, #728]	@ (8006e10 <__kernel_rem_pio2+0x2e8>)
 8006b36:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 8006b38:	f112 0f14 	cmn.w	r2, #20
 8006b3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b40:	bfa8      	it	ge
 8006b42:	1ed4      	subge	r4, r2, #3
 8006b44:	9302      	str	r3, [sp, #8]
 8006b46:	9b08      	ldr	r3, [sp, #32]
 8006b48:	bfb8      	it	lt
 8006b4a:	2400      	movlt	r4, #0
 8006b4c:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b50:	9306      	str	r3, [sp, #24]
 8006b52:	bfa4      	itt	ge
 8006b54:	2318      	movge	r3, #24
 8006b56:	fb94 f4f3 	sdivge	r4, r4, r3
 8006b5a:	f06f 0317 	mvn.w	r3, #23
 8006b5e:	fb04 3303 	mla	r3, r4, r3, r3
 8006b62:	eb03 0a02 	add.w	sl, r3, r2
 8006b66:	9a06      	ldr	r2, [sp, #24]
 8006b68:	9b02      	ldr	r3, [sp, #8]
 8006b6a:	1aa7      	subs	r7, r4, r2
 8006b6c:	eb03 0802 	add.w	r8, r3, r2
 8006b70:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8006b72:	2500      	movs	r5, #0
 8006b74:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006b78:	2200      	movs	r2, #0
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	9009      	str	r0, [sp, #36]	@ 0x24
 8006b7e:	ae20      	add	r6, sp, #128	@ 0x80
 8006b80:	4545      	cmp	r5, r8
 8006b82:	dd14      	ble.n	8006bae <__kernel_rem_pio2+0x86>
 8006b84:	f04f 0800 	mov.w	r8, #0
 8006b88:	9a08      	ldr	r2, [sp, #32]
 8006b8a:	ab20      	add	r3, sp, #128	@ 0x80
 8006b8c:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8006b90:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 8006b94:	9b02      	ldr	r3, [sp, #8]
 8006b96:	4598      	cmp	r8, r3
 8006b98:	dc35      	bgt.n	8006c06 <__kernel_rem_pio2+0xde>
 8006b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f1a3 0908 	sub.w	r9, r3, #8
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	462f      	mov	r7, r5
 8006ba6:	2600      	movs	r6, #0
 8006ba8:	e9cd 2300 	strd	r2, r3, [sp]
 8006bac:	e01f      	b.n	8006bee <__kernel_rem_pio2+0xc6>
 8006bae:	42ef      	cmn	r7, r5
 8006bb0:	d40b      	bmi.n	8006bca <__kernel_rem_pio2+0xa2>
 8006bb2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006bb6:	e9cd 2300 	strd	r2, r3, [sp]
 8006bba:	f7f9 fc1b 	bl	80003f4 <__aeabi_i2d>
 8006bbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bc2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006bc6:	3501      	adds	r5, #1
 8006bc8:	e7da      	b.n	8006b80 <__kernel_rem_pio2+0x58>
 8006bca:	4610      	mov	r0, r2
 8006bcc:	4619      	mov	r1, r3
 8006bce:	e7f8      	b.n	8006bc2 <__kernel_rem_pio2+0x9a>
 8006bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bd4:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8006bd8:	f7f9 fc76 	bl	80004c8 <__aeabi_dmul>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	460b      	mov	r3, r1
 8006be0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006be4:	f7f9 faba 	bl	800015c <__adddf3>
 8006be8:	e9cd 0100 	strd	r0, r1, [sp]
 8006bec:	3601      	adds	r6, #1
 8006bee:	9b06      	ldr	r3, [sp, #24]
 8006bf0:	3f08      	subs	r7, #8
 8006bf2:	429e      	cmp	r6, r3
 8006bf4:	ddec      	ble.n	8006bd0 <__kernel_rem_pio2+0xa8>
 8006bf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bfa:	f108 0801 	add.w	r8, r8, #1
 8006bfe:	e8eb 2302 	strd	r2, r3, [fp], #8
 8006c02:	3508      	adds	r5, #8
 8006c04:	e7c6      	b.n	8006b94 <__kernel_rem_pio2+0x6c>
 8006c06:	9b02      	ldr	r3, [sp, #8]
 8006c08:	aa0c      	add	r2, sp, #48	@ 0x30
 8006c0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006c0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c10:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8006c12:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006c16:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006c1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c1c:	ab98      	add	r3, sp, #608	@ 0x260
 8006c1e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006c22:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 8006c26:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006c28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006c2c:	ae0c      	add	r6, sp, #48	@ 0x30
 8006c2e:	4698      	mov	r8, r3
 8006c30:	46b1      	mov	r9, r6
 8006c32:	465f      	mov	r7, fp
 8006c34:	9307      	str	r3, [sp, #28]
 8006c36:	2f00      	cmp	r7, #0
 8006c38:	f1a8 0808 	sub.w	r8, r8, #8
 8006c3c:	dc71      	bgt.n	8006d22 <__kernel_rem_pio2+0x1fa>
 8006c3e:	4652      	mov	r2, sl
 8006c40:	4620      	mov	r0, r4
 8006c42:	4629      	mov	r1, r5
 8006c44:	f7ff fdfc 	bl	8006840 <scalbn>
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8006c4e:	4604      	mov	r4, r0
 8006c50:	460d      	mov	r5, r1
 8006c52:	f7f9 fc39 	bl	80004c8 <__aeabi_dmul>
 8006c56:	f000 fa8b 	bl	8007170 <floor>
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	4b6d      	ldr	r3, [pc, #436]	@ (8006e14 <__kernel_rem_pio2+0x2ec>)
 8006c5e:	f7f9 fc33 	bl	80004c8 <__aeabi_dmul>
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	4620      	mov	r0, r4
 8006c68:	4629      	mov	r1, r5
 8006c6a:	f7f9 fa75 	bl	8000158 <__aeabi_dsub>
 8006c6e:	460d      	mov	r5, r1
 8006c70:	4604      	mov	r4, r0
 8006c72:	f7f9 fed9 	bl	8000a28 <__aeabi_d2iz>
 8006c76:	9005      	str	r0, [sp, #20]
 8006c78:	f7f9 fbbc 	bl	80003f4 <__aeabi_i2d>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	460b      	mov	r3, r1
 8006c80:	4620      	mov	r0, r4
 8006c82:	4629      	mov	r1, r5
 8006c84:	f7f9 fa68 	bl	8000158 <__aeabi_dsub>
 8006c88:	f1ba 0f00 	cmp.w	sl, #0
 8006c8c:	4680      	mov	r8, r0
 8006c8e:	4689      	mov	r9, r1
 8006c90:	dd6d      	ble.n	8006d6e <__kernel_rem_pio2+0x246>
 8006c92:	f10b 31ff 	add.w	r1, fp, #4294967295
 8006c96:	ab0c      	add	r3, sp, #48	@ 0x30
 8006c98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c9c:	9c05      	ldr	r4, [sp, #20]
 8006c9e:	f1ca 0018 	rsb	r0, sl, #24
 8006ca2:	fa43 f200 	asr.w	r2, r3, r0
 8006ca6:	4414      	add	r4, r2
 8006ca8:	4082      	lsls	r2, r0
 8006caa:	1a9b      	subs	r3, r3, r2
 8006cac:	aa0c      	add	r2, sp, #48	@ 0x30
 8006cae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006cb2:	f1ca 0217 	rsb	r2, sl, #23
 8006cb6:	9405      	str	r4, [sp, #20]
 8006cb8:	4113      	asrs	r3, r2
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	9b00      	ldr	r3, [sp, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	dd64      	ble.n	8006d8c <__kernel_rem_pio2+0x264>
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8006cc8:	4614      	mov	r4, r2
 8006cca:	9b05      	ldr	r3, [sp, #20]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	9305      	str	r3, [sp, #20]
 8006cd0:	4593      	cmp	fp, r2
 8006cd2:	f300 80ab 	bgt.w	8006e2c <__kernel_rem_pio2+0x304>
 8006cd6:	f1ba 0f00 	cmp.w	sl, #0
 8006cda:	dd07      	ble.n	8006cec <__kernel_rem_pio2+0x1c4>
 8006cdc:	f1ba 0f01 	cmp.w	sl, #1
 8006ce0:	f000 80b2 	beq.w	8006e48 <__kernel_rem_pio2+0x320>
 8006ce4:	f1ba 0f02 	cmp.w	sl, #2
 8006ce8:	f000 80b9 	beq.w	8006e5e <__kernel_rem_pio2+0x336>
 8006cec:	9b00      	ldr	r3, [sp, #0]
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d14c      	bne.n	8006d8c <__kernel_rem_pio2+0x264>
 8006cf2:	4642      	mov	r2, r8
 8006cf4:	464b      	mov	r3, r9
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	4947      	ldr	r1, [pc, #284]	@ (8006e18 <__kernel_rem_pio2+0x2f0>)
 8006cfa:	f7f9 fa2d 	bl	8000158 <__aeabi_dsub>
 8006cfe:	4680      	mov	r8, r0
 8006d00:	4689      	mov	r9, r1
 8006d02:	2c00      	cmp	r4, #0
 8006d04:	d042      	beq.n	8006d8c <__kernel_rem_pio2+0x264>
 8006d06:	4652      	mov	r2, sl
 8006d08:	2000      	movs	r0, #0
 8006d0a:	4943      	ldr	r1, [pc, #268]	@ (8006e18 <__kernel_rem_pio2+0x2f0>)
 8006d0c:	f7ff fd98 	bl	8006840 <scalbn>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4640      	mov	r0, r8
 8006d16:	4649      	mov	r1, r9
 8006d18:	f7f9 fa1e 	bl	8000158 <__aeabi_dsub>
 8006d1c:	4680      	mov	r8, r0
 8006d1e:	4689      	mov	r9, r1
 8006d20:	e034      	b.n	8006d8c <__kernel_rem_pio2+0x264>
 8006d22:	2200      	movs	r2, #0
 8006d24:	4b3d      	ldr	r3, [pc, #244]	@ (8006e1c <__kernel_rem_pio2+0x2f4>)
 8006d26:	4620      	mov	r0, r4
 8006d28:	4629      	mov	r1, r5
 8006d2a:	f7f9 fbcd 	bl	80004c8 <__aeabi_dmul>
 8006d2e:	f7f9 fe7b 	bl	8000a28 <__aeabi_d2iz>
 8006d32:	f7f9 fb5f 	bl	80003f4 <__aeabi_i2d>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	e9cd 2300 	strd	r2, r3, [sp]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	4b37      	ldr	r3, [pc, #220]	@ (8006e20 <__kernel_rem_pio2+0x2f8>)
 8006d42:	f7f9 fbc1 	bl	80004c8 <__aeabi_dmul>
 8006d46:	4602      	mov	r2, r0
 8006d48:	460b      	mov	r3, r1
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	4629      	mov	r1, r5
 8006d4e:	f7f9 fa03 	bl	8000158 <__aeabi_dsub>
 8006d52:	f7f9 fe69 	bl	8000a28 <__aeabi_d2iz>
 8006d56:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006d5a:	f849 0b04 	str.w	r0, [r9], #4
 8006d5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d62:	f7f9 f9fb 	bl	800015c <__adddf3>
 8006d66:	3f01      	subs	r7, #1
 8006d68:	4604      	mov	r4, r0
 8006d6a:	460d      	mov	r5, r1
 8006d6c:	e763      	b.n	8006c36 <__kernel_rem_pio2+0x10e>
 8006d6e:	d106      	bne.n	8006d7e <__kernel_rem_pio2+0x256>
 8006d70:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006d74:	aa0c      	add	r2, sp, #48	@ 0x30
 8006d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d7a:	15db      	asrs	r3, r3, #23
 8006d7c:	e79d      	b.n	8006cba <__kernel_rem_pio2+0x192>
 8006d7e:	2200      	movs	r2, #0
 8006d80:	4b28      	ldr	r3, [pc, #160]	@ (8006e24 <__kernel_rem_pio2+0x2fc>)
 8006d82:	f7f9 fe27 	bl	80009d4 <__aeabi_dcmpge>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	d13f      	bne.n	8006e0a <__kernel_rem_pio2+0x2e2>
 8006d8a:	9000      	str	r0, [sp, #0]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	2300      	movs	r3, #0
 8006d90:	4640      	mov	r0, r8
 8006d92:	4649      	mov	r1, r9
 8006d94:	f7f9 fe00 	bl	8000998 <__aeabi_dcmpeq>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	f000 80af 	beq.w	8006efc <__kernel_rem_pio2+0x3d4>
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006da4:	9902      	ldr	r1, [sp, #8]
 8006da6:	428b      	cmp	r3, r1
 8006da8:	da61      	bge.n	8006e6e <__kernel_rem_pio2+0x346>
 8006daa:	2a00      	cmp	r2, #0
 8006dac:	d076      	beq.n	8006e9c <__kernel_rem_pio2+0x374>
 8006dae:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006db2:	ab0c      	add	r3, sp, #48	@ 0x30
 8006db4:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8006db8:	f1aa 0a18 	sub.w	sl, sl, #24
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d0f6      	beq.n	8006dae <__kernel_rem_pio2+0x286>
 8006dc0:	4652      	mov	r2, sl
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	4914      	ldr	r1, [pc, #80]	@ (8006e18 <__kernel_rem_pio2+0x2f0>)
 8006dc6:	f7ff fd3b 	bl	8006840 <scalbn>
 8006dca:	465d      	mov	r5, fp
 8006dcc:	4606      	mov	r6, r0
 8006dce:	460f      	mov	r7, r1
 8006dd0:	f04f 0900 	mov.w	r9, #0
 8006dd4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006dd6:	f8df a044 	ldr.w	sl, [pc, #68]	@ 8006e1c <__kernel_rem_pio2+0x2f4>
 8006dda:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 8006dde:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 8006de2:	2d00      	cmp	r5, #0
 8006de4:	f280 80c0 	bge.w	8006f68 <__kernel_rem_pio2+0x440>
 8006de8:	465d      	mov	r5, fp
 8006dea:	2d00      	cmp	r5, #0
 8006dec:	f2c0 80f0 	blt.w	8006fd0 <__kernel_rem_pio2+0x4a8>
 8006df0:	4b0d      	ldr	r3, [pc, #52]	@ (8006e28 <__kernel_rem_pio2+0x300>)
 8006df2:	f04f 0900 	mov.w	r9, #0
 8006df6:	9306      	str	r3, [sp, #24]
 8006df8:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006dfa:	f04f 0a00 	mov.w	sl, #0
 8006dfe:	2700      	movs	r7, #0
 8006e00:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 8006e04:	ebab 0605 	sub.w	r6, fp, r5
 8006e08:	e0d6      	b.n	8006fb8 <__kernel_rem_pio2+0x490>
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	e758      	b.n	8006cc2 <__kernel_rem_pio2+0x19a>
 8006e10:	080074f0 	.word	0x080074f0
 8006e14:	40200000 	.word	0x40200000
 8006e18:	3ff00000 	.word	0x3ff00000
 8006e1c:	3e700000 	.word	0x3e700000
 8006e20:	41700000 	.word	0x41700000
 8006e24:	3fe00000 	.word	0x3fe00000
 8006e28:	080074b0 	.word	0x080074b0
 8006e2c:	f856 3b04 	ldr.w	r3, [r6], #4
 8006e30:	b944      	cbnz	r4, 8006e44 <__kernel_rem_pio2+0x31c>
 8006e32:	b123      	cbz	r3, 8006e3e <__kernel_rem_pio2+0x316>
 8006e34:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8006e38:	f846 3c04 	str.w	r3, [r6, #-4]
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	461c      	mov	r4, r3
 8006e40:	3201      	adds	r2, #1
 8006e42:	e745      	b.n	8006cd0 <__kernel_rem_pio2+0x1a8>
 8006e44:	1acb      	subs	r3, r1, r3
 8006e46:	e7f7      	b.n	8006e38 <__kernel_rem_pio2+0x310>
 8006e48:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006e4c:	ab0c      	add	r3, sp, #48	@ 0x30
 8006e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e52:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006e56:	a90c      	add	r1, sp, #48	@ 0x30
 8006e58:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006e5c:	e746      	b.n	8006cec <__kernel_rem_pio2+0x1c4>
 8006e5e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006e62:	ab0c      	add	r3, sp, #48	@ 0x30
 8006e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e68:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006e6c:	e7f3      	b.n	8006e56 <__kernel_rem_pio2+0x32e>
 8006e6e:	a90c      	add	r1, sp, #48	@ 0x30
 8006e70:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006e74:	3b01      	subs	r3, #1
 8006e76:	430a      	orrs	r2, r1
 8006e78:	e794      	b.n	8006da4 <__kernel_rem_pio2+0x27c>
 8006e7a:	3401      	adds	r4, #1
 8006e7c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006e80:	2a00      	cmp	r2, #0
 8006e82:	d0fa      	beq.n	8006e7a <__kernel_rem_pio2+0x352>
 8006e84:	9b08      	ldr	r3, [sp, #32]
 8006e86:	aa20      	add	r2, sp, #128	@ 0x80
 8006e88:	445b      	add	r3, fp
 8006e8a:	f10b 0801 	add.w	r8, fp, #1
 8006e8e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006e92:	445c      	add	r4, fp
 8006e94:	4544      	cmp	r4, r8
 8006e96:	da04      	bge.n	8006ea2 <__kernel_rem_pio2+0x37a>
 8006e98:	46a3      	mov	fp, r4
 8006e9a:	e6bf      	b.n	8006c1c <__kernel_rem_pio2+0xf4>
 8006e9c:	2401      	movs	r4, #1
 8006e9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ea0:	e7ec      	b.n	8006e7c <__kernel_rem_pio2+0x354>
 8006ea2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ea4:	46ab      	mov	fp, r5
 8006ea6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006eaa:	f7f9 faa3 	bl	80003f4 <__aeabi_i2d>
 8006eae:	f04f 0900 	mov.w	r9, #0
 8006eb2:	2600      	movs	r6, #0
 8006eb4:	2700      	movs	r7, #0
 8006eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eb8:	e9c5 0100 	strd	r0, r1, [r5]
 8006ebc:	3b08      	subs	r3, #8
 8006ebe:	9300      	str	r3, [sp, #0]
 8006ec0:	9b06      	ldr	r3, [sp, #24]
 8006ec2:	4599      	cmp	r9, r3
 8006ec4:	dd07      	ble.n	8006ed6 <__kernel_rem_pio2+0x3ae>
 8006ec6:	9b07      	ldr	r3, [sp, #28]
 8006ec8:	f108 0801 	add.w	r8, r8, #1
 8006ecc:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 8006ed0:	3508      	adds	r5, #8
 8006ed2:	9307      	str	r3, [sp, #28]
 8006ed4:	e7de      	b.n	8006e94 <__kernel_rem_pio2+0x36c>
 8006ed6:	9900      	ldr	r1, [sp, #0]
 8006ed8:	f109 0901 	add.w	r9, r9, #1
 8006edc:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8006ee0:	9100      	str	r1, [sp, #0]
 8006ee2:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 8006ee6:	f7f9 faef 	bl	80004c8 <__aeabi_dmul>
 8006eea:	4602      	mov	r2, r0
 8006eec:	460b      	mov	r3, r1
 8006eee:	4630      	mov	r0, r6
 8006ef0:	4639      	mov	r1, r7
 8006ef2:	f7f9 f933 	bl	800015c <__adddf3>
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	460f      	mov	r7, r1
 8006efa:	e7e1      	b.n	8006ec0 <__kernel_rem_pio2+0x398>
 8006efc:	f1ca 0200 	rsb	r2, sl, #0
 8006f00:	4640      	mov	r0, r8
 8006f02:	4649      	mov	r1, r9
 8006f04:	f7ff fc9c 	bl	8006840 <scalbn>
 8006f08:	2200      	movs	r2, #0
 8006f0a:	4b97      	ldr	r3, [pc, #604]	@ (8007168 <__kernel_rem_pio2+0x640>)
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	460d      	mov	r5, r1
 8006f10:	f7f9 fd60 	bl	80009d4 <__aeabi_dcmpge>
 8006f14:	b300      	cbz	r0, 8006f58 <__kernel_rem_pio2+0x430>
 8006f16:	2200      	movs	r2, #0
 8006f18:	4b94      	ldr	r3, [pc, #592]	@ (800716c <__kernel_rem_pio2+0x644>)
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	4629      	mov	r1, r5
 8006f1e:	f7f9 fad3 	bl	80004c8 <__aeabi_dmul>
 8006f22:	f7f9 fd81 	bl	8000a28 <__aeabi_d2iz>
 8006f26:	4606      	mov	r6, r0
 8006f28:	f7f9 fa64 	bl	80003f4 <__aeabi_i2d>
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	4b8e      	ldr	r3, [pc, #568]	@ (8007168 <__kernel_rem_pio2+0x640>)
 8006f30:	f7f9 faca 	bl	80004c8 <__aeabi_dmul>
 8006f34:	460b      	mov	r3, r1
 8006f36:	4602      	mov	r2, r0
 8006f38:	4629      	mov	r1, r5
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f7f9 f90c 	bl	8000158 <__aeabi_dsub>
 8006f40:	f7f9 fd72 	bl	8000a28 <__aeabi_d2iz>
 8006f44:	ab0c      	add	r3, sp, #48	@ 0x30
 8006f46:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8006f4a:	f10b 0b01 	add.w	fp, fp, #1
 8006f4e:	f10a 0a18 	add.w	sl, sl, #24
 8006f52:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8006f56:	e733      	b.n	8006dc0 <__kernel_rem_pio2+0x298>
 8006f58:	4620      	mov	r0, r4
 8006f5a:	4629      	mov	r1, r5
 8006f5c:	f7f9 fd64 	bl	8000a28 <__aeabi_d2iz>
 8006f60:	ab0c      	add	r3, sp, #48	@ 0x30
 8006f62:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8006f66:	e72b      	b.n	8006dc0 <__kernel_rem_pio2+0x298>
 8006f68:	ab0c      	add	r3, sp, #48	@ 0x30
 8006f6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f6e:	f7f9 fa41 	bl	80003f4 <__aeabi_i2d>
 8006f72:	4632      	mov	r2, r6
 8006f74:	463b      	mov	r3, r7
 8006f76:	f7f9 faa7 	bl	80004c8 <__aeabi_dmul>
 8006f7a:	464a      	mov	r2, r9
 8006f7c:	e868 0102 	strd	r0, r1, [r8], #-8
 8006f80:	4653      	mov	r3, sl
 8006f82:	4630      	mov	r0, r6
 8006f84:	4639      	mov	r1, r7
 8006f86:	f7f9 fa9f 	bl	80004c8 <__aeabi_dmul>
 8006f8a:	3d01      	subs	r5, #1
 8006f8c:	4606      	mov	r6, r0
 8006f8e:	460f      	mov	r7, r1
 8006f90:	e727      	b.n	8006de2 <__kernel_rem_pio2+0x2ba>
 8006f92:	f8dd c018 	ldr.w	ip, [sp, #24]
 8006f96:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8006f9a:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8006f9e:	f8cd c018 	str.w	ip, [sp, #24]
 8006fa2:	f7f9 fa91 	bl	80004c8 <__aeabi_dmul>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4648      	mov	r0, r9
 8006fac:	4651      	mov	r1, sl
 8006fae:	f7f9 f8d5 	bl	800015c <__adddf3>
 8006fb2:	4681      	mov	r9, r0
 8006fb4:	468a      	mov	sl, r1
 8006fb6:	3701      	adds	r7, #1
 8006fb8:	9b02      	ldr	r3, [sp, #8]
 8006fba:	429f      	cmp	r7, r3
 8006fbc:	dc01      	bgt.n	8006fc2 <__kernel_rem_pio2+0x49a>
 8006fbe:	42be      	cmp	r6, r7
 8006fc0:	dae7      	bge.n	8006f92 <__kernel_rem_pio2+0x46a>
 8006fc2:	ab48      	add	r3, sp, #288	@ 0x120
 8006fc4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006fc8:	e9c6 9a00 	strd	r9, sl, [r6]
 8006fcc:	3d01      	subs	r5, #1
 8006fce:	e70c      	b.n	8006dea <__kernel_rem_pio2+0x2c2>
 8006fd0:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	dc09      	bgt.n	8006fea <__kernel_rem_pio2+0x4c2>
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	dc2c      	bgt.n	8007034 <__kernel_rem_pio2+0x50c>
 8006fda:	d04e      	beq.n	800707a <__kernel_rem_pio2+0x552>
 8006fdc:	9b05      	ldr	r3, [sp, #20]
 8006fde:	f003 0007 	and.w	r0, r3, #7
 8006fe2:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8006fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fea:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8006fec:	2b03      	cmp	r3, #3
 8006fee:	d1f5      	bne.n	8006fdc <__kernel_rem_pio2+0x4b4>
 8006ff0:	ab48      	add	r3, sp, #288	@ 0x120
 8006ff2:	441c      	add	r4, r3
 8006ff4:	4625      	mov	r5, r4
 8006ff6:	46da      	mov	sl, fp
 8006ff8:	f1ba 0f00 	cmp.w	sl, #0
 8006ffc:	dc63      	bgt.n	80070c6 <__kernel_rem_pio2+0x59e>
 8006ffe:	4625      	mov	r5, r4
 8007000:	46da      	mov	sl, fp
 8007002:	f1ba 0f01 	cmp.w	sl, #1
 8007006:	dc7b      	bgt.n	8007100 <__kernel_rem_pio2+0x5d8>
 8007008:	2000      	movs	r0, #0
 800700a:	2100      	movs	r1, #0
 800700c:	f1bb 0f01 	cmp.w	fp, #1
 8007010:	f300 8093 	bgt.w	800713a <__kernel_rem_pio2+0x612>
 8007014:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8007018:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800701c:	9b00      	ldr	r3, [sp, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	f040 8092 	bne.w	8007148 <__kernel_rem_pio2+0x620>
 8007024:	9b04      	ldr	r3, [sp, #16]
 8007026:	e9c3 7800 	strd	r7, r8, [r3]
 800702a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800702e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007032:	e7d3      	b.n	8006fdc <__kernel_rem_pio2+0x4b4>
 8007034:	465d      	mov	r5, fp
 8007036:	2000      	movs	r0, #0
 8007038:	2100      	movs	r1, #0
 800703a:	ab48      	add	r3, sp, #288	@ 0x120
 800703c:	441c      	add	r4, r3
 800703e:	2d00      	cmp	r5, #0
 8007040:	da32      	bge.n	80070a8 <__kernel_rem_pio2+0x580>
 8007042:	9b00      	ldr	r3, [sp, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d035      	beq.n	80070b4 <__kernel_rem_pio2+0x58c>
 8007048:	4602      	mov	r2, r0
 800704a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800704e:	9c04      	ldr	r4, [sp, #16]
 8007050:	2501      	movs	r5, #1
 8007052:	e9c4 2300 	strd	r2, r3, [r4]
 8007056:	4602      	mov	r2, r0
 8007058:	460b      	mov	r3, r1
 800705a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800705e:	f7f9 f87b 	bl	8000158 <__aeabi_dsub>
 8007062:	ac48      	add	r4, sp, #288	@ 0x120
 8007064:	45ab      	cmp	fp, r5
 8007066:	da28      	bge.n	80070ba <__kernel_rem_pio2+0x592>
 8007068:	9b00      	ldr	r3, [sp, #0]
 800706a:	b113      	cbz	r3, 8007072 <__kernel_rem_pio2+0x54a>
 800706c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007070:	4619      	mov	r1, r3
 8007072:	9b04      	ldr	r3, [sp, #16]
 8007074:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007078:	e7b0      	b.n	8006fdc <__kernel_rem_pio2+0x4b4>
 800707a:	2000      	movs	r0, #0
 800707c:	2100      	movs	r1, #0
 800707e:	ab48      	add	r3, sp, #288	@ 0x120
 8007080:	441c      	add	r4, r3
 8007082:	f1bb 0f00 	cmp.w	fp, #0
 8007086:	da08      	bge.n	800709a <__kernel_rem_pio2+0x572>
 8007088:	9b00      	ldr	r3, [sp, #0]
 800708a:	b113      	cbz	r3, 8007092 <__kernel_rem_pio2+0x56a>
 800708c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007090:	4619      	mov	r1, r3
 8007092:	9b04      	ldr	r3, [sp, #16]
 8007094:	e9c3 0100 	strd	r0, r1, [r3]
 8007098:	e7a0      	b.n	8006fdc <__kernel_rem_pio2+0x4b4>
 800709a:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800709e:	f7f9 f85d 	bl	800015c <__adddf3>
 80070a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80070a6:	e7ec      	b.n	8007082 <__kernel_rem_pio2+0x55a>
 80070a8:	e874 2302 	ldrd	r2, r3, [r4], #-8
 80070ac:	f7f9 f856 	bl	800015c <__adddf3>
 80070b0:	3d01      	subs	r5, #1
 80070b2:	e7c4      	b.n	800703e <__kernel_rem_pio2+0x516>
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	e7c9      	b.n	800704e <__kernel_rem_pio2+0x526>
 80070ba:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 80070be:	f7f9 f84d 	bl	800015c <__adddf3>
 80070c2:	3501      	adds	r5, #1
 80070c4:	e7ce      	b.n	8007064 <__kernel_rem_pio2+0x53c>
 80070c6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070ca:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 80070ce:	4640      	mov	r0, r8
 80070d0:	4649      	mov	r1, r9
 80070d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070d6:	f7f9 f841 	bl	800015c <__adddf3>
 80070da:	4602      	mov	r2, r0
 80070dc:	460b      	mov	r3, r1
 80070de:	4606      	mov	r6, r0
 80070e0:	460f      	mov	r7, r1
 80070e2:	4640      	mov	r0, r8
 80070e4:	4649      	mov	r1, r9
 80070e6:	f7f9 f837 	bl	8000158 <__aeabi_dsub>
 80070ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070ee:	f7f9 f835 	bl	800015c <__adddf3>
 80070f2:	e865 0102 	strd	r0, r1, [r5], #-8
 80070f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070fa:	e9c5 6700 	strd	r6, r7, [r5]
 80070fe:	e77b      	b.n	8006ff8 <__kernel_rem_pio2+0x4d0>
 8007100:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007104:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8007108:	4640      	mov	r0, r8
 800710a:	4649      	mov	r1, r9
 800710c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007110:	f7f9 f824 	bl	800015c <__adddf3>
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	4606      	mov	r6, r0
 800711a:	460f      	mov	r7, r1
 800711c:	4640      	mov	r0, r8
 800711e:	4649      	mov	r1, r9
 8007120:	f7f9 f81a 	bl	8000158 <__aeabi_dsub>
 8007124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007128:	f7f9 f818 	bl	800015c <__adddf3>
 800712c:	e865 0102 	strd	r0, r1, [r5], #-8
 8007130:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007134:	e9c5 6700 	strd	r6, r7, [r5]
 8007138:	e763      	b.n	8007002 <__kernel_rem_pio2+0x4da>
 800713a:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800713e:	f7f9 f80d 	bl	800015c <__adddf3>
 8007142:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007146:	e761      	b.n	800700c <__kernel_rem_pio2+0x4e4>
 8007148:	9b04      	ldr	r3, [sp, #16]
 800714a:	9a04      	ldr	r2, [sp, #16]
 800714c:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8007150:	601f      	str	r7, [r3, #0]
 8007152:	605c      	str	r4, [r3, #4]
 8007154:	609d      	str	r5, [r3, #8]
 8007156:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800715a:	60d3      	str	r3, [r2, #12]
 800715c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007160:	6110      	str	r0, [r2, #16]
 8007162:	6153      	str	r3, [r2, #20]
 8007164:	e73a      	b.n	8006fdc <__kernel_rem_pio2+0x4b4>
 8007166:	bf00      	nop
 8007168:	41700000 	.word	0x41700000
 800716c:	3e700000 	.word	0x3e700000

08007170 <floor>:
 8007170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007174:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007178:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800717c:	2e13      	cmp	r6, #19
 800717e:	4602      	mov	r2, r0
 8007180:	460b      	mov	r3, r1
 8007182:	460c      	mov	r4, r1
 8007184:	4605      	mov	r5, r0
 8007186:	4680      	mov	r8, r0
 8007188:	dc35      	bgt.n	80071f6 <floor+0x86>
 800718a:	2e00      	cmp	r6, #0
 800718c:	da17      	bge.n	80071be <floor+0x4e>
 800718e:	a334      	add	r3, pc, #208	@ (adr r3, 8007260 <floor+0xf0>)
 8007190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007194:	f7f8 ffe2 	bl	800015c <__adddf3>
 8007198:	2200      	movs	r2, #0
 800719a:	2300      	movs	r3, #0
 800719c:	f7f9 fc24 	bl	80009e8 <__aeabi_dcmpgt>
 80071a0:	b150      	cbz	r0, 80071b8 <floor+0x48>
 80071a2:	2c00      	cmp	r4, #0
 80071a4:	da57      	bge.n	8007256 <floor+0xe6>
 80071a6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80071aa:	432c      	orrs	r4, r5
 80071ac:	2500      	movs	r5, #0
 80071ae:	42ac      	cmp	r4, r5
 80071b0:	4c2d      	ldr	r4, [pc, #180]	@ (8007268 <floor+0xf8>)
 80071b2:	bf08      	it	eq
 80071b4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80071b8:	4623      	mov	r3, r4
 80071ba:	462a      	mov	r2, r5
 80071bc:	e024      	b.n	8007208 <floor+0x98>
 80071be:	4f2b      	ldr	r7, [pc, #172]	@ (800726c <floor+0xfc>)
 80071c0:	4137      	asrs	r7, r6
 80071c2:	ea01 0c07 	and.w	ip, r1, r7
 80071c6:	ea5c 0c00 	orrs.w	ip, ip, r0
 80071ca:	d01d      	beq.n	8007208 <floor+0x98>
 80071cc:	a324      	add	r3, pc, #144	@ (adr r3, 8007260 <floor+0xf0>)
 80071ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d2:	f7f8 ffc3 	bl	800015c <__adddf3>
 80071d6:	2200      	movs	r2, #0
 80071d8:	2300      	movs	r3, #0
 80071da:	f7f9 fc05 	bl	80009e8 <__aeabi_dcmpgt>
 80071de:	2800      	cmp	r0, #0
 80071e0:	d0ea      	beq.n	80071b8 <floor+0x48>
 80071e2:	2c00      	cmp	r4, #0
 80071e4:	bfbe      	ittt	lt
 80071e6:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80071ea:	4133      	asrlt	r3, r6
 80071ec:	18e4      	addlt	r4, r4, r3
 80071ee:	2500      	movs	r5, #0
 80071f0:	ea24 0407 	bic.w	r4, r4, r7
 80071f4:	e7e0      	b.n	80071b8 <floor+0x48>
 80071f6:	2e33      	cmp	r6, #51	@ 0x33
 80071f8:	dd0a      	ble.n	8007210 <floor+0xa0>
 80071fa:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80071fe:	d103      	bne.n	8007208 <floor+0x98>
 8007200:	f7f8 ffac 	bl	800015c <__adddf3>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	4610      	mov	r0, r2
 800720a:	4619      	mov	r1, r3
 800720c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007210:	f04f 3cff 	mov.w	ip, #4294967295
 8007214:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8007218:	fa2c f707 	lsr.w	r7, ip, r7
 800721c:	4207      	tst	r7, r0
 800721e:	d0f3      	beq.n	8007208 <floor+0x98>
 8007220:	a30f      	add	r3, pc, #60	@ (adr r3, 8007260 <floor+0xf0>)
 8007222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007226:	f7f8 ff99 	bl	800015c <__adddf3>
 800722a:	2200      	movs	r2, #0
 800722c:	2300      	movs	r3, #0
 800722e:	f7f9 fbdb 	bl	80009e8 <__aeabi_dcmpgt>
 8007232:	2800      	cmp	r0, #0
 8007234:	d0c0      	beq.n	80071b8 <floor+0x48>
 8007236:	2c00      	cmp	r4, #0
 8007238:	da0a      	bge.n	8007250 <floor+0xe0>
 800723a:	2e14      	cmp	r6, #20
 800723c:	d101      	bne.n	8007242 <floor+0xd2>
 800723e:	3401      	adds	r4, #1
 8007240:	e006      	b.n	8007250 <floor+0xe0>
 8007242:	2301      	movs	r3, #1
 8007244:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8007248:	40b3      	lsls	r3, r6
 800724a:	441d      	add	r5, r3
 800724c:	4545      	cmp	r5, r8
 800724e:	d3f6      	bcc.n	800723e <floor+0xce>
 8007250:	ea25 0507 	bic.w	r5, r5, r7
 8007254:	e7b0      	b.n	80071b8 <floor+0x48>
 8007256:	2500      	movs	r5, #0
 8007258:	462c      	mov	r4, r5
 800725a:	e7ad      	b.n	80071b8 <floor+0x48>
 800725c:	f3af 8000 	nop.w
 8007260:	8800759c 	.word	0x8800759c
 8007264:	7e37e43c 	.word	0x7e37e43c
 8007268:	bff00000 	.word	0xbff00000
 800726c:	000fffff 	.word	0x000fffff

08007270 <_init>:
 8007270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007272:	bf00      	nop
 8007274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007276:	bc08      	pop	{r3}
 8007278:	469e      	mov	lr, r3
 800727a:	4770      	bx	lr

0800727c <_fini>:
 800727c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727e:	bf00      	nop
 8007280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007282:	bc08      	pop	{r3}
 8007284:	469e      	mov	lr, r3
 8007286:	4770      	bx	lr
